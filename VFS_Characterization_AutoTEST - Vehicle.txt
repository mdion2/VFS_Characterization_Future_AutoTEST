'********************************************************************************************
' VFS_Characterization_TRAM_VEHICLE_v7.0  -- 05/19/2020
'
'    ****** Requires AutoTEST Version 1.0.0.152 *****
'    ****** Requires Vision Service in ATI to be running *****
'
'
'********************************************************************************************
'
'********************************************************************************************
'*********************************** PreTest Routines ***************************************
'********************************************************************************************

'Test and Setup Version
Let !TestVer = v7.0
Let !LatestSetupVer = 02.12.2021

'Welcome Message
Screen_Message (Green,%%New_Line%%You Are Running VFS_Characterization.  Setting up Test.)

'Establish test start time
Let $Test_Start_Time = Timer
Let !Test_Start_Time = %%Time%%
Log_Message (VFS_Characterization test started at %%!Test_Start_Time%%)

'Set Desktop Mode
Let $Desktop_Mode = 0

'Perform Initialization tasks
Gosub Import_Test_Variables_From_Excel
Gosub Matrix_Setup
Gosub TFT_Matrix
Gosub Restart_Check

'Set Engine Strategy Type
' 1 New Gas (DSDN_NE_TST, DSDN_SW_TST)
' 2 Old Gas (DSDRPM_TST_RPM, DSDRPM_SW_TST)
' 3 Diesel (HLSDem_nSetPLoGearClnt_MAP, HLSDem_nSetPLoDia_C)
Let $Engine_Strategy = 3
Gosub Save_Engine_And_Pedal_Values

Save_Variables
Save_Debug_Files

'Resume test Message
Screen_Message (Yellow,%%New_Line%%You Are Running VFS_Characterization.%%New_Line%%%%New_Line%%Autozero Pressure Transducers and%%New_Line%%%%New_Line%%Press 'Resume Test' to begin the test.)
Pause

'Set test name string based on RunType
Select_Case $RunType
	Case = 1
		'Current Steps
		Let !Test = Current_Steps
	Case = 2
		'Current Sweeps
		Let !Test = Current_Sweep
	Case = 3
		'Pressure Steps
		Let !Test = Pressure_Step
	Case = 4
		'Pressure Sweeps
		Let !Test = Pressure_Sweep
	Case = 5
		'Pressure Bar-Graph
		Let !Test = Bar_Graph
	Case = 6
		'Pressure Response Test
		Let !Test = Pressure_Response
	' Case = 7
		' 'Line Pressure Gain Switching
		' Let !Test = Gain_Switch
	Case = 8
		'Preset Pressure Steps
		Let !Test = Preset_Pressure_Step
	Case = 9
		'Multi-rate Triangle Wave
		Let !Test = Triangle_Wave
	Case = 10
		'Square Wave
		Let !Test = SquareWave
	Case = 11
		'Boost DOE
		Let !Test = BoostDOE
	Case = 12
		'Dual Boost
		Let !Test = DualBoost
	Case = 13
		'Custom Profile
		If $CP_ProfileType = 0
		'Custom Pressure Profile
			Let !Test = CustomProfile_Pressure
		Else
		'Custom Current Profile
			Let !Test = CustomProfile_Current
		End
	Case = 14
		'Transfer Function Development
		Let !Test = Transfer_Function
	Case = 15	
		'Stiction
		Let !Test = Stiction
	Case = 16
		'Balance Dam
		Let !Test = Balance_Dam
	Case = 17
		'Preset Current Steps
		Let !Test = Preset_Current_Steps		
	Case = 18
		'Multiple Tests
		Let !Test = Multiple_Tests	
End_Select

'Send Starting Test text message
Let !Text_Message = "Starting VFS_Characterization - %%!Test%%."
Gosub Send_Text_Message

'Initialize alarms, heartbeats, and shutdown trigger. Start heartbeat monitor
If $Vehicle_Flag = 1
	Let $PC_Eng_And_Cell_Shutdown_Enable = 0
Else
	If $Desktop_Mode ~= 1
		Let $PC_Eng_And_Cell_Shutdown_Enable = 1
		Gosub Autoshutdown_Enable
		Monitor_On Control_Monitors
		Log_Message (Starting Control_Monitors monitor.)
	End
End

'Send dSPACE run request
If $Desktop_Mode ~= 1
	If $HIL_Flag = 1
		Gosub Run_Request
		Monitor_On dSPACE_Run_Request
		Log_Message (Starting dSPACE_Run_Request monitor.)
	End
End

'Set screen message during test setup and initialization
Screen_Message (Green,%%New_Line%%Preparing AutoTEST.)

'Set Recorder Name for Vision Service
Let !Recorder_Name = TRAM
'Check Vision Service for connectivity
Gosub Test_PCM_Interface_For_Connectivity

'Save base PCM values
Select_Case $Trans_Select
	Case = 2
		'8F24
		Gosub Save_8F_TRAM_Values
	Case = 3
		'10R140
		Gosub Save_10R_TRAM_Values		
	Case = 4
		'8F24
		Gosub Save_8F_TRAM_Values	
	Case = 6
		'10R60/80
		Gosub Save_10R_TRAM_Values
	Case = 7
		'8F35
		Gosub Save_8F_TRAM_Values
	Case = 8
		'6R80
		Gosub Save_6R_TRAM_Values		
End_Select	

'Set PID gains for speed and torque control
Gosub Set_PID_Gains

'********************************************************************************************
'*************************** Main Loop Of VFS_Characterization ******************************
'********************************************************************************************

'Main control loop for testpoint management
Do
	Next_Test_Point:
	'Increment counter
	Let $Current_Testpoint = $Current_Testpoint + 1
	'Reset testpoint counter if counter exceeds number of testpoints
	If $Current_Testpoint > $Total_Testpoints
		If $Skipped_Point_Flag = 1
			Let $Current_Testpoint = 1
			Testpoint = $Current_Testpoint
			Let $Skipped_Point_Flag = 0
		Else
			Goto Test_Done:
		End
	End
	'Set testpoint display number
	Testpoint = $Current_Testpoint
	Let !Testpoint_Start_Time = %%Time%%
	'Check completion status of current testpoint
	If Point_Status ($Current_Testpoint) ~= Done
		If Point_Status ($Current_Testpoint) ~= Run
			Goto Next_Test_Point:
		Else
			Gosub Start_Next_Point
		End
	Else
		Goto Next_Test_Point:
	End
	'Proceed to test
	Gosub Run_Test_Point
	'Reconcile testpoint status after running testpoint
	Gosub End_Test_Point
	'Reset AutoTEST alarms
	Gosub Reset_Autoshutdown_Enable
Loop

'Upon test completion, calculate total test time
Test_Done:
Let $Test_End_Time = Timer
Let $Total_Test_Time = $Test_End_Time - $Test_Start_Time 
Log_Message (VFS_Characterization test completed at %%$Test_End_Time,0D%%. Elapsed Total Test Time is %%$Total_Test_Time,0D%%.)

'Send Test Completion text message
Let !Text_Message = "VFS_Characterization - %%!Test%% has completed."
Gosub Send_Text_Message

'If enabled, capture post-test key-on, engine-off transducer levels
If $Vehicle_Flag ~= 1
	'Gosub Capture_Transducer_Zero
End

'End of Test 
Limits_Off
Gosub Test_Completed

End_Procedure

'********************************************************************************************
'********************************************************************************************
'*************************************** Subroutines ****************************************
'********************************************************************************************
'********************************************************************************************
'*******************************************************
Sub Run_Test_Point
'*******************************************************
'Establish testpoint specific factors
Let $CurrentRunElement = 0
Let $CurrentRunTemp = $TestMatrix ($Current_Testpoint , 1)
Let $CurrentRunTurbine = $TestMatrix ($Current_Testpoint , 2)
Let $Desired_RPM = $CurrentRunTurbine
Let $CurrentRunType = $TestMatrix ($Current_Testpoint , 5)

'Set test name for multi-select testing
Select_Case $CurrentRunType
	Case = 1
		'Current Steps
		Let !Test = Current_Steps
	Case = 2
		'Current Sweeps
		Let !Test = Current_Sweep
	Case = 3
		'Pressure Steps
		Let !Test = Pressure_Step
	Case = 4
		'Pressure Sweeps
		Let !Test = Pressure_Sweep
	Case = 5
		'Pressure Bar-Graph
		Let !Test = Bar_Graph
	Case = 6
		'Pressure Response Test
		Let !Test = Pressure_Response
	' Case = 7
		' 'Line Pressure Gain Switching
		' Let !Test = Gain_Switch
		' Gosub Run_Gain_Sw
	Case = 8
		'Preset Pressure Steps
		Let !Test = Preset_Pressure_Step
	Case = 9
		'Multi-rate Triangle Wave
		Let !Test = Triangle_Wave
	Case = 10
		'Square Wave
		Let !Test = SquareWave
	Case = 11
		'Boost DOE
		Let !Test = BoostDOE
	Case = 12
		'Dual Boost
		Let !Test = DualBoost
	Case = 13
		'Custom Profile
		If $CP_ProfileType = 0
			Let !Test = CustomProfile_Pressure
		Else
			Let !Test = CustomProfile_Current
		End
	Case = 14
		'Transfer Function Development
		Let !Test = Transfer_Function
	Case = 15	
		'Stiction
		Let !Test = Stiction
	Case = 16
		'Balance Dam
		Let !Test = Balance_Dam
	Case = 17
		'Preset Current Steps
		Let !Test = Preset_Current_Steps	
End_Select

'Compare RunType in previous testpoint to current testpoint. Set test matrix for new RunType
Let $Multi_Select_RunType = $CurrentRunType
If $Current_Testpoint ~= 1
	Let $Previous_Testpoint = $Current_Testpoint - 1
	Let $PreviousRunType = $TestMatrix ($Previous_Testpoint , 5)
	If $CurrentRunType ~= $PreviousRunType
		Let $RunType = $CurrentRunType
		Gosub Multi_Select_Matrix_Setup
	End
End	

'Set additional test factors for current testpoint
Let $CurrentRunElement = $TestMatrix ($Current_Testpoint , 3)
Let $CurrentRunLine = $TestMatrix ($Current_Testpoint , 4)

'Log test factors
Log_Message (RunType is %%!Test%%.)
Log_Message (CurrentRunTemp is %%$CurrentRunTemp%%degC.)
Log_Message (CurrentRunTurbine is %%$CurrentRunTurbine%%rpm.)
Log_Message (CurrentRunElement is %%$CurrentRunElement%%rpm.)
Log_Message (CurrentRunLine is %%$CurrentRunLine%%rpm.)

'Set Dither Amplitude and Frequency
Gosub Apply_Dither_Settings

Select_Case $RunType
	Case = 1
		'Current Steps
		If $DitherType = 2
			Let $CurrentRunDitA = $TestMatrix ($Current_Testpoint , 6)
			Let $Dither_mA = $CurrentRunDitA * 1000
			Let $CurrentRunDitF = $TestMatrix ($Current_Testpoint , 7)
		End	
	Case = 2
		'Current Sweeps
		If $DitherType = 2
			Let $CurrentRunDitA = $TestMatrix ($Current_Testpoint , 6)
			Let $Dither_mA = $CurrentRunDitA * 1000
			Let $CurrentRunDitF = $TestMatrix ($Current_Testpoint , 7)
		End
	Case = 3
		'Pressure Steps
		If $DitherType = 2
			Let $CurrentRunDitA = $TestMatrix ($Current_Testpoint , 6)
			Let $Dither_mA = $CurrentRunDitA * 1000
			Let $CurrentRunDitF = $TestMatrix ($Current_Testpoint , 7)
		End		
	Case = 4
		'Pressure Sweeps
		If $DitherType = 2
			Let $CurrentRunDitA = $TestMatrix ($Current_Testpoint , 6)
			Let $Dither_mA = $CurrentRunDitA * 1000
			Let $CurrentRunDitF = $TestMatrix ($Current_Testpoint , 7)	
		End
	Case = 5
		'Bar Graph
		Let $CurrentRunOutputSpeed = $TestMatrix ($Current_Testpoint , 6)
		If $DitherType = 2
			Let $CurrentRunDitA = $TestMatrix ($Current_Testpoint , 7)
			Let $Dither_mA = $CurrentRunDitA * 1000
			Let $CurrentRunDitF = $TestMatrix ($Current_Testpoint , 8)
		End	
		Log_Message (CurrentRunOutputSpeed is %%$CurrentRunOutputSpeed%%rpm.)
	Case = 6
		'Pressure Response
		If $TCC_VFS_PR_On = 1
		'Set engine torque for Torque Converter Pressure Response
			Let $CurrentRunTorque = $TestMatrix ($Current_Testpoint , 6)
			If $DitherType = 2
				Let $CurrentRunDitA = $TestMatrix ($Current_Testpoint , 7)
				Let $Dither_mA = $CurrentRunDitA * 1000
				Let $CurrentRunDitF = $TestMatrix ($Current_Testpoint , 8)
			End
		Else
		'Non-TCC Pressure Response
			If $DitherType = 2
				Let $CurrentRunDitA = $TestMatrix ($Current_Testpoint , 6)
				Let $Dither_mA = $CurrentRunDitA * 1000
				Let $CurrentRunDitF = $TestMatrix ($Current_Testpoint , 7)
			End
		End
	Case = 7
		'Line Pressure Gain Switching
		If $DitherType = 2
			Let $CurrentRunDitA = $TestMatrix ($Current_Testpoint , 6)
			Let $Dither_mA = $CurrentRunDitA * 1000
			Let $CurrentRunDitF = $TestMatrix ($Current_Testpoint , 7)	
		End
	Case = 8
		'Preset Pressure Steps
		If $DitherType = 2
			Let $CurrentRunDitA = $TestMatrix ($Current_Testpoint , 6)
			Let $Dither_mA = $CurrentRunDitA * 1000
			Let $CurrentRunDitF = $TestMatrix ($Current_Testpoint , 7)	
		End
	Case = 9
		'Multi-rate Triangle Wave
		If $DitherType = 2
			Let $CurrentRunDitA = $TestMatrix ($Current_Testpoint , 6)
			Let $Dither_mA = $CurrentRunDitA * 1000
			Let $CurrentRunDitF = $TestMatrix ($Current_Testpoint , 7)
		End
	Case = 10
		'Square Wave
		If $DitherType = 2
			Let $CurrentRunDitA = $TestMatrix ($Current_Testpoint , 6)
			Let $Dither_mA = $CurrentRunDitA * 1000
			Let $CurrentRunDitF = $TestMatrix ($Current_Testpoint , 7)	
		End
	Case = 11
		'Boost DOE
		If $DitherType = 2
			Let $CurrentRunDitA = $TestMatrix ($Current_Testpoint , 6)
			Let $Dither_mA = $CurrentRunDitA * 1000
			Let $CurrentRunDitF = $TestMatrix ($Current_Testpoint , 7)
		End
	Case = 12
		'Dual Boost
		Let $CurrentRunGear = $TestMatrix ($Current_Testpoint , 3)
		Log_Message (CurrentRunKP is %%$CurrentRunKP%%.)
	Case = 13
		'Custom Profile
		If $DitherType = 2
			Let $CurrentRunDitA = $TestMatrix ($Current_Testpoint , 6)
			Let $Dither_mA = $CurrentRunDitA * 1000
			Let $CurrentRunDitF = $TestMatrix ($Current_Testpoint , 7)	
		End
	Case = 14
		'Transfer Function
		If $XferFunction_Type = 0
		'PID Gain Setting
			Let $CurrentRunKP = $TestMatrix ($Current_Testpoint , 6)
			Let $CurrentRunKI = $TestMatrix ($Current_Testpoint , 7)
			Let $CurrentRunKD = $TestMatrix ($Current_Testpoint , 8)
			Log_Message (CurrentRunKP is %%$CurrentRunKP%%.)
			Log_Message (CurrentRunKI is %%$CurrentRunKI%%.)
			Log_Message (CurrentRunKD is %%$CurrentRunKD%%.)
			If $DitherType = 2
				Let $CurrentRunDitA = $TestMatrix ($Current_Testpoint , 9)
				Let $Dither_mA = $CurrentRunDitA * 1000
				Let $CurrentRunDitF = $TestMatrix ($Current_Testpoint , 10)
			End
		Else
		'Transfer function temp comp 
			If $DitherType = 2
				Let $CurrentRunDitA = $TestMatrix ($Current_Testpoint , 6)
				Let $Dither_mA = $CurrentRunDitA * 1000
				Let $CurrentRunDitF = $TestMatrix ($Current_Testpoint , 7)
			End
		End	
	Case = 15
		'Stiction
		Let $CurrentRunTorque = $TestMatrix ($Current_Testpoint , 6)
		Log_Message (CurrentRunTorque is %%$CurrentRunTorque%%Nm.)
		If $DitherType = 2
			Let $CurrentRunDitA = $TestMatrix ($Current_Testpoint , 7)
			Let $Dither_mA = $CurrentRunDitA * 1000
			Let $CurrentRunDitF = $TestMatrix ($Current_Testpoint , 8)
		End
	Case = 16
		'Balance Dam
		If $DitherType = 2
			Let $CurrentRunDitA = $TestMatrix ($Current_Testpoint , 6)
			Let $Dither_mA = $CurrentRunDitA * 1000
			Let $CurrentRunDitF = $TestMatrix ($Current_Testpoint , 7)
		End
	Case = 17
		'Preset Current Steps
		If $DitherType = 2
			Let $CurrentRunDitA = $TestMatrix ($Current_Testpoint , 6)
			Let $Dither_mA = $CurrentRunDitA * 1000
			Let $CurrentRunDitF = $TestMatrix ($Current_Testpoint , 7)	
		End
End_Select

'Log Dither Amplitude and Frequency
Log_Message (CurrentRunDitA is %%$CurrentRunDitA%%amps.)
Log_Message (CurrentRunDitF is %%$CurrentRunDitF%%Hz.)

'Run TFT Check
Gosub Desired_TFT

'Set Dither Amplitude and Frequency tables for Dither testing
If $DitherType = 2
    Select_Case $CurrentRunElement
		Case = 1
			'Line Pressure
			Set_Function_Table TVPSC_IA_DTHR_LNP_A_M = $CurrentRunDitA
			Set_Function_Table TVPSC_FQ_DTHR_LNP_A_M = $CurrentRunDitF
		Case = 2
			'Clutch A
			Set_Function_Table TVPSC_IA_DTHR_CLC_01_A_M = $CurrentRunDitA
			Set_Function_Table TVPSC_FQ_DTHR_CLC_01_A_M = $CurrentRunDitF
		Case = 3
			'Clutch B
			Set_Function_Table TVPSC_IA_DTHR_CLC_02_A_M = $CurrentRunDitA
			Set_Function_Table TVPSC_FQ_DTHR_CLC_02_A_M = $CurrentRunDitF
		Case = 4
			'Clutch C
			Set_Function_Table TVPSC_IA_DTHR_CLC_03_A_M = $CurrentRunDitA
			Set_Function_Table TVPSC_FQ_DTHR_CLC_03_A_M = $CurrentRunDitF
		Case = 5
			'Clutch D
			Select_Case $Trans_Select 
				Case = 2
					'8F24	
					Set_Function_Table TVPSC_IA_DTHR_CLC_04_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_04_M = $CurrentRunDitF			
				Case = 3
					'10R140
					Set_Function_Table TVPSC_IA_DTHR_CLC_04_LO_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_04_LO_A_M = $CurrentRunDitF
					Set_Function_Table TVPSC_IA_DTHR_CLC_04_HI_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_04_HI_A_M = $CurrentRunDitF			
				Case = 4
					'8F57	
					Set_Function_Table TVPSC_IA_DTHR_CLC_04_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_04_M = $CurrentRunDitF		
				Case = 6
					'10R60/80
					Set_Function_Table TVPSC_IA_DTHR_CLC_04_LO_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_04_LO_A_M = $CurrentRunDitF
					Set_Function_Table TVPSC_IA_DTHR_CLC_04_HI_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_04_HI_A_M = $CurrentRunDitF
				Case = 7
					'8F35
					Set_Function_Table TVPSC_IA_DTHR_CLC_04_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_04_M = $CurrentRunDitF
				Case = 8
					'6R80
					Set_Function_Table TVPSC_IA_DTHR_CLC_04_LO_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_04_LO_A_M = $CurrentRunDitF
					Set_Function_Table TVPSC_IA_DTHR_CLC_04_HI_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_04_HI_A_M = $CurrentRunDitF	
			End_Select
		Case = 6
			'Clutch E
			Select_Case $Trans_Select 
				Case = 2
					'8F24
					Set_Function_Table TVPSC_IA_DTHR_CLC_05_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_05_A_M = $CurrentRunDitF
				Case = 3
					'10R140
					Set_Function_Table TVPSC_IA_DTHR_CLC_05_LO_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_05_LO_A_M = $CurrentRunDitF
					Set_Function_Table TVPSC_IA_DTHR_CLC_05_HI_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_05_HI_A_M = $CurrentRunDitF
				Case = 4
					'8F57
					Set_Function_Table TVPSC_IA_DTHR_CLC_05_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_05_A_M = $CurrentRunDitF
				Case = 6
				'10R60/80
					Set_Function_Table TVPSC_IA_DTHR_CLC_05_LO_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_05_LO_A_M = $CurrentRunDitF
					Set_Function_Table TVPSC_IA_DTHR_CLC_05_HI_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_05_HI_A_M = $CurrentRunDitF
				Case = 7
					'8F35
					Set_Function_Table TVPSC_IA_DTHR_CLC_05_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_05_A_M = $CurrentRunDitF
				Case = 8
					'6R80
					Set_Function_Table TVPSC_IA_DTHR_CLC_05_LO_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_05_LO_A_M = $CurrentRunDitF
					Set_Function_Table TVPSC_IA_DTHR_CLC_05_HI_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_05_HI_A_M = $CurrentRunDitF
			End_Select
		Case = 7
			'Clutch F
			Set_Function_Table TVPSC_IA_DTHR_CLC_06_A_M = $CurrentRunDitA
			Set_Function_Table TVPSC_FQ_DTHR_CLC_06_A_M = $CurrentRunDitF
		Case = 8
			'TCC
			Set_Function_Table TVPSC_IA_DTHR_TCC_A_M = $CurrentRunDitA
			Set_Function_Table TVPSC_FQ_DTHR_TCC_A_M = $CurrentRunDitF
			' Set TVPSC_MUL_TCC_GAIN_S (1.132,0)
			' Set TVPSC_P_TCC_OFS_S (-280,0)
	End_Select
	Set_Activate
End

'Set Clutch/ Solenoid name
Select_Case $CurrentRunElement
	Case = 1
		'Line Pressure
		Let !Element = LPC
		Let !Clutch_Name = LPC
	Case = 2
		'Clutch A
		Let !Element = VFS1
		Let !Clutch_Name = CLA
	Case = 3
		'Clutch B
		Let !Element = VFS2
		Let !Clutch_Name = CLB
	Case = 4
		'Clutch C
		Let !Element = VFS3
		Let !Clutch_Name = CLC
	Case = 5
		'Clutch D
		Let !Element = VFS4
		Let !Clutch_Name = CLD
	Case = 6
		'Clutch E
		Let !Element = VFS5
		Let !Clutch_Name = CLE
	Case = 7
		'Clutch F
		Let !Element = VFS6
		Let !Clutch_Name = CLF
	Case = 8
		'TCC
		Let !Element = TCC
		Let !Clutch_Name = TCC
End_Select

'Set gear name for Dual Boost test
Select_Case $CurrentRunGear
	Case = 1
		Let !Gear = First
	Case = 2
		Let !Gear = Second
	Case = 3
		Let !Gear = Third
	Case = 4
		Let !Gear = Fourth
	Case = 5
		Let !Gear = Fifth
	Case = 6
		Let !Gear = Sixth
	Case = 7
		Let !Gear = Seventh
	Case = 8
		Let !Gear = Eighth
	Case = 9
		Let !Gear = Ninth
	Case = 10
		Let !Gear = Tenth
End_Select

'Set Point_Running Flag if test shutdown occurs while testpoint is in progress
Let $Current_Point_Running = 1

'Check if engine is running. Start engine if not running
Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2
If $TCRPM_NE_BAR_AVE2 < 100
	If $Vehicle_Flag = 1
		'Prompt user to start engine in-vehicle
		Screen_Message (Yellow,Please start engine and press 'Resume Test' when ready)
		Pause
	Else
		'Automatically start engine for dyno
		Gosub Start_Engine
	End	
End 

'Set screen message while setting PRNDL position
Screen_Message (Green,%%New_Line%%Checking for proper PRNDL location.  Test will start momentarily)
Let $THMI_ST_PRND_DES = THMI_ST_PRND_DES

'Ensure brake is applied prior to any PRNDL movement
If $HIL_Flag = 1
	Set DynoBrake_Set (50,0)
End
If $PRNDL_Selection = 0
	'Neutral
	If $THMI_ST_PRND_DES ~= 3
		Let $Desired_PRNDL_Position = 2
		Gosub Set_PRNDL_Position
	End
Else
	'Overdrive
	If $PRNDL_Selection = 1
		If $THMI_ST_PRND_DES ~= 4
			If $HIL_Flag = 1
				Let $Desired_PRNDL_Position = 3
			Else	
				Let $Desired_PRNDL_Position = 4
			End	
			Gosub Set_PRNDL_Position
			Wait (5)
			'Release brake in HIL dyno
			If $HIL_Flag = 1
				Set DynoBrake_Set (0,0)
			End
		End
	End
End

'Navigate to test-specific subroutine
Select_Case $RunType
	Case = 1
		'Current Steps
		Gosub Run_Current_Step
	Case = 2
		'Current Sweeps
		Gosub Run_Current_Sweep
	Case = 3
		'Pressure Steps
		Gosub Run_Pressure_Step
	Case = 4
		'Pressure Sweeps
		Gosub Run_Pressure_Sweep
	Case = 5
		'Pressure Bar-Graph
		Gosub Run_Bar_Graph
	Case = 6
		'Pressure Response Test
		Gosub Run_Pressure_Response
	' Case = 7
		' 'Line Pressure Gain Switching
		' Let !Test = Gain_Switch
		' Gosub Run_Gain_Sw
	Case = 8
		'Preset Pressure Steps
		Gosub Run_PSet_Pressure_Step
	Case = 9
		'Multi-rate Triangle Wave
		Gosub Run_TriangleWave
	Case = 10
		'Square Wave
		Gosub Run_SquareWave
	Case = 11
		'Boost DOE
		Gosub Run_BoostDOE
	Case = 12
		'Dual Boost
		Gosub Run_DualBoost
	Case = 13
		'Custom Profile
		If $CP_ProfileType = 0
			'Custom Pressure Profile
			Gosub Run_CustomProfile_Pressure
		Else
			'Custom Current Profile
			Let !Test = CustomProfile_Current
			Gosub Run_CustomProfile_Current
		End
	Case = 14
		'Transfer Function Development
			Gosub Run_TransferFunction		
		'End
	Case = 15	
		'Stiction
		Gosub Run_Stiction
	Case = 16
		'Balance Dam
		Gosub Run_Balance_Dam
	Case = 17
		'Preset Current Steps
		Gosub Preset_Current_Steps		
End_Select

'Navigation point for failed testpoint
Failure_Return_Point:
If Point_Status (Testpoint) = Failed Then Goto Done_Point_Status:
Point_Status (Testpoint) = Done
Log_Message (	    Point Status = Done.)
Done_Point_Status:

'Record post-test temperatures
Let !Temp_Action = Post-Run_TFT
Gosub TFT_Data

'Reconcile testpoint in TFT matrix
Gosub Update_TFT_Setpoint_Count
'Send temperature data to Excel Run Summary
Gosub RunSummary

'Check post-test catalyst temperature before proceeding to next testpoint
If $Current_Testpoint < $Total_Testpoints
	If $Vehicle_Flag ~= 1
		Gosub Cat_Temp
	End	
End

'Turn off Point-Running Flag
Let $Current_Point_Running = 0

'Reset PCM parameters to base values
Select_Case $Trans_Select 
	Case = 2
		'8F24
		Gosub TRAM_Reset_8F
	Case = 3
		'10R140
		Gosub TRAM_Reset_10R	
	Case = 4
		'8F57
		Gosub TRAM_Reset_8F	
	Case = 6
		'10R60/80
		Gosub TRAM_Reset_10R
	Case = 7
		'8F35
	 	Gosub TRAM_Reset_8F
	Case = 8
		'6R80
	 	Gosub TRAM_Reset_6R
End_Select

'Reset TRAM_Set flag back to zero after PCM parameters have been reset to base values
Let $TRAM_Set = 0
Log_Message (TRAM_Set set to 0)

End_Sub

'*******************************************************
Sub Run_Current_Step
'*******************************************************
'This subroutine will increment the solenoid current
Log_Message (Running Run_Current_Step Subroutine)

'establish max current
Let $MaxCurrent = 1.1

'Reset error flags
Let $Current_Step_Up_Error_Flag = 0
Let $Current_Step_Down_Error_Flag = 0

'Set TRAM_Set flag to reset PCM parameters in case of test shutdown
Let $TRAM_Set = 1
Log_Message (TRAM_Set set to 1)

'Disable selectable one-way clutch
Set SAPRC_SW_SOWC_DSBL_S (1,0)

'Set Line Pressure 
If $CurrentRunElement = 1
	'Line Pressure Solenoid
	Set TVPSC_IA_CMD_TST_LNP_S ($MaxCurrent,0)
	Set TVPSC_D_OVRD_LNP_S (1,0)
Else
	'All other solenoids
	Set TVPSC_P_CMD_TST_LNP_S ($CurrentRunLine,0)
	Set TVPSC_D_OVRD_LNP_S (11,0)
End

'Zero test currents
Set TVPSC_IA_CMD_TST_CLC_01_S (0,0)
Set TVPSC_IA_CMD_TST_CLC_02_S (0,0)
Set TVPSC_IA_CMD_TST_CLC_03_S (0,0)
Set TVPSC_IA_CMD_TST_CLC_04_S (0,0)
Set TVPSC_IA_CMD_TST_CLC_05_S (0,0)
Set TVPSC_IA_CMD_TST_CLC_06_S (0,0)
Set TVPSC_IA_CMD_TST_TCC_S (0,0)

'Set Test Override codes
Set TVPSC_D_OVRD_CLC_01_S (1,0)
Set TVPSC_D_OVRD_CLC_02_S (1,0)
Set TVPSC_D_OVRD_CLC_03_S (1,0)
Select_Case $Trans_Select 
	Case = 3
		'10R140
		Set TVPSC_D_OVRD_CLC_04_S (1,0)
	Case = 6
		'10R80
		Set TVPSC_D_OVRD_CLC_04_S (1,0)
	Case = 8
		'6R80
		Set TVPSC_D_OVRD_CLC_04_S (1,0)
End_Select
Set TVPSC_D_OVRD_CLC_05_S (1,0)
Set TVPSC_D_OVRD_CLC_06_S (1,0)
Set TVPSC_D_OVRD_TCC_S (1,0)

'Set turbine speed for Torque Converter Clutch
If $CurrentRunElement = 8
	'Let $MaxCurrent = 0.8
	Let $MaxCurrent = 1.1
	If $CurrentRunTurbine < 1200
		Let $Desired_RPM = 1200
		Gosub Set_Engine_Speed
	End
End

'Set Engine Speed
Gosub Set_Engine_Speed
Wait (5)

'Turn on engine speed monitor
Monitor_On Engine_Running
Log_Message (Starting Engine_Running monitor. Run_Current_Step.)

'Disable OBDII
Set OBDII_TST_SW (0,0)

'Enable solenoid test mode
Set TVPSC_B_TST_ENBL_S (1,0)
Wait (2)

'Set File Name
If $DitherType = 2
	Let !File_Name = Dither_VFS_Current_Step_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (Dither_VFS_Current_Step_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)		
Else
	Let !File_Name = VFS_Current_Step_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (VFS_Current_Step_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)
End

'Start Vision Recorder
Gosub Record_Start

Wait (4)

'Log testpoint test factors
Log_Message (RunType is %%$RunType%%)
Log_Message (CurrentStepSize is %%$CurrentStepSize%%)
Log_Message (CurrentStepTime is %%$CurrentStepTime%%)
Log_Message (CurrentStepDirection is %%$CurrentStepDirection%%)
Log_Message (CurrentStepHold is %%$CurrentStepHold%%)
Log_Message (MaxCurrent is %%$MaxCurrent%%)
Log_Message (Current_Step_Cold_Temp_Time_Comp is %%$Current_Step_Cold_Temp_Time_Comp%%)

'Initialize Timer
Let $Elapsed_Current_Step_Up_Time = 0
Let $Current_Step_Up_Start_Time = Timer
Let $Current_Step_Up_Time_Limit = 300
Let $Num_Inc = 0


'Start Current Step Up Control Loop
Do
	'Establish maximum failsafe step-up time
	Let $Elapsed_Current_Step_Up_Time = Timer - $Current_Step_Up_Start_Time
	'Set error flag and exit loop if time limit is exceeded
	If $Elapsed_Current_Step_Up_Time > $Current_Step_Up_Time_Limit
		Let $Current_Step_Up_Error_Flag = 1
		Goto Done_CurrentStep_Up:
	End
	'Increment index
	Let $Num_Inc = $Num_Inc + 1
	'Set up current command for first increment
	If $Num_Inc = 1
		If $CurrentRunElement ~= 1
			'Normally Low solenoid
			Let $Current_Command = $CurrentStepSize
		Else
			'Normally High Line Pressure solenoid
			Let $Current_Command = $MaxCurrent - $CurrentStepSize
		End
		'Skip timers and current setting for first increment
		Goto First_Up:
	End
	'Establish exit criteria for normally low and normally high solenoids
	If $CurrentRunElement ~= 1
		'All other solenoids
		If $Current_Command >= $MaxCurrent Then Goto Done_CurrentStep_Up:
	Else
		If $Trans_Select = 2
			'8F24
			If $Current_Command <= 0.2 Then Goto Done_CurrentStep_Up:
		End	
		'Do not allow negative current command
		If $Current_Command <= 0 Then Goto Done_CurrentStep_Up:
	End
	'Wait step time
	'Increase step time for low temperature clutch fill
	If $Current_Step_Cold_Temp_Time_Comp = 1
		If $Current_Command <= 0.35
			Let $Calculated_StepTime = $CurrentStepTime * 1.5
		Else
			Let $Calculated_StepTime = $CurrentStepTime
		End
	Else
		Let $Calculated_StepTime = $CurrentStepTime
	End	
	Wait ($Calculated_StepTime)
	Log_Message (Waiting %%$Calculated_StepTime%% seconds.)
	'Set current setpoint value for normally low and normally high solenoid
	Let $Current_Dummy = $Num_Inc * $CurrentStepSize
	If $CurrentRunElement ~= 1
		'All other solenoids
		Let $Current_Command = $Current_Dummy
    Else
		'Line Pressure
		Let $Current_Command = $MaxCurrent - $Current_Dummy
    End
	If $Current_Command > $MaxCurrent
	    Let $Current_Command = $MaxCurrent
	End
	First_Up:
	'Set test function to current setpoint 
	Select_Case $CurrentRunElement
	    Case = 1
			'Line Pressure
	         Set TVPSC_IA_CMD_TST_LNP_S ($Current_Command,0)
	    Case = 2
			'Clutch A
	         Set TVPSC_IA_CMD_TST_CLC_01_S ($Current_Command,0)
	    Case = 3
			'Clutch B
			Set TVPSC_IA_CMD_TST_CLC_02_S ($Current_Command,0)
	    Case = 4
			'Clutch C
            Set TVPSC_IA_CMD_TST_CLC_03_S ($Current_Command,0)
	    Case = 5
			'Clutch D
			Set TVPSC_IA_CMD_TST_CLC_04_S ($Current_Command,0)
	    Case = 6
			'Clutch E
	         Set TVPSC_IA_CMD_TST_CLC_05_S ($Current_Command,0)
	    Case = 7
			'Clutch F
			Set TVPSC_IA_CMD_TST_CLC_06_S ($Current_Command,0)
	    Case = 8
			'TCC
			Set TVPSC_IA_CMD_TST_TCC_S ($Current_Command,0)
	End_Select
	'Log step information
	Log_Message (Current Step Up %%!Element%% Current to %%$Current_Command,4D%% amps. Num_Inc is %%$Num_Inc%%.)
	Screen_Message (Green,%%New_Line%%Setting %%!Element%% Current to %%$Current_Command,4D%% amps.)
Loop

Done_CurrentStep_Up:

'Terminate test if step-up times out
If $Current_Step_Up_Error_Flag = 1
	Log_Message (Current Step Up, run %%$Current_Testpoint%%, took longer than 300 seconds to reach maximum current.)
	Log_Message (******************************************************)
	Log_Message (Terminating test.)
	Log_Message (******************************************************)
	Let !Text_Message = "Current Step Up, run %%$Current_Testpoint%%, took longer than 300 seconds to reach maximum current.  Terminating test. Point %%$Current_Testpoint%% of %%$Total_Testpoints%%."
	Gosub Send_Text_Message
	Gosub Terminate_Test
End

'Reset Index for current hold
Let $Num_Inc = 1
Log_Message (Current Step Up completed.)

'Initialize hold timer
Let $Current_Step_Hold_Start_Time = Timer
Let $Current_Step_Elapsed_Hold_Time = 0

'Run current hold control loop
Do
	Let $Current_Step_Elapsed_Hold_Time = Timer - $Current_Step_Hold_Start_Time
	If $Current_Step_Elapsed_Hold_Time > $CurrentStepHold Then Goto Done_Hold:
	Screen_Message (Green, %%New_Line%%Holding Current.)
Loop
Done_Hold:

If $CurrentStepDirection ~= 1
	Goto Done_CurrentStep_Down:
End

'Initialize step-down timer
Let $Current_Step_Down_Start_Time = Timer
Let $Elapsed_Current_Step_Down_Time = 0
Let $Current_Step_Down_Time_Limit = 300

Let $Num_Inc = 0


'Start Control loop for step-down
Do
	'Update timer
	Let $Elapsed_Current_Step_Down_Time = Timer - $Current_Step_Down_Start_Time
	'Establish maximum failsafe time for step-down
	If $Elapsed_Current_Step_Down_Time > $Current_Step_Down_Time_Limit
		Let $Current_Step_Down_Error_Flag = 1
		Goto Done_CurrentStep_Down:
	End
	'Increment index
	Let $Num_Inc = $Num_Inc + 1
	'Set current command for first increment
	If $Num_Inc = 1
		If $CurrentRunElement ~= 1
			Let $Current_Command = $MaxCurrent - $CurrentStepSize
		Else
			Let $Current_Command = $CurrentStepSize
		End
		'Skip to current setting for first increment
		Goto First_Down:
	End
	'Exit criteria for normally low and normally high solenoids
	If $CurrentRunElement ~= 1
		If $Current_Command <= 0 Then Goto Done_CurrentStep_Down:
	Else
		If $Current_Command >= $MaxCurrent Then Goto Done_CurrentStep_Down:
	End
	'Calculate and apply wait time
	'Increase step time for low temperature clutch fill
	If $Current_Step_Cold_Temp_Time_Comp = 1
		If $Current_Command <= 0.35
			Let $Calculated_StepTime = $CurrentStepTime * 1.5
		Else
			Let $Calculated_StepTime = $CurrentStepTime
		End
	Else
		Let $Calculated_StepTime = $CurrentStepTime
	End	
	Wait ($Calculated_StepTime)
	Log_Message (Waiting %%$Calculated_StepTime%% seconds.)
	'Calculate current setpoint for normally low and normally high solenoid
	Let $Current_Dummy = $Num_Inc * $CurrentStepSize
	If $CurrentRunElement ~= 1
		Let $Current_Command = $MaxCurrent - $Current_Dummy
	Else
		Let $Current_Command = $Current_Dummy
	End
	'Do not allow negative current command
	If $Current_Command < 0
		Let $Current_Command = 0
	End
	First_Down:
	'Set test function to current setpoint
	Select_Case $CurrentRunElement
		Case = 1
			'Line Pressure
			Set TVPSC_IA_CMD_TST_LNP_S ($Current_Command,0)
		Case = 2
			'Clutch A
			Set TVPSC_IA_CMD_TST_CLC_01_S ($Current_Command,0)
		Case = 3
			'Clutch B
			Set TVPSC_IA_CMD_TST_CLC_02_S ($Current_Command,0)
		Case = 4
			'Clutch C
			Set TVPSC_IA_CMD_TST_CLC_03_S ($Current_Command,0)
		Case = 5
			'Clutch D
			Set TVPSC_IA_CMD_TST_CLC_04_S ($Current_Command,0)
		Case = 6
			'Clutch E
			Set TVPSC_IA_CMD_TST_CLC_05_S ($Current_Command,0)
		Case = 7
			'Clutch F
			Set TVPSC_IA_CMD_TST_CLC_06_S ($Current_Command,0)
		Case = 8
			'TCC
			Set TVPSC_IA_CMD_TST_TCC_S ($Current_Command,0)
	End_Select
	'Log current step information
	Log_Message (Current Step Down %%!Element%% Current to %%$Current_Command,4D%% amps. Num_Inc is %%$Num_Inc%%.)
	Screen_Message (Green,%%New_Line%%Setting %%!Element%% Current to %%$Current_Command,4D%% amps.)
Loop

Done_CurrentStep_Down:

'Log completion of Step-Down
If $CurrentStepDirection = 1
	Log_Message (Current Step Down completed.)	
End

'Terminate test if failsafe timer exceeded
If $Current_Step_Down_Error_Flag = 1
	Log_Message (Current Sweep down took longer than 300 seconds to reach minimum current.  Terminating test.)
	Let !Text_Message = "Current Sweep Down, run %%$Current_Testpoint%%, took longer than 300 seconds to reach maximum current. Point %%$Current_Testpoint%% of %%$Total_Testpoints%%."
	Log_Message (******************************************************)
	Log_Message (Terminating test.)
	Log_Message (******************************************************)
	Let $Error_Code = 3
	Gosub Send_Text_Message
	Gosub Terminate_Test
End

Wait (2)
'End Recorder
Gosub Record_End

'Disable solenoid test mode
Set TVPSC_B_TST_ENBL_S (0,0)

'Stop engine speed monitor
Monitor_Off Engine_Running
Log_Message (Stopping Engine_Running monitor. Run_Current_Step.)

'End of Run_Current subroutine
End_Sub

'*******************************************************
Sub Run_Current_Sweep
'*******************************************************
'This subroutine will increment the solenoid pressure steps
Log_Message (Starting Run_Current_Sweep Subroutine)

'Establish maximum current for current sweep
Let $MaxCurrent = 1.1

'Log test factors for current sweep
Log_Message (RunType is %%$RunType%%)
Log_Message (CurrentSweepTime is %%$CurrentSweepTime%%)
Log_Message (CurrentSweepDirection is %%$CurrentSweepDirection%%)
Log_Message (CurrentSweepHold is %%$CurrentSweepHold%%)
Log_Message (MaxCurrent is %%$MaxCurrent%%)

'Calculate Sweep Time
If $CurrentSweepDirection = 1
'Up and Down Sweep Time
   Let $DownRampStartTime = $CurrentSweepTime + $CurrentSweepHold
   Let $DownRampEndTime = $DownRampStartTime + $CurrentSweepTime
   Let $DownRampStartCurrent = $MaxCurrent
Else
'Up Only Sweep Time
   Let $DownRampStartTime = $CurrentSweepTime
   Let $DownRampEndTime = $DownRampStartTime
   Let $DownRampStartCurrent = 0
End

'Convert Sweep time from seconds to milliseconds
Let $CurrentSweepTime_MS = $CurrentSweepTime * 1000
Let $DownRampStartTime_MS = $DownRampStartTime * 1000
Let $DownRampEndTime_MS = $DownRampEndTime * 1000

'Set Line Pressure for all solenoids except Line Pressure Solenoid
If $CurrentRunElement = 1
	'Line Pressure Solenoid
   Set TVPSC_IA_CMD_TST_LNP_S ($MaxCurrent,0)
   Set TVPSC_D_OVRD_LNP_S (1,0)
Else
	'All other solenoids
   Set TVPSC_P_CMD_TST_LNP_S ($CurrentRunLine,0)
   Set TVPSC_D_OVRD_LNP_S (11,0)
End

'Zero solenoid test functions
Set TVPSC_IA_CMD_TST_CLC_01_S (0,0)
Set TVPSC_IA_CMD_TST_CLC_02_S (0,0)
Set TVPSC_IA_CMD_TST_CLC_03_S (0,0)
Set TVPSC_IA_CMD_TST_CLC_04_S (0,0)
Set TVPSC_IA_CMD_TST_CLC_05_S (0,0)
Set TVPSC_IA_CMD_TST_CLC_06_S (0,0)

'Set solenoid test override codes
Set TVPSC_IA_CMD_TST_TCC_S (0,0)
Set TVPSC_D_OVRD_CLC_01_S (1,0)
Set TVPSC_D_OVRD_CLC_02_S (1,0)
Set TVPSC_D_OVRD_CLC_03_S (1,0)
Set TVPSC_D_OVRD_CLC_04_S (1,0)
Set TVPSC_D_OVRD_CLC_05_S (1,0)
Set TVPSC_D_OVRD_CLC_06_S (1,0)
Set TVPSC_D_OVRD_TCC_S (1,0)

'Calculate test profile timestamp values
Let $Profile_Timestamp_10 = $DownRampEndTime_MS + 10
Let $Profile_Timestamp_20 = $DownRampEndTime_MS + 20
Let $Profile_Timestamp_30 = $DownRampEndTime_MS + 30
Let $Profile_Timestamp_40 = $DownRampEndTime_MS + 40
Let $Profile_Timestamp_50 = $DownRampEndTime_MS + 50
Let $Profile_Timestamp_60 = $DownRampEndTime_MS + 60
Let $Profile_Timestamp_70 = $DownRampEndTime_MS + 70
Let $Profile_Timestamp_80 = $DownRampEndTime_MS + 80
Let $Profile_Timestamp_90 = $DownRampEndTime_MS + 90
Let $Profile_Timestamp_100 = $DownRampEndTime_MS + 100
Let $Profile_Timestamp_110 = $DownRampEndTime_MS + 110
Let $Profile_Timestamp_120 = $DownRampEndTime_MS + 120

'Set solenoid test profile timestamp normalizer and current setpoint values
Select_Case $CurrentRunElement
	Case = 1
		'Line Pressure
		Set TVPSC_D_OVRD_LNP_S (2,0)
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,0) = 0
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,1) = $CurrentSweepTime_MS
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,2) = $DownRampStartTime_MS
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,3) = $DownRampEndTime_MS
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,4) = $Profile_Timestamp_10
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,5) = $Profile_Timestamp_20
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,6) = $Profile_Timestamp_30
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,7) = $Profile_Timestamp_40
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,8) = $Profile_Timestamp_50
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,9) = $Profile_Timestamp_60
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,10) = $Profile_Timestamp_70
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,11) = $Profile_Timestamp_80
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,12) = $Profile_Timestamp_90
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,13) = $Profile_Timestamp_100
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,14) = $Profile_Timestamp_110
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,15) = $Profile_Timestamp_120

		Set_Function_Table TVPSC_IA_TST_LNP_T (1,0) = 0
		Set_Function_Table TVPSC_IA_TST_LNP_T (1,1) = $MaxCurrent
		Set_Function_Table TVPSC_IA_TST_LNP_T (1,2) = $DownRampStartCurrent
		Set_Function_Table TVPSC_IA_TST_LNP_T (1,3) = 0
		Set_Activate
	Case = 2
		'Clutch A
		Set TVPSC_D_OVRD_CLC_01_S (2,0)
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,0) = 0
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,1) = $CurrentSweepTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,2) = $DownRampStartTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,3) = $DownRampEndTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,4) = $Profile_Timestamp_10
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,5) = $Profile_Timestamp_20
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,6) = $Profile_Timestamp_30
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,7) = $Profile_Timestamp_40
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,8) = $Profile_Timestamp_50
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,9) = $Profile_Timestamp_60
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,10) = $Profile_Timestamp_70
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,11) = $Profile_Timestamp_80
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,12) = $Profile_Timestamp_90
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,13) = $Profile_Timestamp_100
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,14) = $Profile_Timestamp_110
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,15) = $Profile_Timestamp_120

		Set_Function_Table TVPSC_IA_TST_CLC_01_T (1,0) = 0
		Set_Function_Table TVPSC_IA_TST_CLC_01_T (1,1) = $MaxCurrent
		Set_Function_Table TVPSC_IA_TST_CLC_01_T (1,2) = $DownRampStartCurrent
		Set_Function_Table TVPSC_IA_TST_CLC_01_T (1,3) = 0
		Set_Activate
	Case = 3
		'Clutch B
		Set TVPSC_D_OVRD_CLC_02_S (2,0)
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,0) = 0
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,1) = $CurrentSweepTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,2) = $DownRampStartTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,3) = $DownRampEndTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,4) = $Profile_Timestamp_10
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,5) = $Profile_Timestamp_20
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,6) = $Profile_Timestamp_30
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,7) = $Profile_Timestamp_40
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,8) = $Profile_Timestamp_50
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,9) = $Profile_Timestamp_60
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,10) = $Profile_Timestamp_70
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,11) = $Profile_Timestamp_80
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,12) = $Profile_Timestamp_90
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,13) = $Profile_Timestamp_100
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,14) = $Profile_Timestamp_110
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,15) = $Profile_Timestamp_120

		Set_Function_Table TVPSC_IA_TST_CLC_02_T (1,0) = 0
		Set_Function_Table TVPSC_IA_TST_CLC_02_T (1,1) = $MaxCurrent
		Set_Function_Table TVPSC_IA_TST_CLC_02_T (1,2) = $DownRampStartCurrent
		Set_Function_Table TVPSC_IA_TST_CLC_02_T (1,3) = 0
		Set_Activate
	Case = 4
		'Clutch C
		Set TVPSC_D_OVRD_CLC_03_S (2,0)
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,0) = 0
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,1) = $CurrentSweepTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,2) = $DownRampStartTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,3) = $DownRampEndTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,4) = $Profile_Timestamp_10
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,5) = $Profile_Timestamp_20
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,6) = $Profile_Timestamp_30
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,7) = $Profile_Timestamp_40
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,8) = $Profile_Timestamp_50
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,9) = $Profile_Timestamp_60
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,10) = $Profile_Timestamp_70
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,11) = $Profile_Timestamp_80
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,12) = $Profile_Timestamp_90
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,13) = $Profile_Timestamp_100
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,14) = $Profile_Timestamp_110
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,15) = $Profile_Timestamp_120

		Set_Function_Table TVPSC_IA_TST_CLC_03_T (1,0) = 0
		Set_Function_Table TVPSC_IA_TST_CLC_03_T (1,1) = $MaxCurrent
		Set_Function_Table TVPSC_IA_TST_CLC_03_T (1,2) = $DownRampStartCurrent
		Set_Function_Table TVPSC_IA_TST_CLC_03_T (1,3) = 0
		Set_Activate
	Case = 5
		'Clutch D
		Set TVPSC_D_OVRD_CLC_04_S (2,0)
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,0) = 0
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,1) = $CurrentSweepTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,2) = $DownRampStartTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,3) = $DownRampEndTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,4) = $Profile_Timestamp_10
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,5) = $Profile_Timestamp_20
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,6) = $Profile_Timestamp_30
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,7) = $Profile_Timestamp_40
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,8) = $Profile_Timestamp_50
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,9) = $Profile_Timestamp_60
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,10) = $Profile_Timestamp_70
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,11) = $Profile_Timestamp_80
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,12) = $Profile_Timestamp_90
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,13) = $Profile_Timestamp_100
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,14) = $Profile_Timestamp_110
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,15) = $Profile_Timestamp_120

		Set_Function_Table TVPSC_IA_TST_CLC_04_T (1,0) = 0
		Set_Function_Table TVPSC_IA_TST_CLC_04_T (1,1) = $MaxCurrent
		Set_Function_Table TVPSC_IA_TST_CLC_04_T (1,2) = $DownRampStartCurrent
		Set_Function_Table TVPSC_IA_TST_CLC_04_T (1,3) = 0
		Set_Activate
	Case = 6
		'Clutch E
		Set TVPSC_D_OVRD_CLC_05_S (2,0)
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,0) = 0
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,1) = $CurrentSweepTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,2) = $DownRampStartTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,3) = $DownRampEndTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,4) = $Profile_Timestamp_10
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,5) = $Profile_Timestamp_20
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,6) = $Profile_Timestamp_30
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,7) = $Profile_Timestamp_40
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,8) = $Profile_Timestamp_50
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,9) = $Profile_Timestamp_60
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,10) = $Profile_Timestamp_70
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,11) = $Profile_Timestamp_80
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,12) = $Profile_Timestamp_90
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,13) = $Profile_Timestamp_100
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,14) = $Profile_Timestamp_110
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,15) = $Profile_Timestamp_120

		Set_Function_Table TVPSC_IA_TST_CLC_05_T (1,0) = 0
		Set_Function_Table TVPSC_IA_TST_CLC_05_T (1,1) = $MaxCurrent
		Set_Function_Table TVPSC_IA_TST_CLC_05_T (1,2) = $DownRampStartCurrent
		Set_Function_Table TVPSC_IA_TST_CLC_05_T (1,3) = 0
		Set_Activate
	Case = 7
		'Clutch F
		Set TVPSC_D_OVRD_CLC_06_S (2,0)
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,0) = 0
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,1) = $CurrentSweepTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,2) = $DownRampStartTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,3) = $DownRampEndTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,4) = $Profile_Timestamp_10
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,5) = $Profile_Timestamp_20
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,6) = $Profile_Timestamp_30
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,7) = $Profile_Timestamp_40
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,8) = $Profile_Timestamp_50
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,9) = $Profile_Timestamp_60
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,10) = $Profile_Timestamp_70
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,11) = $Profile_Timestamp_80
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,12) = $Profile_Timestamp_90
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,13) = $Profile_Timestamp_100
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,14) = $Profile_Timestamp_110
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,15) = $Profile_Timestamp_120

		Set_Function_Table TVPSC_IA_TST_CLC_06_T (1,0) = 0
		Set_Function_Table TVPSC_IA_TST_CLC_06_T (1,1) = $MaxCurrent
		Set_Function_Table TVPSC_IA_TST_CLC_06_T (1,2) = $DownRampStartCurrent
		Set_Function_Table TVPSC_IA_TST_CLC_06_T (1,3) = 0
		Set_Activate
	Case = 8
		'TCC
		Set TVPSC_D_OVRD_TCC_S (2,0)
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,0) = 0
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,1) = $CurrentSweepTime_MS
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,2) = $DownRampStartTime_MS
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,3) = $DownRampEndTime_MS
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,4) = $Profile_Timestamp_10
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,5) = $Profile_Timestamp_20
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,6) = $Profile_Timestamp_30
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,7) = $Profile_Timestamp_40
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,8) = $Profile_Timestamp_50
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,9) = $Profile_Timestamp_60
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,10) = $Profile_Timestamp_70
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,11) = $Profile_Timestamp_80
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,12) = $Profile_Timestamp_90
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,13) = $Profile_Timestamp_100
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,14) = $Profile_Timestamp_110
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,15) = $Profile_Timestamp_120

		Set_Function_Table TVPSC_IA_TST_TCC_T (1,0) = 0
		Set_Function_Table TVPSC_IA_TST_TCC_T (1,1) = $MaxCurrent
		Set_Function_Table TVPSC_IA_TST_TCC_T (1,2) = $DownRampStartCurrent
		Set_Function_Table TVPSC_IA_TST_TCC_T (1,3) = 0
		Set_Activate
		If $CurrentRunTurbine < 1200
			Let $Desired_RPM = 1200
			Gosub Set_Engine_Speed
		End
End_Select

'Check engine speed. Start engine if not running
Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2
If $TCRPM_NE_BAR_AVE2 < 100
	If $Vehicle_Flag = 1
		'Prompt driver to start engine in-vehicle
		Screen_Message (Yellow,Please start engine and press 'Resume Test' when ready)
		Pause
	Else
		'Start engine in dynos
		Gosub Start_Engine
	End	
End 

'Set Engine Speed
Gosub Set_Engine_Speed
Wait (5)

'Start engine speed monitor
Monitor_On Engine_Running
Log_Message (Starting Engine_Running monitor. Run_Current_Sweep.)

'Set TRAM_set variable to reset PCM parameters in case of test shutdown 
Let $TRAM_Set = 1
Log_Message (TRAM_Set set to 1)

'Disable OBDII
Set OBDII_TST_SW (0,0)

'Enable solenoid test mode
Set TVPSC_B_TST_ENBL_S (1,0)

Wait (2)

'Set Filename
If $DitherType = 2
	Let !File_Name = Dither_VFS_Current_Sweep_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (Dither_VFS_Current_Sweep_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)
Else
	Let !File_Name = VFS_Current_Sweep_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (VFS_Current_Sweep_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)		
End

'Start Recorder
Gosub Record_Start
Wait (4)

'Start Test-Mode profile
Set TVPSC_B_TST_STRT_ALL_S (1,0)

'Set wait time
Wait ($DownRampEndTime)
Wait (2)

'End Recorder
Gosub Record_End

'Reset Engine Speed
Gosub Reset_Engine_Speed

'Shift PRNDL to Neutral
Let $THMI_ST_PRND_DES = THMI_ST_PRND_DES
If $THMI_ST_PRND_DES ~= 3
	Let $Desired_PRNDL_Position = 2
	Gosub Set_PRNDL_Position
End

'Disable test mode and reset start switch
Set TVPSC_B_TST_ENBL_S (0,0)
Set TVPSC_B_TST_STRT_ALL_S (0,0)

End_Sub
'*******************************************************
Sub Run_Pressure_Step
'*******************************************************
'This subroutine will increment the solenoid pressure steps
Log_Message (Starting Run_Pressure_Step Subroutine)

'Use single subroutine for setting max pressure
Gosub Max_Pressure_Finder

'Log Pressure Step test factors
Log_Message (RunType is %%$RunType%%)
Log_Message (PStepTime is %%$PStepTime%%)
Log_Message (PStepSize is %%$PStepSize%%)
Log_Message (PStepDirection is %%$PStepDirection%%)
Log_Message (PStepHold is %%$PStepHold%%)
Log_Message (PStepHoldClutch is %%$PStepHoldClutch%%)
Log_Message (PStepTCC_On is %%$PStepTCC_On%%)
Log_Message (MaxPressure is %%$MaxPressure%%)
Log_Message (Pressure_Step_Cold_Temp_Time_Comp is %%$Pressure_Step_Cold_Temp_Time_Comp%%)

'Calculate number of setpoints
Let $Max_Press_Cmd = $MaxPressure
Let $First_Press = $PStepSize
Let $Pressure_Range = $Max_Press_Cmd - $First_Press
Let $Number_Press_Setpoints = $Pressure_Range / $PStepSize
Let $Number_Press_Setpoints = $Number_Press_Setpoints + 1
Let $Number_Press_Setpoints_Int = Int ($Number_Press_Setpoints)
Let $Number_Press_Delta = $Number_Press_Setpoints - $Number_Press_Setpoints_Int
If $Number_Press_Delta > 0
	Let $Number_Press_Setpoints = $Number_Press_Setpoints_Int + 1
Else
	Let $Number_Press_Setpoints = $Number_Press_Setpoints_Int
End
Log_Message (Number of Pressure setpoints for run %%$CurrentTestpoint%% is %%$Number_Press_Setpoints%%.)

'Set Line Pressure Clip 
If $CurrentRunLine < 1300
   Set_Function_Table SAPRC_P_LNP_GR_TYP_MIN_V = 200
   Set_Activate
Else
   Set_Function_Table SAPRC_P_LNP_GR_TYP_MIN_V = 1400
   Set_Activate
End

'Check engine speed and start engine if not running
Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2
If $TCRPM_NE_BAR_AVE2 < 100
	If $Vehicle_Flag = 1
	'Prompt Driver to start engine
		Screen_Message (Yellow,Please start engine and press 'Resume Test' when ready)
		Pause
	Else	
	'For dynos, start engine automatically
		Gosub Start_Engine
	End	
End 

'Set Engine Speed
Gosub Set_Engine_Speed
Wait (5)

'Start engine speed monitor
Monitor_On Engine_Running
Log_Message (Starting Engine_Running monitor. Run_Pressure_Step.)

'Set TRAM_Set flag to reset PCM parameters in case of test shutdown
Let $TRAM_Set = 1
Log_Message (TRAM_Set set to 1)

'Disable OBDII
Set OBDII_TST_SW (0,0)

'Enable Test Mode
Set TVPSC_B_TST_ENBL_S (1,0)

Wait (2)

'Set Line Pressure for all solenoids except Line Pressure Solenoid
If $CurrentRunElement ~= 1
	Set TVPSC_P_CMD_TST_LNP_S ($CurrentRunLine,0)
Else
	Set TVPSC_P_CMD_TST_LNP_S (0,0)      
End

'Zero Pressure Command Functions
Set TVPSC_P_CMD_TST_CLC_01_S (0,0)
Set TVPSC_P_CMD_TST_CLC_02_S (0,0)
Set TVPSC_P_CMD_TST_CLC_03_S (0,0)
Set TVPSC_P_CMD_TST_CLC_04_S (0,0)
Set TVPSC_P_CMD_TST_CLC_05_S (0,0)
Set TVPSC_P_CMD_TST_CLC_06_S (0,0)
Set TVPSC_P_CMD_TST_TCC_S (0,0)

'Set test override codes to oncoming constant pressure
Set TVPSC_D_OVRD_LNP_S (11,0)
Set TVPSC_D_OVRD_CLC_01_S (21,0)
Set TVPSC_D_OVRD_CLC_02_S (21,0)
Set TVPSC_D_OVRD_CLC_03_S (21,0)
Set TVPSC_D_OVRD_CLC_04_S (21,0)
Set TVPSC_D_OVRD_CLC_05_S (21,0)
Set TVPSC_D_OVRD_CLC_06_S (21,0)
Set TVPSC_D_OVRD_TCC_S (11,0)

'Set High Gain pressure override switch
Select_Case $Trans_Select 
	Case = 3
		'10R140
		If $CurrentRunLine >= 1200
			Set TVPSC_D_OVRD_CLC_04_S (41,0)
			Set TVPSC_D_OVRD_CLC_05_S (41,0)
		End	
	Case = 6
		'10R80
		If $CurrentRunLine >= 1200
			Set TVPSC_D_OVRD_CLC_04_S (41,0)
			Set TVPSC_D_OVRD_CLC_05_S (41,0)
		End	
	Case = 8
		'6R80
		If $CurrentRunLine >= 1200
			Set TVPSC_D_OVRD_CLC_04_S (41,0)
			Set TVPSC_D_OVRD_CLC_05_S (41,0)
		End			
End_Select

'Apply Line Pressure to holding clutches if enabled
If $PStepHoldClutch = 1
   	Select_Case $Trans_Select 
		Case = 2
			'8F24
			Select_Case $CurrentRunElement
				Case = 2
					'Clutch A
				
				Case = 3
					'Clutch B
					Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)				
				Case = 4
					'Clutch C
					Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
				Case = 5
					'Clutch D

				Case = 6
					'Clutch E
					Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)				
				Case = 7
					'Clutch F
					Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
			End_Select
		Case = 3
			'10R140   
			Select_Case $CurrentRunElement
				Case = 2
					'Clutch A
					'Old 3 Clutch Neutral
					Set TVPSC_P_CMD_TST_CLC_04_S ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($CurrentRunLine,0)				
				Case = 3
					'Clutch B
					'Old 3 Clutch Neutral
					Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_06_S ($CurrentRunLine,0)				
				Case = 4
					'Clutch C
					Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_02_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_06_S  ($CurrentRunLine,0)
				Case = 5
					'Clutch D
					 Set RMSC_D_GR_TYP_SW_S (1,0)
					 Set RMSC_GR_TYP_CMD_S (3,0)
					'Old 3 Clutch Neutral
					Set TVPSC_P_CMD_TST_CLC_02_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_03_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_05_S  ($CurrentRunLine,0)
				Case = 6
					'Clutch E
					 Set RMSC_D_GR_TYP_SW_S (1,0)
					 Set RMSC_GR_TYP_CMD_S (3,0)
					'Old 3 Clutch Neutral
					Set TVPSC_P_CMD_TST_CLC_02_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_03_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_04_S  ($CurrentRunLine,0)				
				Case = 7
					'Clutch F
					Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_02_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_03_S  ($CurrentRunLine,0)
			End_Select	
		Case = 4
			'8F57
			Select_Case $CurrentRunElement
				Case = 2
					'Clutch A
				
				Case = 3
					'Clutch B
					Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)				
				Case = 4
					'Clutch C
					Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
				Case = 5
					'Clutch D

				Case = 6
					'Clutch E
					Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)				
				Case = 7
					'Clutch F
					Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
			End_Select
		Case = 6
			'10R60/80   
			Select_Case $CurrentRunElement
				Case = 2
					'Clutch A
					'Old 3 Clutch Neutral
					Set TVPSC_P_CMD_TST_CLC_04_S ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($CurrentRunLine,0)				
				Case = 3
					'Clutch B
					'Old 3 Clutch Neutral
					Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_06_S ($CurrentRunLine,0)				
				Case = 4
					'Clutch C
					Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_02_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_06_S  ($CurrentRunLine,0)
				Case = 5
					'Clutch D
					 Set RMSC_D_GR_TYP_SW_S (1,0)
					 Set RMSC_GR_TYP_CMD_S (3,0)
					'Old 3 Clutch Neutral
					Set TVPSC_P_CMD_TST_CLC_02_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_03_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_05_S  ($CurrentRunLine,0)
				Case = 6
					'Clutch E
					 Set RMSC_D_GR_TYP_SW_S (1,0)
					 Set RMSC_GR_TYP_CMD_S (3,0)
					'Old 3 Clutch Neutral
					Set TVPSC_P_CMD_TST_CLC_02_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_03_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_04_S  ($CurrentRunLine,0)				
				Case = 7
					'Clutch F
					Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_02_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_03_S  ($CurrentRunLine,0)
			End_Select
		Case = 7
			'8F35
			Select_Case $CurrentRunElement
				Case = 1
					'Line Pressure
					Set TVPSC_P_CMD_TST_LNP_S ($CurrentRunLine,0)
				Case = 2
					'Clutch A
					Set TVPSC_P_CMD_TST_CLC_03_S ($CurrentRunLine,0)
				Case = 3
					'Clutch B
					Set TVPSC_P_CMD_TST_CLC_05_S ($CurrentRunLine,0)
				Case = 4
					'Clutch C
					Set TVPSC_P_CMD_TST_CLC_05_S  ($CurrentRunLine,0)
				Case = 5
					'Clutch D
					Let $Desired_A_Press = $CurrentRunLine
					Gosub Ramp_A_Clutch
				Case = 6
					'Clutch E
					Set TVPSC_P_CMD_TST_CLC_06_S  ($CurrentRunLine,0)
				Case = 7
					'Clutch F
					Let $Desired_A_Press = $CurrentRunLine
					Gosub Ramp_A_Clutch
				Case = 8
					'TCC
					Let $Desired_A_Press = $CurrentRunLine
					Gosub Ramp_A_Clutch
			End_Select
		Case = 8
			'6R80   
			Select_Case $CurrentRunElement
				Case = 2
					'Clutch A
					Set TVPSC_P_CMD_TST_CLC_04_S ($CurrentRunLine,0)
				Case = 3
					'Clutch B
					Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)			
				Case = 4
					'Clutch C
					Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
				Case = 5
					'Clutch D
					 Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)		
				Case = 6
					'Clutch E
					Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)			
			End_Select		
	End_Select
End

'Measure average slip to create baseline slip level
Let $TCCALC_N_SLP_ACT_AVE2 = TCCALC_N_SLP_ACT_AVE2

'Set Slip threshold to 50rpm above average slip 
Let $Slip_Threshold = $TCCALC_N_SLP_ACT_AVE2 + 50
Let $BaseSlip = $TCCALC_N_SLP_ACT_AVE2

'Measure turbine speed to create baseline turbine speed level
Let $TCRPM_NT_BAR_AVE2 = $TCRPM_NT_BAR_AVE2

'Set turbine speed drop threshold at 100rpm below baseline turbine speed
Let $Turbine_Threshold = $TCRPM_NT_BAR_AVE2 - 100

'Initialize turbine drop and slip flags
Let $StopTurbine_Flag = 0
Let $TCCALC_N_SLP_ACT_high_flag = 0

Wait (3)

'Pressure Step with Converter locked
If $PStepTCC_On = 1
	'Lock Converter
	Gosub Lock_Converter
	Wait (2)	
	'MeasurClutch E slip
	Select_Case $CurrentRunElement
		Case = 2
			'Clutch A
			Let $ClutchSlip_Base = SAUTL_N_CLC_SLP[1]_2AVE
		Case = 3
			'Clutch B
			Let $ClutchSlip_Base = SAUTL_N_CLC_SLP[2]_2AVE
		Case = 4
			'Clutch C
			Let $ClutchSlip_Base = SAUTL_N_CLC_SLP[3]_2AVE
		Case = 5
			'Clutch D
			Let $ClutchSlip_Base = SAUTL_N_CLC_SLP[6]_2AVE
		Case = 6
			'Clutch E
			Let $ClutchSlip_Base = SAUTL_N_CLC_SLP[5]_2AVE
		Case = 7
			'Clutch F
			Let $ClutchSlip_Base = SAUTL_N_CLC_SLP[6]_2AVE
	End_Select
	'Establish slip threshold 50rpm above baseline slip
	Let $ClutchSlip_Threshold = $ClutchSlip_Base + 50
	'Turn on Clutch Slip Monitor
	Monitor_On Clutch_Slip	
	Log_Message (Starting Clutch_Slip monitor. Run_Pressure_Step.)
End
'For Debug:
' Screen_Message (Yellow, check converter state)
' Pause

Wait (2)

'Set File Name
If $DitherType = 2
	Let !File_Name = Dither_VFS_Pressure_Step_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (Dither_VFS_Pressure_Step_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)
Else
	Let !File_Name = VFS_Pressure_Step_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (VFS_Pressure_Step_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)		
End

'Start Vision Recorder
Gosub Record_Start

Wait (4)

'Initialize Flags and Counters
Let $StopTurbine_Flag = 0
Let $Step_Counter = 0
Let $VFS_Press_Cmd = 0

'Start Pressure Step control loop
Do
	'Start loop timer
	Let $Loop_Start = Timer
	'Increment step counter
	Let $Step_Counter = $Step_Counter + 1
	'Establish previous pressure command value
	Let $Last_VFS_Press = $VFS_Press_Cmd
	'Increment Pressure command value by step size
	Let $VFS_Press_Cmd = $VFS_Press_Cmd + $PStepSize
	'Set upper limit
	If $VFS_Press_Cmd > $Max_Press_Cmd
		Let $VFS_Press_Cmd = $Max_Press_Cmd
	End
	'If turbine threshold exceeded, reset flag, and exit loop
	If $StopTurbine_Flag = 1
           Let $StopTurbine_Flag = 0
	   Goto Done_Press_Step_Down: 
	End
	'Set Pressure Command
   	Select_Case $CurrentRunElement
		Case = 1
			'Line Pressure
			Set TVPSC_P_CMD_TST_LNP_S ($VFS_Press_Cmd,0)
		Case = 2
			'Clutch A
			Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
		Case = 3
			'Clutch B
			Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
		Case = 4
			'Clutch C
			Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
		Case = 5
			'Clutch D
			Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
		Case = 6
			'Clutch E
			Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
		Case = 7
			'Clutch F
			Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
		Case = 8
			'TCC
			Set TVPSC_P_CMD_TST_TCC_S ($VFS_Press_Cmd,0)
	End_Select
	Screen_Message (Green,%%New_Line%%Increasing %%!Element%% pressure to %%$VFS_Press_Cmd,2D%%kpa.)
	Log_Message (%%!Element%% pressure to %%$VFS_Press_Cmd,2D%%kpa. step %%$Step_Counter%% of %%$Number_Press_Setpoints%%.)
	'Apply cold temperature step time compensation
	If $Pressure_Step_Cold_Temp_Time_Comp = 1
		If $VFS_Press_Cmd <= 300
			Let $Calculated_PStepTime = $PStepTime * 1.5
		Else
			Let $Calculated_PStepTime = $PStepTime
		End
	Else
		Let $Calculated_PStepTime = $PStepTime
	End
	'Measure loop time
	Let $Loop_Time = Timer - $Loop_Start	
	'Calculate and apply wait time
	If $Loop_Time < $Calculated_PStepTime
		Let $Wait_Time = $Calculated_PStepTime - $Loop_Time
		Wait ($Wait_Time)
	End
	'Reset slip flag if monitor exceeds threshold and exit testpoint
	If $TCCALC_N_SLP_ACT_high_flag = 1
		Let $TCCALC_N_SLP_ACT_high_flag = 0
		Log_Message (TCCALC_N_SLP_ACT_high_flag set to 1.)
		Monitor_Off Slip_Act
		Log_Message (Stopping Slip_Act monitor. Run_Pressure_Step.)
		Goto Done_Press_Step_Down:
	End
	'Reset turbine flag if monitor exceeds threshold and exit testpoint
	If $StopTurbine_Flag = 1
		Let $StopTurbine_Flag = 0
		Monitor_Off Turbine
		Log_Message (Stopping Turbine monitor. Run_Pressure_Step.)
		Log_Message (StopTurbine_Flag set to 0.)
		Goto Done_Press_Step_Down:
	End
	'Reset clutch slip flag if monitor exceeds threshold and exit testpoint
	If $ClutchSlip_high_flag = 1
		Let $ClutchSlip_high_flag = 0
		Monitor_Off Clutch_Slip
		Log_Message (ClutchSlip_high_flag set to 1.)
		Goto Done_Press_Step_Down:
	End
	'Exit control loop when all pressure setpoints have been completed
	If $Step_Counter = $Number_Press_Setpoints Then Goto Done_Press_Step_Up:
Loop

Done_Press_Step_Up:
'If step-up only, skip to end
If $PStepDirection ~= 1 Then Goto Done_Press_Step_Down:

'Start top hold timer
Let $Pressure_Step_Hold_Start_Time = Timer
Let $Elapsed_Pressure_Step_Hold_Time = 0

'Start Pressure Step h
Do
	Let $Elapsed_Pressure_Step_Hold_Time = Timer - $Pressure_Step_Hold_Start_Time
	If $Elapsed_Pressure_Step_Hold_Time> $PStepHold Then Goto Done_PStepHold:
	Screen_Message (Green, %%New_Line%%Holding Pressure.)
Loop
Done_PStepHold:

'Set test override code to scalar pressure
Set TVPSC_D_OVRD_CLC_01_S (11,0)
Set TVPSC_D_OVRD_CLC_02_S (11,0)
Set TVPSC_D_OVRD_CLC_03_S (11,0)
Set TVPSC_D_OVRD_CLC_04_S (11,0)
Set TVPSC_D_OVRD_CLC_05_S (11,0)
Set TVPSC_D_OVRD_CLC_06_S (11,0)
Select_Case $Trans_Select 
	Case = 3
		'10R140
		If $CurrentRunLine >= 1200
			Set TVPSC_D_OVRD_CLC_04_S (31,0)
			Set TVPSC_D_OVRD_CLC_05_S (31,0)
		End	
	Case = 6
		'10R60/80
		If $CurrentRunLine >= 1200
			Set TVPSC_D_OVRD_CLC_04_S (31,0)
			Set TVPSC_D_OVRD_CLC_05_S (31,0)
		End			
	Case = 8
		'6R80
		If $CurrentRunLine >= 1200
			Set TVPSC_D_OVRD_CLC_04_S (31,0)
			Set TVPSC_D_OVRD_CLC_05_S (31,0)
		End		
End_Select

'Reset step counter for step-down
Let $Step_Counter = 0

'Start control loop for pressure step-down
Do
	'Initialize loop timer
	Let $Loop_Time = 0
	'Start loop timer
	Let $Loop_Start = Timer
	'Increment step counter
	Let $Step_Counter = $Step_Counter + 1
	'Exit control loop when all pressure steps have been commanded
	If $Step_Counter > $Number_Press_Setpoints Then Goto Done_Press_Step_Down:	
	'Calculate pressure command
	Let $VFS_Press_Cmd = $VFS_Press_Cmd - $PStepSize
	'Ensure no negative pressure command
	If $VFS_Press_Cmd < 0
		Let $VFS_Press_Cmd = 0
	End
	'Set pressure command for first step down to last command from step up
	If $Step_Counter = 1
		Let $VFS_Press_Cmd = $Last_VFS_Press
	End
	'Apply pressure command to test function
	Select_Case $CurrentRunElement
		Case = 1
			'Line Pressure
			Set TVPSC_P_CMD_TST_LNP_S ($VFS_Press_Cmd,0)
		Case = 2
			'Clutch A
			Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
		Case = 3
			'Clutch B
			Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
		Case = 4
			'Clutch C
			Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
		Case = 5
			'Clutch D
			Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
		Case = 6
			'Clutch E
			Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
		Case = 7
			'Clutch F
			Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
		Case = 8
			'TCC
			Set TVPSC_P_CMD_TST_TCC_S ($VFS_Press_Cmd,0)
	End_Select
	Screen_Message (Green,%%New_Line%%Decreasing %%!Element%% pressure to %%$VFS_Press_Cmd,2D%%kpa)
	Log_Message (%%!Element%% pressure to %%$VFS_Press_Cmd,2D%%kpa. step %%$Step_Counter%% of %%$Number_Press_Setpoints%%.)
	'Apply cold temperature step time compensation
	If $Pressure_Step_Cold_Temp_Time_Comp = 1
		If $VFS_Press_Cmd <= 300
			Let $Calculated_PStepTime = $PStepTime * 1.5
		Else
			Let $Calculated_PStepTime = $PStepTime
		End
	Else
		Let $Calculated_PStepTime = $PStepTime
	End	
	'Calculate loop time
	Let $Loop_Time = Timer - $Loop_Start	
	'Apply wait time
	If $Loop_Time < $Calculated_PStepTime
	    Let $Wait_Time = $Calculated_PStepTime - $Loop_Time
	    Wait ($Wait_Time)
	End
Loop
Done_Press_Step_Down:

'Resume base line pressure
Set TVPSC_D_OVRD_LNP_S (0,0)

'Unlock torque converter if applied
If $PStepTCC_On = 1
	Gosub Unlock_Converter
	Wait (2)
End

'Disable test mode and reset start switch
Set TVPSC_B_TST_STRT_ALL_S (0,0)
Set TVPSC_B_TST_ENBL_S (0,0)
Wait (2)

'End Vision recorder
Gosub Record_End

'Turn off monitors
Monitor_Off Clutch_Slip
Log_Message (Stopping Clutch_Slip monitor. Run_Pressure_Step.)

Monitor_Off Turbine
Log_Message (Stopping Turbine monitor. Run_Pressure_Step.)

Monitor_Off Slip_Act
Log_Message (Stopping Slip_Act monitor. Run_Pressure_Step.)

'Reset engine speed to base value
Gosub Reset_Engine_Speed
Wait (3)

'Shift PRNDL in neutral
If $THMI_ST_PRND_DES ~= 3
	Let $Desired_PRNDL_Position = 2
	Gosub Set_PRNDL_Position
End

End_Sub

'*******************************************************
Sub Run_PSet_Pressure_Step
'*******************************************************
 'This subroutine will toggle the solenoid pressure through to activate low and high current transfer function gains.
Log_Message (Starting Run_PSet_Pressure_Step Subroutine)

'Check engine speed and start engine if not running
Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2
If $TCRPM_NE_BAR_AVE2 < 100
	Gosub Start_Engine
End 

'Ensure brake is applied prior to PRNDL movement
If $HIL_Flag = 1
	Set DynoBrake_Set (50,0)
End

'Check PRNDL position
Let $THMI_ST_PRND_DES = THMI_ST_PRND_DES
If $PRNDL_Selection = 1
	'If user selection is Overdrive, change selection to Neutral
	Let $PRNDL_Selection = 0
End
'*************************
'Check if following lines of code still apply to 8F24 engagements
If $PRNDL_Selection = 0
	If $Trans_Select = 2
		'8F24
		'Shift to Overdrive and wait 5 seconds before shifting to neutral
		If $HIL_Flag = 1
			Let $Desired_PRNDL_Position = 3
		Else	
			Let $Desired_PRNDL_Position = 4
		End	
		Gosub Set_PRNDL_Position
		Wait (5)
		Let $Desired_PRNDL_Position = 2
		Gosub Set_PRNDL_Position
	Else	
		If $THMI_ST_PRND_DES ~= 3
			'Neutral
			Let $Desired_PRNDL_Position = 2
			Gosub Set_PRNDL_Position
		End
	End
End

'Initialize test pressures
Set TVPSC_P_CMD_TST_CLC_01_S (0,0)
Set TVPSC_P_CMD_TST_CLC_02_S (0,0)
Set TVPSC_P_CMD_TST_CLC_03_S (0,0)
Set TVPSC_P_CMD_TST_CLC_04_S (0,0)
Set TVPSC_P_CMD_TST_CLC_05_S (0,0)
Set TVPSC_P_CMD_TST_CLC_06_S (0,0)
Set TVPSC_P_CMD_TST_TCC_S (0,0)

'Set test override codes
Set TVPSC_D_OVRD_LNP_S (11,0)

'Set test override code to low gain oncoming pressure profile
Set TVPSC_D_OVRD_CLC_01_S (21,0)
Set TVPSC_D_OVRD_CLC_02_S (21,0)
Set TVPSC_D_OVRD_CLC_03_S (21,0)
Set TVPSC_D_OVRD_CLC_04_S (21,0)
Set TVPSC_D_OVRD_CLC_05_S (21,0)
Set TVPSC_D_OVRD_CLC_06_S (21,0)
Set TVPSC_D_OVRD_TCC_S (11,0)

'Set test override code to high gain oncoming profile for high line pressure testpoints
Select_Case $Trans_Select 
	Case = 3
		'10R140
		If $CurrentRunLine > 1200
			Set TVPSC_D_OVRD_CLC_04_S (41,0)
			Set TVPSC_D_OVRD_CLC_05_S (41,0)
		End	
	Case = 6
		'10R60/80
		If $CurrentRunLine > 1200
			Set TVPSC_D_OVRD_CLC_04_S (41,0)
			Set TVPSC_D_OVRD_CLC_05_S (41,0)
		End	
	Case = 8
		'6R80
		If $CurrentRunLine > 1200
			Set TVPSC_D_OVRD_CLC_04_S (41,0)
			Set TVPSC_D_OVRD_CLC_05_S (41,0)
		End	
End_Select

'Log test conditions
Log_Message (RunType is %%$RunType%%)
Log_Message (PSetStepTime is %%$PSetStepTime%%)
Log_Message (PSetDirection is %%$PSetDirection%%)
Log_Message (PSetHold is %%$PSetHold%%)

'Set pressure profile matrix
Gosub Set_Pressure_Setpoints

'Set line pressure for all solenoids except line pressure solenoid
If $CurrentRunElement ~= 1
	Set TVPSC_P_CMD_TST_LNP_S ($CurrentRunLine,0)
Else
	Set TVPSC_P_CMD_TST_LNP_S (0,0)
End

'Set engine speed
Gosub Set_Engine_Speed
Wait (5)

'Start engine speed monitor
Monitor_On Engine_Running
Log_Message (Starting Engine_Running monitor. Run_PSet_Pressure_Step.)

'Set TRAM_Set flag to reset PCM parameters if test shuts down in middle of test
Let $TRAM_Set = 1
Log_Message (TRAM_Set set to 1.)

'Disable OBDII
Set OBDII_TST_SW (0,0)

'Enable test mode
Set TVPSC_B_TST_ENBL_S (1,0)

Wait (2)

'Set Line Pressure
If $CurrentRunElement ~= 1
	Set TVPSC_D_OVRD_LNP_S (11,0)
	Set TVPSC_P_CMD_TST_LNP_S ($CurrentRunLine,0)
End
Wait (2)

'Set File Name
If $DitherType = 2
	Let !File_Name = Dither_Preset_Pressure_Step_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (Dither_Preset_Pressure_Step_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)
Else
	Let !File_Name = Preset_Pressure_Step_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (Preset_Pressure_Step_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)		
End	

'Start Vision recorder
Gosub Record_Start

Wait (4)

'Apply full pressure command to exercise solenoid prior to test
Let $Pressure_Blip = 3500
Select_Case $CurrentRunElement
	Case = 2
		'Clutch A
		'Set TVPSC_P_CMD_TST_CLC_01_S ($Pressure_Blip,0)
	Case = 3
		'Clutch B
		Set TVPSC_P_CMD_TST_CLC_02_S ($Pressure_Blip,0)
	Case = 4
		'Clutch C
		Set TVPSC_P_CMD_TST_CLC_03_S ($Pressure_Blip,0)
	Case = 5
		'Clutch D
		Set TVPSC_P_CMD_TST_CLC_04_S ($Pressure_Blip,0)
	Case = 6
		'Clutch E
		'Set TVPSC_P_CMD_TST_CLC_05_S ($Pressure_Blip,0)
	Case = 7
		'Clutch F
		Set TVPSC_P_CMD_TST_CLC_06_S ($Pressure_Blip,0)
	Case = 8
		'TCC
		Set TVPSC_P_CMD_TST_TCC_S ($Pressure_Blip,0)
End_Select
Wait (1)

'Initialize step counter
Let $Step_Counter = 0

'Set number of pressure steps
Let $PressureSetpoint_Length = Variable_Rows $PressureSetpoints

'Start Preset Pressure control loop
Do
	'Initialize timer
	Let $Loop_Time = 0
	'Start loop timer
	Let $Loop_Start = Timer
	'Increment step counter
	Let $Step_Counter = $Step_Counter + 1
	'Exit loop when all preset pressure steps have been completed
	If $Step_Counter > $PressureSetpoint_Length Then Goto Done_PSet_Up:	
	'Select preset pressure command from pressure setpoint matrix
	Let $VFS_Press_Cmd = $PressureSetpoints ($Step_Counter , 1)
	'Set pressure command via test function
	Select_Case $CurrentRunElement
		Case = 1
			'Line Pressure
			Set TVPSC_P_CMD_TST_LNP_S ($VFS_Press_Cmd,0)
		Case = 2
			'Clutch A
			Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
		Case = 3
			'Clutch B
			Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
		Case = 4
			'Clutch C
			Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
		Case = 5
			'Clutch D
			Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
		Case = 6
			'Clutch E
			Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
		Case = 7
			'Clutch F
			Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
		Case = 8
			'TCC
			Set TVPSC_P_CMD_TST_TCC_S ($VFS_Press_Cmd,0)
	End_Select
	Screen_Message (Green,%%New_Line%%Setting %%!Element%% pressure to %%$VFS_Press_Cmd,2D%%kpa)
	Log_Message (%%!Element%% pressure to %%$VFS_Press_Cmd,2D%%kpa. step %%$Step_Counter%% of 16.)
	'Calculate loop time
	Let $Loop_Time = Timer - $Loop_Start
	'Apply calculated wait time
	If $Loop_Time < $PSetStepTime
		Let $Wait_Time = $PSetStepTime - $Loop_Time
		Wait ($Wait_Time)
	End
Loop

Done_PSet_Up:

'If step-up only, skip to end
If $PSetDirection ~= 1 Then Goto Done_PSet_Down:

'Apply hold wait time
Wait ($PSetHold)

'Set solenoid override codes to scalar pressure
Set TVPSC_D_OVRD_CLC_01_S (11,0)
Set TVPSC_D_OVRD_CLC_02_S (11,0)
Set TVPSC_D_OVRD_CLC_03_S (11,0)
Set TVPSC_D_OVRD_CLC_04_S (11,0)
Set TVPSC_D_OVRD_CLC_05_S (11,0)
Set TVPSC_D_OVRD_CLC_06_S (11,0)

'Set test override code to high gain offgoing scalar for high line pressure testpoints
Select_Case $Trans_Select 
	Case = 3
		'10R140
		If $CurrentRunLine > 1200
			Set TVPSC_D_OVRD_CLC_04_S (31,0)
			Set TVPSC_D_OVRD_CLC_05_S (31,0)
		End	
	Case = 6
		'10R60/80
		If $CurrentRunLine > 1200
			Set TVPSC_D_OVRD_CLC_04_S (31,0)
			Set TVPSC_D_OVRD_CLC_05_S (31,0)
		End	
	Case = 8
		'6R80
		If $CurrentRunLine > 1200
			Set TVPSC_D_OVRD_CLC_04_S (31,0)
			Set TVPSC_D_OVRD_CLC_05_S (31,0)
		End	
End_Select

'Zero step counter for step-down
Let $Step_Counter = 0

'Start control loop for pressure step-down 
Do
	Let $Loop_Start = Timer
	'Increment step counter
	Let $Step_Counter = $Step_Counter + 1
	'Select pressure setpoint from matrix in reverse order
	Let $CurrentSetpoint = $PressureSetpoint_Length - $Step_Counter
	'Set pressure setpoint
	Let $VFS_Press_Cmd = $PressureSetpoints ($CurrentSetpoint , 1)
	'Apply pressure setpoint via test function
	Select_Case $CurrentRunElement
		Case = 1
			'Line Pressure
			Set TVPSC_P_CMD_TST_LNP_S ($VFS_Press_Cmd,0)
		Case = 2
			'Clutch A
			Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
		Case = 3
			'Clutch B
			Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
		Case = 4
			'Clutch C
			Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
		Case = 5
			'Clutch D
			Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
		Case = 6
			'Clutch E
			Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
		Case = 7
			'Clutch F
			Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
		Case = 8
			'TCC
			Set TVPSC_P_CMD_TST_TCC_S ($VFS_Press_Cmd,0)
	End_Select
	Screen_Message (Green,%%New_Line%%Setting %%!Element%% pressure to %%$VFS_Press,2D%%kpa)
	Log_Message (%%!Element%% pressure to %%$VFS_Press,2D%%kpa. step %%$Step_Counter%% of 16.)
	'Calculate loop time
	Let $Loop_Time = Timer - $Loop_Start
	'Calculate and apply wait time
	If $Loop_Time < $PSetStepTime
		Let $Wait_Time = $PSetStepTime - $Loop_Time
		Wait ($Wait_Time)
	End
	'Exit loop when all preset pressure steps have been completed
	If $Step_Counter = $PressureSetpoint_Length Then Goto Done_PSet_Down:
Loop

Done_PSet_Down:

Wait (2)
'End Vision Recorder
Gosub Record_End

'Reset engine speed to base value
Gosub Reset_Engine_Speed

'Shift PRNDL back to Neutral
If $THMI_ST_PRND_DES ~= 3
	Let $Desired_PRNDL_Position = 2
	Gosub Set_PRNDL_Position
End

'Disable test mode and reset start switch
Set TVPSC_B_TST_STRT_ALL_S (0,0)
Set TVPSC_B_TST_ENBL_S (0,0)

End_Sub
'*******************************************************
Sub Preset_Current_Steps
'*******************************************************
'This subroutine will increment solenoid current to levels determined in the test setup
Log_Message (Starting Preset_Current_Steps Subroutine)

'Log test conditions
Log_Message (RunType is %%$RunType%%)
Log_Message (Preset_Current_Step_Time is %%$Preset_Current_Step_Time%%)
Log_Message (Preset_Current_Direction is %%$Preset_Current_Direction%%)
Log_Message (Preset_Current_Hold is %%$Preset_Current_Hold%%)

'Establish current setpoint matrix
Gosub Set_Current_Setpoints

'Check engine speed and start engine if not already running
Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2
If $TCRPM_NE_BAR_AVE2 < 100
	If $Vehicle_Flag = 1
		'Prompt driver to start engine in-vehicle
		Screen_Message (Yellow,Please start engine and press 'Resume Test' when ready)
		Pause
	Else
		'Automatically start engine
		Gosub Start_Engine
	End	
End 

'Set engine speed
Gosub Set_Engine_Speed

'Set engine speed to prevent stall for Torque Converter 
If $CurrentRunElement = 8
	If $CurrentRunTurbine < 1200
		Set_Function_Table DSDN_NE_TST = 1200
		Set_Function_Table DSDN_SW_TST = 1
		Set_Activate
	End
End
Wait (5)

'Start engine speed monitor
Monitor_On Engine_Running
Log_Message (Starting Engine_Running monitor. Preset_Current_Steps.)

'Set TRAM_Set flag to reset PCM parameters if test shuts down
Let $TRAM_Set = 1
Log_Message (TRAM_Set set to 1.)

Wait (2)

'Disable one-way clutch
Set SAPRC_SW_SOWC_DSBL_S (1,0)

'Zero test currents
Set TVPSC_IA_CMD_TST_CLC_01_S (0,0)
Set TVPSC_IA_CMD_TST_CLC_02_S (0,0)
Set TVPSC_IA_CMD_TST_CLC_03_S (0,0)
Set TVPSC_IA_CMD_TST_CLC_04_S (0,0)
Set TVPSC_IA_CMD_TST_CLC_05_S (0,0)
Set TVPSC_IA_CMD_TST_CLC_06_S (0,0)
Set TVPSC_IA_CMD_TST_TCC_S (0,0)

'Set test override to scalar current
Set TVPSC_D_OVRD_CLC_01_S (1,0)
Set TVPSC_D_OVRD_CLC_02_S (1,0)
Set TVPSC_D_OVRD_CLC_03_S (1,0)
Select_Case $Trans_Select 
	Case = 3
		'10R140
		Set TVPSC_D_OVRD_CLC_04_S (1,0)
	Case = 6
	'10R60/80
		Set TVPSC_D_OVRD_CLC_04_S (1,0)
	Case = 8
	'6R80
		Set TVPSC_D_OVRD_CLC_04_S (1,0)
End_Select

Set TVPSC_D_OVRD_CLC_05_S (1,0)
Set TVPSC_D_OVRD_CLC_06_S (1,0)
Set TVPSC_D_OVRD_TCC_S (1,0)

'Set Line Pressure for all solenoids except Line Pressure Solenoid
If $CurrentRunElement = 1
	Set TVPSC_IA_CMD_TST_LNP_S ($MaxCurrent,0)
	Set TVPSC_D_OVRD_LNP_S (1,0)
Else
	Set TVPSC_P_CMD_TST_LNP_S ($CurrentRunLine,0)
	Set TVPSC_D_OVRD_LNP_S (11,0)
End

'Disable OBDII
Set OBDII_TST_SW (0,0)

'Enable Test Mode
Set TVPSC_B_TST_ENBL_S (1,0)
Wait (2)

'Set File Name
If $DitherType = 2
	Let !File_Name = Dither_VFS_Preset_Current_Step_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (Dither_VFS_Preset_Current_Step_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)		
Else
	Let !File_Name = VFS_Preset_Current_Step_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (VFS_Preset_Current_Step_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)
End

'Start Vision recorder
Gosub Record_Start

Wait (4)

'Set solenoid to max current to exercise full range
Let $CurrentBlip = 1.1
Select_Case $CurrentRunElement
	Case = 2
		'Clutch A
		If $Trans_Select = 7
			'8F35
			Set TVPSC_D_OVRD_CLC_01_S (1,0)
			Set TVPSC_IA_CMD_TST_CLC_01_S ($CurrentBlip,0)
		End	
	Case = 3
		'Clutch B
		Set TVPSC_D_OVRD_CLC_02_S (1,0)
		Set TVPSC_IA_CMD_TST_CLC_02_S ($CurrentBlip,0)
	Case = 4
		'Clutch C
		Set TVPSC_D_OVRD_CLC_03_S (1,0)
		Set TVPSC_IA_CMD_TST_CLC_03_S ($CurrentBlip,0)
	Case = 5
		'Clutch D
		Set TVPSC_D_OVRD_CLC_04_S (1,0)
		Set TVPSC_IA_CMD_TST_CLC_04_S ($CurrentBlip,0)
	Case = 6
		'Clutch E
		Set TVPSC_D_OVRD_CLC_05_S (1,0)
		Set TVPSC_IA_CMD_TST_CLC_05_S ($CurrentBlip,0)
	Case = 7
		'Clutch F
		Set TVPSC_D_OVRD_CLC_06_S (1,0)
		Set TVPSC_IA_CMD_TST_CLC_06_S ($CurrentBlip,0)
	Case = 8
		'TCC
		Set TVPSC_D_OVRD_TCC_S (1,0)
		Set TVPSC_IA_CMD_TST_TCC_S ($CurrentBlip,0)
End_Select
Wait (1)

'Initialize step counter
Let $Preset_Current_Step_Counter = 0
'Determine number of current steps
Let $Preset_Current_Setpoint_Length = Variable_Rows $Preset_Current_Setpoints

'Start Preset Current Step control loop
Do
	'Update timer
	Let $Preset_Current_Loop_Start_Time = Timer
	
	'Increment step counter
	Let $Preset_Current_Step_Counter = $Preset_Current_Step_Counter + 1
	'Select preset current from current setpoint matrix
	Let $Preset_Current_Cmd = $Preset_Current_Setpoints ($Preset_Current_Step_Counter , 1)
	'Set current command via test function
	Select_Case $CurrentRunElement
		Case = 1
			'Line Pressure
			Set TVPSC_P_CMD_TST_LNP_S ($Preset_Current_Cmd,0)
		Case = 2
			'Clutch A
			Set TVPSC_P_CMD_TST_CLC_01_S ($Preset_Current_Cmd,0)
		Case = 3
			'Clutch B
			Set TVPSC_P_CMD_TST_CLC_02_S ($Preset_Current_Cmd,0)
		Case = 4
			'Clutch C
			Set TVPSC_P_CMD_TST_CLC_03_S ($Preset_Current_Cmd,0)
		Case = 5
			'Clutch D
			Set TVPSC_P_CMD_TST_CLC_04_S ($Preset_Current_Cmd,0)
		Case = 6
			'Clutch E
			Set TVPSC_P_CMD_TST_CLC_05_S ($Preset_Current_Cmd,0)
		Case = 7
			'Clutch F
			Set TVPSC_P_CMD_TST_CLC_06_S ($Preset_Current_Cmd,0)
		Case = 8
			'TCC
			Set TVPSC_P_CMD_TST_TCC_S ($Preset_Current_Cmd,0)
	End_Select
	Screen_Message (Green,%%New_Line%%Setting %%!Element%% current to %%$Preset_Current_Cmd,2D%%mA)
	Log_Message (%%!Element%% current to %%$Preset_Current_Cmd,2D%%mA. Step %%$Preset_Current_Step_Counter%% of 16.)
	'Calculate loop time
	Let $Preset_Current_Loop_Time = Timer - $Preset_Current_Loop_Start_Time
	'Calculate and apply wait time
	If $Preset_Current_Loop_Time < $Preset_Current_Step_Time
		Let $Wait_Time = $Preset_Current_Step_Time - $Preset_Current_Loop_Time
		Wait ($Wait_Time)
	End
	'Exit loop when all preset current steps are completed
	If $Preset_Current_Step_Counter = $Preset_Current_Setpoint_Length Then Goto Done_Preset_Current_Up:
Loop

Done_Preset_Current_Up:
'If testing step-up only, skip to end
If $Preset_Current_Direction ~= 1 Then Goto Done_Preset_Current_Down:

'Wait hold time
Wait ($Preset_Current_Hold)

'Set override code to scalar current
Set TVPSC_D_OVRD_CLC_01_S (11,0)
Set TVPSC_D_OVRD_CLC_02_S (11,0)
Set TVPSC_D_OVRD_CLC_03_S (11,0)
Set TVPSC_D_OVRD_CLC_04_S (11,0)
Set TVPSC_D_OVRD_CLC_05_S (11,0)
Set TVPSC_D_OVRD_CLC_06_S (11,0)

'Set test override code to high gain offgoing scalar for high line pressure testpoints
Select_Case $Trans_Select 
	Case = 3
		'10R140
		If $CurrentRunLine > 1200
			Set TVPSC_D_OVRD_CLC_04_S (31,0)
			Set TVPSC_D_OVRD_CLC_05_S (31,0)
		End	
	Case = 6
		'10R80E
		If $CurrentRunLine > 1200
			Set TVPSC_D_OVRD_CLC_04_S (31,0)
			Set TVPSC_D_OVRD_CLC_05_S (31,0)
		End	
	Case = 8
		'6R80
		If $CurrentRunLine > 1200
			Set TVPSC_D_OVRD_CLC_04_S (31,0)
			Set TVPSC_D_OVRD_CLC_05_S (31,0)
		End	
End_Select

'Initialize step counter
Let $Preset_Current_Step_Counter = 0

'Start preset current control loop
Do
	Let $Preset_Current_Loop_Start_Time = Timer
	'Increment step counter
	Let $Preset_Current_Step_Counter = $Preset_Current_Step_Counter + 1
	'Reverse order of current setpoints
	Let $CurrentSetpoint = $PressureSetpoint_Length - $Preset_Current_Step_Counter
	'Select current command from current setpoint matrix
	Let $Preset_Current_Cmd = $Preset_Current_Setpoint_Length ($CurrentSetpoint , 1)
	'Set current command via test function
	Select_Case $CurrentRunElement
		Case = 1
			'Line Pressure
			Set TVPSC_P_CMD_TST_LNP_S ($Preset_Current_Cmd,0)
		Case = 2
			'Clutch A
			Set TVPSC_P_CMD_TST_CLC_01_S ($Preset_Current_Cmd,0)
		Case = 3
			'Clutch B
			Set TVPSC_P_CMD_TST_CLC_02_S ($Preset_Current_Cmd,0)
		Case = 4
			'Clutch C
			Set TVPSC_P_CMD_TST_CLC_03_S ($Preset_Current_Cmd,0)
		Case = 5
			'Clutch D
			Set TVPSC_P_CMD_TST_CLC_04_S ($Preset_Current_Cmd,0)
		Case = 6
			'Clutch E
			Set TVPSC_P_CMD_TST_CLC_05_S ($Preset_Current_Cmd,0)
		Case = 7
			'Clutch F
			Set TVPSC_P_CMD_TST_CLC_06_S ($Preset_Current_Cmd,0)
		Case = 8
			'TCC
			Set TVPSC_P_CMD_TST_TCC_S ($Preset_Current_Cmd,0)
	End_Select
	Screen_Message (Green,%%New_Line%%Setting %%!Element%% current to %%$Preset_Current_Cmd,2D%%mA.)
	Log_Message (%%!Element%% current to %%$Preset_Current_Cmd,2D%%mA. step %%$Preset_Current_Step_Counter%% of 16.)
	'Calculate loop time
	Let $Preset_Current_Loop_Time = Timer - $Preset_Current_Loop_Start_Time
	'Calculate and apply wait time
	If $Preset_Current_Loop_Time < $Preset_Current_Step_Time
		Let $Wait_Time = $Preset_Current_Step_Time - $Preset_Current_Loop_Time
		Wait ($Wait_Time)
	End
	'Exit loop when all preset current steps are completed
	If $Preset_Current_Step_Counter = $Preset_Current_Setpoint_Length Then Goto Done_Preset_Current_Down:
Loop

Done_Preset_Current_Down:

Wait (2)

'End Vision Recorder
Gosub Record_End

'Reset engine speed to base values
Gosub Reset_Engine_Speed

'Shift PRNDL to Neutral
If $THMI_ST_PRND_DES ~= 3
	Let $Desired_PRNDL_Position = 2
	Gosub Set_PRNDL_Position
End

'Disable test mode and reset start switch
Set TVPSC_B_TST_STRT_ALL_S (0,0)
Set TVPSC_B_TST_ENBL_S (0,0)

End_Sub
'*******************************************************
Sub Run_Pressure_Sweep
'*******************************************************
'This subroutine will increment the solenoid pressure sweeps
Log_Message (Starting Run_Pressure_Sweep Subroutine)

'Zero test pressures
Set TVPSC_P_CMD_TST_CLC_01_S (0,0)
Set TVPSC_P_CMD_TST_CLC_02_S (0,0)
Set TVPSC_P_CMD_TST_CLC_03_S (0,0)
Set TVPSC_P_CMD_TST_CLC_04_S (0,0)
Set TVPSC_P_CMD_TST_CLC_05_S (0,0)
Set TVPSC_P_CMD_TST_CLC_06_S (0,0)
Set TVPSC_P_CMD_TST_TCC_S (0,0)

'Set override codes to scalar pressure
Set TVPSC_D_OVRD_LNP_S (11,0)
Set TVPSC_D_OVRD_CLC_01_S (11,0)
Set TVPSC_D_OVRD_CLC_02_S (11,0)
Set TVPSC_D_OVRD_CLC_03_S (11,0)
Set TVPSC_D_OVRD_CLC_04_S (11,0)
Set TVPSC_D_OVRD_CLC_05_S (11,0)
Set TVPSC_D_OVRD_CLC_06_S (11,0)
Set TVPSC_D_OVRD_TCC_S (11,0)

'Set Line Pressure for all solenoids except Line Pressure Solenoids
If $CurrentRunElement ~= 1
	Set TVPSC_P_CMD_TST_LNP_S ($CurrentRunLine,0)
Else
	Set TVPSC_P_CMD_TST_LNP_S (0,0)      
End

'Check engine speed and start engine if not running
Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2
If $TCRPM_NE_BAR_AVE2 < 100
	If $Vehicle_Flag = 1
		'Prompt driver to start engine
		Screen_Message (Yellow,Please start engine and press 'Resume Test' when ready)
		Pause
	Else
		'Automatically start engine
		Gosub Start_Engine
	End	
End 

'Set engine speed
Gosub Set_Engine_Speed
Wait (5)

'Turn on engine speed monitor
Monitor_On Engine_Running
Log_Message (Starting Engine_Running monitor. Run_Pressure_Sweep.)

'Set TRAM_Set flag to reset PCM parameters
Let $TRAM_Set = 1
Log_Message (TRAM_Set set to 1)

'Disable OBDII
Set OBDII_TST_SW (0,0)

'Enable test mode
Set TVPSC_B_TST_ENBL_S (1,0)

Wait (2)

'Set Line Pressure
If $CurrentRunElement ~= 1
	Set TVPSC_D_OVRD_LNP_S (11,0)
	Set TVPSC_P_CMD_TST_LNP_S ($CurrentRunLine,0)
End
Wait (2)

'Gosub Max_Pressure_Finder

'Log Pressure sweep test factors
Log_Message (RunType is %%$RunType%%)
Log_Message (PSweepTime is %%$PSweepTime%%)
Log_Message (PSweepDirection is %%$PStepDirection%%)
Log_Message (PSweepHold is %%$PStepHold%%)
Log_Message (MaxPressure is %%$MaxPressure%%)

'*********************************
'Check if this piece of code is still relevant to limit Clutch A pressure sweep to greater than 7 seconds to prevent slamming on Clutch A and engaging forward gear
If $CurrentRunElement = 2
	If $PSweepTime < 7
		Log_Message (Clutch A Sweep time limited to 7 second minimum sweep time)
		Point_Status (Testpoint) = Failed
		Goto Done_Pressure_Sweep:
	End
End

'Calculate Sweep times
If $PSweepDirection = 1
	'Up and Down
	Let $DownPressRampStartTime = $PSweepTime + $PSweepHold
	Let $DownPressRampEndTime = $DownPressRampStartTime + $PSweepTime
	Let $DownPressRampStartPressure = $MaxPressure
Else
	'Up Only
	Let $DownPressRampStartTime = $PSweepTime
	Let $DownPressRampEndTime = $DownPressRampStartTime
	Let $DownPressRampStartPressure = 0
End

'Convert sweep time to milliseconds
Let $PSweepTime_MS = $PSweepTime * 1000
Let $DownPressRampStartTime_MS = $DownPressRampStartTime * 1000
Let $DownPressRampEndTime_MS = $DownPressRampEndTime * 1000

'Set time normalizer for sweep profile
Let $Profile_Timestamp_10 = $DownPressRampEndTime_MS + 10
Let $Profile_Timestamp_20 = $DownPressRampEndTime_MS + 20
Let $Profile_Timestamp_30 = $DownPressRampEndTime_MS + 30
Let $Profile_Timestamp_40 = $DownPressRampEndTime_MS + 40
Let $Profile_Timestamp_50 = $DownPressRampEndTime_MS + 50
Let $Profile_Timestamp_60 = $DownPressRampEndTime_MS + 60
Let $Profile_Timestamp_70 = $DownPressRampEndTime_MS + 70
Let $Profile_Timestamp_80 = $DownPressRampEndTime_MS + 80
Let $Profile_Timestamp_90 = $DownPressRampEndTime_MS + 90
Let $Profile_Timestamp_100 = $DownPressRampEndTime_MS + 100
Let $Profile_Timestamp_110 = $DownPressRampEndTime_MS + 110
Let $Profile_Timestamp_120 = $DownPressRampEndTime_MS + 120

'Set pressure sweep profile matrix and profile override code
Select_Case $CurrentRunElement
	Case = 1
		'Line Pressure
		Set TVPSC_D_OVRD_LNP_S (12,0)
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,0) = $0
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,1) = $PSweepTime_MS
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,2) = $DownPressRampStartTime_MS
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,3) = $DownPressRampEndTime_MS
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,4) = $Profile_Timestamp_10
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,5) = $Profile_Timestamp_20
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,6) = $Profile_Timestamp_30
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,7) = $Profile_Timestamp_40
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,8) = $Profile_Timestamp_50
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,9) = $Profile_Timestamp_60
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,10) = $Profile_Timestamp_70
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,11) = $Profile_Timestamp_80
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,12) = $Profile_Timestamp_90
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,13) = $Profile_Timestamp_100
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,14) = $Profile_Timestamp_110
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,15) = $Profile_Timestamp_120
		Set_Function_Table TVPSC_P_TST_LNP_T (1,0) = 0
		Set_Function_Table TVPSC_P_TST_LNP_T (1,1) = $MaxPressure
		Set_Function_Table TVPSC_P_TST_LNP_T (1,2) = $DownPressRampStartPressure
		Set_Function_Table TVPSC_P_TST_LNP_T (1,3) = 0
		Set_Function_Table TVPSC_P_TST_LNP_T (1,4) = 0
		Set_Function_Table TVPSC_P_TST_LNP_T (1,5) = 0
		Set_Function_Table TVPSC_P_TST_LNP_T (1,6) = 0
		Set_Function_Table TVPSC_P_TST_LNP_T (1,7) = 0
		Set_Function_Table TVPSC_P_TST_LNP_T (1,8) = 0
		Set_Function_Table TVPSC_P_TST_LNP_T (1,9) = 0
		Set_Function_Table TVPSC_P_TST_LNP_T (1,10) = 0
		Set_Function_Table TVPSC_P_TST_LNP_T (1,11) = 0
		Set_Function_Table TVPSC_P_TST_LNP_T (1,12) = 0
		Set_Function_Table TVPSC_P_TST_LNP_T (1,13) = 0
		Set_Function_Table TVPSC_P_TST_LNP_T (1,14) = 0
		Set_Function_Table TVPSC_P_TST_LNP_T (1,15) = 0
		Set_Activate
	Case = 2
		'Clutch A
		Set TVPSC_D_OVRD_CLC_01_S (12,0)
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,0) = $0
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,1) = $PSweepTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,2) = $DownPressRampStartTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,3) = $DownPressRampEndTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,4) = $Profile_Timestamp_10
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,5) = $Profile_Timestamp_20
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,6) = $Profile_Timestamp_30
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,7) = $Profile_Timestamp_40
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,8) = $Profile_Timestamp_50
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,9) = $Profile_Timestamp_60
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,10) = $Profile_Timestamp_70
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,11) = $Profile_Timestamp_80
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,12) = $Profile_Timestamp_90
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,13) = $Profile_Timestamp_100
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,14) = $Profile_Timestamp_110
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,15) = $Profile_Timestamp_120
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,0) = 0
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,1) = $MaxPressure
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,2) = $DownPressRampStartPressure
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,3) = 0
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,4) = 0
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,5) = 0
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,6) = 0
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,7) = 0
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,8) = 0
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,9) = 0
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,10) = 0
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,11) = 0
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,12) = 0
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,13) = 0
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,14) = 0
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,15) = 0
		Set_Activate
   Case = 3
	'Clutch B
		Set TVPSC_D_OVRD_CLC_02_S (12,0)
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,0) = $0
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,1) = $PSweepTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,2) = $DownPressRampStartTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,3) = $DownPressRampEndTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,4) = $Profile_Timestamp_10
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,5) = $Profile_Timestamp_20
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,6) = $Profile_Timestamp_30
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,7) = $Profile_Timestamp_40
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,8) = $Profile_Timestamp_50
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,9) = $Profile_Timestamp_60
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,10) = $Profile_Timestamp_70
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,11) = $Profile_Timestamp_80
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,12) = $Profile_Timestamp_90
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,13) = $Profile_Timestamp_100
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,14) = $Profile_Timestamp_110
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,15) = $Profile_Timestamp_120
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,0) = 0
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,1) = $MaxPressure
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,2) = $DownPressRampStartPressure
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,3) = 0
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,4) = 0
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,5) = 0
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,6) = 0
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,7) = 0
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,8) = 0
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,9) = 0
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,10) = 0
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,11) = 0
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,12) = 0
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,13) = 0
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,14) = 0
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,15) = 0
		Set_Activate
   Case = 4
		'Clutch C
		Set TVPSC_D_OVRD_CLC_03_S (12,0)
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,0) = $0
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,1) = $PSweepTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,2) = $DownPressRampStartTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,3) = $DownPressRampEndTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,4) = $Profile_Timestamp_10
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,5) = $Profile_Timestamp_20
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,6) = $Profile_Timestamp_30
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,7) = $Profile_Timestamp_40
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,8) = $Profile_Timestamp_50
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,9) = $Profile_Timestamp_60
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,10) = $Profile_Timestamp_70
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,11) = $Profile_Timestamp_80
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,12) = $Profile_Timestamp_90
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,13) = $Profile_Timestamp_100
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,14) = $Profile_Timestamp_110
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,15) = $Profile_Timestamp_120
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,0) = 0
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,1) = $MaxPressure
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,2) = $DownPressRampStartPressure
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,3) = 0
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,4) = 0
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,5) = 0
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,6) = 0
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,7) = 0
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,8) = 0
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,9) = 0
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,10) = 0
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,11) = 0
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,12) = 0
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,13) = 0
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,14) = 0
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,15) = 0
		Set_Activate
   Case = 5
		'Clutch D
		Set TVPSC_D_OVRD_CLC_04_S (42,0)
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,0) = $0
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,1) = $PSweepTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,2) = $DownPressRampStartTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,3) = $DownPressRampEndTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,4) = $Profile_Timestamp_10
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,5) = $Profile_Timestamp_20
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,6) = $Profile_Timestamp_30
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,7) = $Profile_Timestamp_40
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,8) = $Profile_Timestamp_50
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,9) = $Profile_Timestamp_60
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,10) = $Profile_Timestamp_70
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,11) = $Profile_Timestamp_80
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,12) = $Profile_Timestamp_90
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,13) = $Profile_Timestamp_100
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,14) = $Profile_Timestamp_110
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,15) = $Profile_Timestamp_120
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,0) = 0
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,1) = $MaxPressure
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,2) = $DownPressRampStartPressure
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,3) = 0
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,4) = 0
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,5) = 0
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,6) = 0
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,7) = 0
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,8) = 0
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,9) = 0
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,10) = 0
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,11) = 0
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,12) = 0
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,13) = 0
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,14) = 0
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,15) = 0
		Set_Activate
	Case = 6
		'Clutch E
		Set TVPSC_D_OVRD_CLC_05_S (42,0)
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,0) = $0
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,1) = $PSweepTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,2) = $DownPressRampStartTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,3) = $DownPressRampEndTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,4) = $Profile_Timestamp_10
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,5) = $Profile_Timestamp_20
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,6) = $Profile_Timestamp_30
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,7) = $Profile_Timestamp_40
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,8) = $Profile_Timestamp_50
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,9) = $Profile_Timestamp_60
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,10) = $Profile_Timestamp_70
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,11) = $Profile_Timestamp_80
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,12) = $Profile_Timestamp_90
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,13) = $Profile_Timestamp_100
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,14) = $Profile_Timestamp_110
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,15) = $Profile_Timestamp_120
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,0) = 0
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,1) = $MaxPressure
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,2) = $DownPressRampStartPressure
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,3) = 0
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,4) = 0
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,5) = 0
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,6) = 0
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,7) = 0
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,8) = 0
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,9) = 0
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,10) = 0
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,11) = 0
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,12) = 0
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,13) = 0
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,14) = 0
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,15) = 0
		Set_Activate
	Case = 7
		'Clutch F
		Set TVPSC_D_OVRD_CLC_06_S (12,0)
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,0) = $0
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,1) = $PSweepTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,2) = $DownPressRampStartTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,3) = $DownPressRampEndTime_MS
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,4) = $Profile_Timestamp_10
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,5) = $Profile_Timestamp_20
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,6) = $Profile_Timestamp_30
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,7) = $Profile_Timestamp_40
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,8) = $Profile_Timestamp_50
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,9) = $Profile_Timestamp_60
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,10) = $Profile_Timestamp_70
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,11) = $Profile_Timestamp_80
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,12) = $Profile_Timestamp_90
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,13) = $Profile_Timestamp_100
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,14) = $Profile_Timestamp_110
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,15) = $Profile_Timestamp_120
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,0) = 0
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,1) = $MaxPressure
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,2) = $DownPressRampStartPressure
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,3) = 0
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,4) = 0
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,5) = 0
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,6) = 0
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,7) = 0
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,8) = 0
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,9) = 0
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,10) = 0
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,11) = 0
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,12) = 0
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,13) = 0
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,14) = 0
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,15) = 0
		Set_Activate
	Case = 8
		'Torque Converter Clutch
		Set TVPSC_D_OVRD_TCC_S (12,0)
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,0) = $0
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,1) = $PSweepTime_MS
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,2) = $DownPressRampStartTime_MS
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,3) = $DownPressRampEndTime_MS
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,4) = $Profile_Timestamp_10
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,5) = $Profile_Timestamp_20
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,6) = $Profile_Timestamp_30
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,7) = $Profile_Timestamp_40
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,8) = $Profile_Timestamp_50
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,9) = $Profile_Timestamp_60
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,10) = $Profile_Timestamp_70
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,11) = $Profile_Timestamp_80
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,12) = $Profile_Timestamp_90
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,13) = $Profile_Timestamp_100
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,14) = $Profile_Timestamp_110
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,15) = $Profile_Timestamp_120
		Set_Function_Table TVPSC_P_TST_TCC_T (1,0) = 0
		Set_Function_Table TVPSC_P_TST_TCC_T (1,1) = $MaxPressure
		Set_Function_Table TVPSC_P_TST_TCC_T (1,2) = $DownPressRampStartPressure
		Set_Function_Table TVPSC_P_TST_TCC_T (1,3) = 0
		Set_Function_Table TVPSC_P_TST_TCC_T (1,4) = 0
		Set_Function_Table TVPSC_P_TST_TCC_T (1,5) = 0
		Set_Function_Table TVPSC_P_TST_TCC_T (1,6) = 0
		Set_Function_Table TVPSC_P_TST_TCC_T (1,7) = 0
		Set_Function_Table TVPSC_P_TST_TCC_T (1,8) = 0
		Set_Function_Table TVPSC_P_TST_TCC_T (1,9) = 0
		Set_Function_Table TVPSC_P_TST_TCC_T (1,10) = 0
		Set_Function_Table TVPSC_P_TST_TCC_T (1,11) = 0
		Set_Function_Table TVPSC_P_TST_TCC_T (1,12) = 0
		Set_Function_Table TVPSC_P_TST_TCC_T (1,13) = 0
		Set_Function_Table TVPSC_P_TST_TCC_T (1,14) = 0
		Set_Function_Table TVPSC_P_TST_TCC_T (1,15) = 0
		Set_Activate
End_Select

Screen_Message (Green, Sweeping %%!Element%% pressure.)
'Pause

Wait (2)

'Set File Name
If $DitherType = 2
	Let !File_Name = Dither_VFS_Pressure_Sweep_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (Dither_VFS_Pressure_Sweep_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)
Else
	Let !File_Name = VFS_Pressure_Sweep_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (VFS_Pressure_Sweep_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)		
End	

'Start Vision recorder	
Gosub Record_Start
Wait (4)

'Start profile start switch
Set TVPSC_B_TST_STRT_ALL_S (1,0)

'Wait calculated ramp time + 2 seconds
Wait ($DownPressRampEndTime)
Wait (2)

'End Vision Recorder
Gosub Record_End

'Reset Engine Speed
Gosub Reset_Engine_Speed

'Shift PRNDL to Neutral
If $THMI_ST_PRND_DES ~= 3
	Let $Desired_PRNDL_Position = 2
	Gosub Set_PRNDL_Position
End

'Disable test mode and reset start switch
Set TVPSC_B_TST_STRT_ALL_S (0,0)
Set TVPSC_B_TST_ENBL_S (0,0)

Done_Pressure_Sweep:
End_Sub

'*******************************************************
Sub Run_Pressure_Response
'*******************************************************
 'This subroutine will increment the solenoid pressure through user-defined ranges
Log_Message (Starting Run_Pressure_Response Subroutine)

'Find maximum pressure
Gosub Max_Pressure_Finder

'Increase autotest loop speed to improve detection of slip
Let $PC_Realtime_Rate = 100
Realtime_Rate = $PC_Realtime_Rate

'Set testpoint factors
Let $PRStartPressure = $PressureResponseMatrix ($CurrentRunElement,1)
Let $PRStartTime = $PressureResponseMatrix ($CurrentRunElement,2)
Let $PRLoPressure = $PressureResponseMatrix ($CurrentRunElement,3)
Let $PRHiPressure = $PressureResponseMatrix ($CurrentRunElement,4)

'Log test factors
Log_Message (RunType is %%$RunType%%)
Log_Message (PRStepTime is %%$PRStepTime%%)
Log_Message (PRStepSize is %%$PRStepSize%%)
Log_Message (PRStartPressure is %%$PRStartPressure%%)
Log_Message (PRStartTime is %%$PRStartTime%%)
Log_Message (PRLoPressure is %%$PRLoPressure%%)
Log_Message (PRHiPressure is %%$PRHiPressure%%)
Log_Message (PR_direction is %%$PR_direction%%)
Log_Message (PRHold is %%$PRHold%%)
Log_Message (MaxPressure is %%$MaxPressure%%)

'Log pressure response interrupt information
If $PR_Interrupt_On = 1
	Log_Message (PR_InterruptStepSize is %%$PR_InterruptStepSize%%)
	Log_Message (PR_Interrupt_Wait_Time is %%$PR_Interrupt_Wait_Time%%)	
	Log_Message (PR_Interrupt_Wait_Time is %%$PR_Interrupt_Wait_Time%%)	
	Select_Case $PR_Interrupt_Type
		Case = 1
			'VFS Pressure
			Log_Message (PR_Interrupt_VFSPress is %%$PR_Interrupt_VFSPress%%)	
		Case = 2
			'Line Pressure
			Log_Message (PR_Interrupt_LinePress is %%$PR_Interrupt_LinePress%%)	
		Case = 3
			'Turbine Speed
			Log_Message (PR_Interrupt_Turbine is %%$PR_Interrupt_Turbine%%)
		Case = 4
			'Accelerator Pedal
			Log_Message (PR_Interrupt_Pedal is %%$PR_Interrupt_Pedal%%)
	End_Select		
End

'Ensure pressure commands do not exceed maximum pressure limit
Let $Max_Press_Cmd = $PRHiPressure
If $Max_Press_Cmd > $MaxPressure
	Let $Max_Press_Cmd = $MaxPressure
End

'Set first pressure command
Let $First_Press = $PRLoPressure + $PRStepSize

'Calculate pressure range
Let $Pressure_Range = $PRHiPressure - $First_Press

'Determine number of setpoints
Let $Number_Press_Setpoints = $Pressure_Range / $PRStepSize
Let $Number_Press_Setpoints = $Number_Press_Setpoints + 1
Let $Number_Press_Setpoints_Int = Int ($Number_Press_Setpoints)
Let $Number_Press_Delta = $Number_Press_Setpoints - $Number_Press_Setpoints_Int
If $Number_Press_Delta > 0
	Let $Number_Press_Setpoints = $Number_Press_Setpoints_Int + 1
Else
	Let $Number_Press_Setpoints = $Number_Press_Setpoints_Int
End
Log_Message (Number of Pressure setpoints for run %%$CurrentTestpoint%% is %%$Number_Press_Setpoints%%.)

'Set Line Pressure for all solenoids except Line Pressure Solenoid
If $CurrentRunElement ~= 1
	Set TVPSC_P_CMD_TST_LNP_S ($CurrentRunLine,0)
Else
	Set TVPSC_P_CMD_TST_LNP_S (0,0)
End

'Zero test pressures and set override codes to scalar pressure     
If $CurrentRunElement ~= 8
	Set TVPSC_P_CMD_TST_CLC_01_S (0,0)
	Set TVPSC_P_CMD_TST_CLC_02_S (0,0)
	Set TVPSC_P_CMD_TST_CLC_03_S (0,0)
	Set TVPSC_P_CMD_TST_CLC_04_S (0,0)
	Set TVPSC_P_CMD_TST_CLC_05_S (0,0)
	Set TVPSC_P_CMD_TST_CLC_06_S (0,0)
	Set TVPSC_P_CMD_TST_TCC_S (0,0)
	Set TVPSC_D_OVRD_LNP_S (11,0)
	Set TVPSC_D_OVRD_CLC_01_S (11,0)
	Set TVPSC_D_OVRD_CLC_02_S (11,0)
	Set TVPSC_D_OVRD_CLC_03_S (11,0)
	Set TVPSC_D_OVRD_CLC_04_S (11,0)
	Set TVPSC_D_OVRD_CLC_05_S (11,0)
	Set TVPSC_D_OVRD_CLC_06_S (11,0)
	Set TVPSC_D_OVRD_TCC_S (11,0)
Else
	Set TVPSC_D_OVRD_TCC_S (11,0)
	Set TVPSC_D_OVRD_LNP_S (11,0)
End

'Check engine speed and start engine if not running
Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2
If $TCRPM_NE_BAR_AVE2 < 100
	Gosub Start_Engine
End

'Calculate output speed 
Let $Output_Speed_Target = $CurrentRunTurbine

'For torque converter clutch, ensure that transmission is in Overdrive
'Set speed or speed/torque
If $CurrentRunElement = 9
	If $CurrentRunTorque ~= 0
		Let $THMI_ST_PRND_DES = THMI_ST_PRND_DES
		If $THMI_ST_PRND_DES ~= 4
			Let $Desired_PRNDL_Position = 4
			Gosub Set_PRNDL_Position
			Wait (2)
		End
		'Set gear
		Let $Hold_Gear = 7
		
		'Set output speed and engine torque
		Gosub Set_Speed_Load
	End
Else
	Gosub Set_Engine_Speed
End
Wait (5)

'Start engine speed monitor
Monitor_On Engine_Running
Log_Message (Starting Engine_Running monitor. Run_Pressure_Sweep.)
Wait (2)

'Set TRAM_Set flag to reset PCM parameters if test shuts down
Let $TRAM_Set = 1
Log_Message (TRAM_Set set to 1)

'Disable OBDII
Set OBDII_TST_SW (0,0)

'Enable test mode
Set TVPSC_B_TST_ENBL_S (1,0)

Wait (2)

'Set File Name
If $DitherType = 2
	Let !File_Name = Dither_VFS_Pressure_Response_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (Dither_VFS_Pressure_Response_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)
Else
	Let !File_Name = VFS_Pressure_Response_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (VFS_Pressure_Response_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)		
End

'Start Vision recorder
Gosub Record_Start

Wait (4)

'Set preboost pressure if enabled 
If $PR_Preboost_On = 1
	Select_Case $CurrentRunElement
		Case = 1
			'Line Pressure
			Set TVPSC_P_CMD_TST_LNP_S ($PR_Preboost_Setpoint,0)
		Case = 2
			'Clutch A
			Set TVPSC_P_CMD_TST_CLC_01_S ($PR_Preboost_Setpoint,0)
		Case = 3
			'Clutch B
			Set TVPSC_P_CMD_TST_CLC_02_S ($PR_Preboost_Setpoint,0)
		Case = 4
			'Clutch C
			Set TVPSC_P_CMD_TST_CLC_03_S ($PR_Preboost_Setpoint,0)
		Case = 5
			'Clutch D
			Set TVPSC_P_CMD_TST_CLC_04_S ($PR_Preboost_Setpoint,0)
		Case = 6
			'Clutch E
			Set TVPSC_P_CMD_TST_CLC_05_S ($PR_Preboost_Setpoint,0)
		Case = 7
			'Clutch F
			Set TVPSC_P_CMD_TST_CLC_06_S ($PR_Preboost_Setpoint,0)
		Case = 8
			'TCC
			Set TVPSC_P_CMD_TST_TCC_S ($PR_Preboost_Setpoint,0)
	End_Select
End
Wait (0.1)

'Set Pressure to 0
Select_Case $CurrentRunElement
	Case = 1
		'Line Pressure
		Set TVPSC_P_CMD_TST_LNP_S ($PRStartPressure,0)
	Case = 2
		'Clutch A
		Set TVPSC_P_CMD_TST_CLC_01_S ($PRStartPressure,0)
	Case = 3
		'Clutch B
		Set TVPSC_P_CMD_TST_CLC_02_S ($PRStartPressure,0)
	Case = 4
		'Clutch C
		Set TVPSC_P_CMD_TST_CLC_03_S ($PRStartPressure,0)
	Case = 5
		'Clutch D
		Set TVPSC_P_CMD_TST_CLC_04_S ($PRStartPressure,0)
	Case = 6
		'Clutch E
		Set TVPSC_P_CMD_TST_CLC_05_S ($PRStartPressure,0)
	Case = 7
		'Clutch F
		Set TVPSC_P_CMD_TST_CLC_06_S ($PRStartPressure,0)
	Case = 8
		'TCC
		Set TVPSC_P_CMD_TST_TCC_S ($PRStartPressure,0)
End_Select

'Wait for start time
Wait ($PRStartTime)

'Zero step counter
Let $Step_Counter = 0

'Start Pressure Response control loop
Do
	Let $Loop_Start = Timer
	'Increment step counter
	Let $Step_Counter = $Step_Counter + 1
	'Set last pressure command for comparator
	Let $Last_VFS_Press = $VFS_Press_Cmd
	'Calculate pressure command
	Let $VFS_Press_Cmd = $VFS_Press_Cmd + $PRStepSize
	'Limit pressure command to low pressure setting
	If $VFS_Press_Cmd < $PRLoPressure
		Let $VFS_Press_Cmd = $PRLoPressure
	End
	'Limit pressure command to maximum pressure setting
	If $VFS_Press_Cmd > $Max_Press_Cmd
		Let $VFS_Press_Cmd = $Max_Press_Cmd
	End
	'Set first step pressure command to low pressure value
	If $Step_Counter = 1
		Let $VFS_Press_Cmd = $PRLoPressure
	End
	'Set Pressure command using test function
	Select_Case $CurrentRunElement
		Case = 1
			'Line Pressure
			Set TVPSC_P_CMD_TST_LNP_S ($VFS_Press_Cmd,0)
		Case = 2
			'Clutch A
			Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
		Case = 3
			'Clutch B
			Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
		Case = 4
			'Clutch C
			Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
		Case = 5
			'Clutch D
			Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
		Case = 6
			'Clutch E
			Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
		Case = 7
			'Clutch F
			Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
		Case = 8
			'TCC
			Set TVPSC_P_CMD_TST_TCC_S ($VFS_Press_Cmd,0)
	End_Select
	Screen_Message (Green,%%New_Line%%Setting %%!Element%% pressure to %%$VFS_Press_Cmd,2D%%kpa)
	Log_Message (%%!Element%% pressure to %%$VFS_Press_Cmd,2D%%kpa. step %%$Step_Counter%% of %%$Number_Press_Setpoints%%.)
	'Calculate loop time
	Let $Loop_Time = Timer - $Loop_Start
	'Calculate and apply wait time
	If $Loop_Time < $PRStepTime
		Let $Wait_Time = $PRStepTime - $Loop_Time
		Wait ($Wait_Time)
	End
	'Apply Pressure Response interruption command 
	If $PR_Interrupt_On = 1
		Select_Case $PR_Interrupt_Type 
			Case = 1
				'VFS Pressure
				Let $VFS_Interrupt_Cmd = $VFS_Press_Cmd + $PR_InterruptStepSize
				Select_Case $CurrentRunElement
					Case = 2
						'Clutch A
						Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Interrupt_Cmd,0)
					Case = 3
						'Clutch B
						Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Interrupt_Cmd,0)
					Case = 4
						'Clutch C
						Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Interrupt_Cmd,0)
					Case = 5
						'Clutch D
						Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Interrupt_Cmd,0)
					Case = 6
						'Clutch E
						Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Interrupt_Cmd,0)
					Case = 7
						'Clutch F
						Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Interrupt_Cmd,0)
				End_Select	
			Case = 2
				'Line Pressure
				Let $PR_Line_Pressure_Cmd = $CurrentRunLine + $PR_Interrupt_LinePress
				Set TVPSC_P_CMD_TST_LNP_S ($PR_Line_Pressure_Cmd,0)
			Case = 3
				'Turbine Speed
				If $CurrentRunElement ~= 9
					Let $Output_Speed_Target = $CurrentRunTurbine + $PR_Interrupt_Turbine
					Gosub Set_Engine_Speed
				End	
			Case = 4
				'Pedal
				Set Pedal_Position_Cmd ($PR_Interrupt_Pedal,0)
		End_Select	
		'Apply wait period
		Wait ($PR_Interrupt_Wait_Time)
		'Return to baseline
		Select_Case $PR_Interrupt_Type 
			Case = 1
				'VFS Pressure
				Select_Case $CurrentRunElement
					Case = 1
						'Line Pressure
						Set TVPSC_P_CMD_TST_LNP_S ($VFS_Press_Cmd,0)
					Case = 2
						'Clutch A
						Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Case = 3
						'Clutch B
						Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
					Case = 4
						'Clutch C
						Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
					Case = 5
						'Clutch D
						Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
					Case = 6
						'Clutch E
						Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
					Case = 7
						'Clutch F
						Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
					Case = 8
						'TCC
						Set TVPSC_P_CMD_TST_TCC_S ($VFS_Press_Cmd,0)
				End_Select
			Case = 2
				'Line Pressure
				Let $PR_Line_Pressure_Cmd = $CurrentRunLine + $PR_Interrupt_LinePress
				Set TVPSC_P_CMD_TST_LNP_S ($CurrentRunLine,0)
			Case = 3
				'Turbine Speed
				If $CurrentRunElement ~= 8
					Let $Output_Speed_Target = $CurrentRunTurbine
					Gosub Set_Engine_Speed
				End	
			Case = 4
				'Accelerator Pedal
				Set Pedal_Position_Cmd (0,0)
		End_Select
		'Apply second wait time
		Wait ($Wait_Time)
	End
	'Exit loop when all pressure steps have been completed
	If $Step_Counter = $Number_Press_Setpoints Then Goto Done_PR_Up:
Loop

Done_PR_Up:
'If step-up only, skip to end
If $PR_direction ~= 1 Then Goto Done_PR_Down:
'Wait hold time
Wait ($PR_hold)

'Reset step counter
Let $Step_Counter = 0

'Determine number of down steps
Let $Total_Down_Setpoints = $Number_Press_Setpoints

'Start step-down pressure response control loop
Do
	Let $Loop_Start = Timer
	'Increment step counter
	Let $Step_Counter = $Step_Counter + 1
	'Calculate pressure command
	Let $VFS_Press_Cmd = $VFS_Press_Cmd - $PRStepSize
	'Limit pressure command to low pressure setting
	If $VFS_Press_Cmd < $PRLoPressure
		Let $VFS_Press_Cmd = $PRLoPressure
	End
	'Limit pressure command to maximum pressure setting
	If $VFS_Press_Cmd > $Max_Press_Cmd
		Let $VFS_Press_Cmd = $Max_Press_Cmd
	End
	'Ensure first step pressure command is same as last pressure command from step-up
	If $Step_Counter = 1
		Let $VFS_Press_Cmd = $Last_VFS_Press
	End
	'Apply pressure command via test function
	Select_Case $CurrentRunElement
		Case = 1
			'Line Pressure
			Set TVPSC_P_CMD_TST_LNP_S ($VFS_Press_Cmd,0)
		Case = 2
			'Clutch A
			Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
		Case = 3
			'Clutch B
			Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
		Case = 4
			'Clutch C
			Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
		Case = 5
			'Clutch D
			Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
		Case = 6
			'Clutch E
			Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
		Case = 7
			'Clutch F
			Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
		Case = 8
			'TCC
			Set TVPSC_P_CMD_TST_TCC_S ($VFS_Press_Cmd,0)
	End_Select
	Screen_Message (Green,%%New_Line%%Setting %%!Element%% pressure to %%$VFS_Press_Cmd,0D%%kpa)
	Log_Message (%%!Element%% pressure to %%$VFS_Press_Cmd,2D%%kpa. step %%$Step_Counter%% of %%$Total_Down_Setpoints%%.)
	'Calculate loop time
	Let $Loop_Time = Timer - $Loop_Start
	'Calculate and apply wait time
	If $Loop_Time < $PRStepTime
		If $Step_Counter = $Total_Down_Setpoints
			Let $Wait_Time = $PRStartTime
		Else
			Let $Wait_Time = $PRStepTime - $Loop_Time
		End
		Wait ($Wait_Time)
	End
	'Apply Pressure Response interruption command 
	If $PR_Interrupt_On = 1
		Select_Case $PR_Interrupt_Type 
			Case = 1
			'VFS Pressure
				Let $VFS_Interrupt_Cmd = $VFS_Press_Cmd + $PR_InterruptStepSize
				Select_Case $CurrentRunElement
					Case = 2
						'Clutch A
						Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Interrupt_Cmd,0)
					Case = 3
						'Clutch B
						Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Interrupt_Cmd,0)
					Case = 4
						'Clutch C
						Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Interrupt_Cmd,0)
					Case = 5
						'Clutch D
						Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Interrupt_Cmd,0)
					Case = 6
						'Clutch E
						Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Interrupt_Cmd,0)
					Case = 7
						'Clutch F
						Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Interrupt_Cmd,0)
				End_Select	
		Case = 2
			'Line Pressure
			Let $PR_Line_Pressure_Cmd = $CurrentRunLine + $PR_Interrupt_LinePress
			Set TVPSC_P_CMD_TST_LNP_S ($PR_Line_Pressure_Cmd,0)
		Case = 3
			'Turbine Speed
			If $CurrentRunElement ~= 8
				Let $Output_Speed_Target = $CurrentRunTurbine + $PR_Interrupt_Turbine
				Gosub Set_Engine_Speed
			End	
		Case = 4
			'Accelerator Pedal
			Set Pedal_Position_Cmd ($PR_Interrupt_Pedal,0)
		End_Select
		'Apply interrupt wait time		
		Wait ($PR_Interrupt_Wait_Time)
		Select_Case $PR_Interrupt_Type 
			Case = 1
				'VFS Pressure
				Select_Case $CurrentRunElement
					Case = 2
						'Clutch A
						Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Case = 3
						'Clutch B
						Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
					Case = 4
						'Clutch C
						Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
					Case = 5
						'Clutch D
						Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
					Case = 6
						'Clutch E
						Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
					Case = 7
						'Clutch F
						Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
				End_Select
			Case = 2
				'Line Pressure
				Let $PR_Line_Pressure_Cmd = $CurrentRunLine + $PR_Interrupt_LinePress
				Set TVPSC_P_CMD_TST_LNP_S ($CurrentRunLine,0)
			Case = 3
				'Turbine Speed
				If $CurrentRunElement ~= 9
					Let $Output_Speed_Target = $CurrentRunTurbine
					Gosub Set_Engine_Speed
				End	
			Case = 4
				'Accelerator Pedal
				Set Pedal_Position_Cmd (0,0)
		End_Select
		'Apply second wait time
		Wait ($Wait_Time)
	End
	'Exit loop when all down pressure steps have been completed
	If $Step_Counter = $Total_Down_Setpoints Then Goto Done_PR_Down:
Loop

Done_PR_Down:
'Reset test pressure command functions
Select_Case $CurrentRunElement
	Case = 1
		'Line Pressure
		Set TVPSC_P_CMD_TST_LNP_S (0,0)
	Case = 2
		'Clutch A
		Set TVPSC_P_CMD_TST_CLC_01_S (0,0)
	Case = 3
		'Clutch B
		Set TVPSC_P_CMD_TST_CLC_02_S (0,0)
	Case = 4
		'Clutch C
		Set TVPSC_P_CMD_TST_CLC_03_S (0,0)
	Case = 5
		'Clutch D
		Set TVPSC_P_CMD_TST_CLC_04_S (0,0)
	Case = 6
		'Clutch E
		Set TVPSC_P_CMD_TST_CLC_05_S (0,0)
	Case = 7
		'Clutch F
		Set TVPSC_P_CMD_TST_CLC_06_S (0,0)
	Case = 8
		'TCC
		Set TVPSC_P_CMD_TST_TCC_S (0,0)
End_Select

Wait (5)

'End Vision Recorder
Gosub Record_End

'Disable test mode and reset start switch
Set TVPSC_B_TST_STRT_ALL_S (0,0)
Set TVPSC_B_TST_ENBL_S (0,0)
Gosub Reset_Engine_Speed

'Stop powertrain
Gosub Slowdown

'Shift PRNDL to Neutral
If $THMI_ST_PRND_DES ~= 3
	Let $Desired_PRNDL_Position = 2
	Gosub Set_PRNDL_Position
End

'Return Autotest loop rate to baseline
Let $PC_Realtime_Rate = 10
Realtime_Rate = $PC_Realtime_Rate

End_Sub
'*******************************************************
Sub Run_Bar_Graph
'*******************************************************
 'This subroutine will increment the solenoid pressure through user-defined ranges
Log_Message (Starting Run_Bar_Graph Subroutine)

'Find maximum pressure
Gosub Max_Pressure_Finder

'Increase autotest loop rate for faster detection of slip
Let $PC_Realtime_Rate = 100
Realtime_Rate = $PC_Realtime_Rate

'Set test factors
Let $StartPressure = $BarGraphMatrix ($CurrentRunElement,1)
Let $StartTime = $BarGraphMatrix ($CurrentRunElement,2)
Let $LowPressure = $BarGraphMatrix ($CurrentRunElement,3)
Let $HighPressure = $BarGraphMatrix ($CurrentRunElement,4)

'Log test factors
Log_Message (RunType is %%$RunType%%)
Log_Message (BarGraphDirection is %%$BarGraphDirection%%)
Log_Message (BarGraphStepSize is %%$BarGraphStepSize%%)
Log_Message (BarGraphStepTime is %%$BarGraphStepTime%%)
Log_Message (StartPressure is %%$StartPressure%%)
Log_Message (StartTime is %%$StartTime%%)
Log_Message (LowPressure is %%$LowPressure%%)
Log_Message (HighPressure is %%$HighPressure%%)
Log_Message (MaxPressure is %%$MaxPressure%%)

'Limit pressure command to max pressure value
Let $Max_Press_Cmd = $HighPressure
If $Max_Press_Cmd > $MaxPressure
	Let $Max_Press_Cmd = $MaxPressure
End
'Set pressure command for first step
Let $First_Press = $LowPressure + $BarGraphStepSize
'Define pressure range
Let $Pressure_Range = $Max_Press_Cmd - $First_Press
'Determine number of pressure steps
Let $Number_Press_Setpoints = $Pressure_Range / $BarGraphStepSize
Let $Number_Press_Setpoints = $Number_Press_Setpoints + 1
Let $Number_Press_Setpoints_Int = Int ($Number_Press_Setpoints)
Let $Number_Press_Delta = $Number_Press_Setpoints - $Number_Press_Setpoints_Int
If $Number_Press_Delta > 0
	Let $Number_Press_Setpoints = $Number_Press_Setpoints_Int + 1
Else
	Let $Number_Press_Setpoints = $Number_Press_Setpoints_Int
End
Log_Message (Number of Pressure setpoints for run %%$Current_Testpoint%% is %%$Number_Press_Setpoints%%.)

'Check engine speed and start engine if not running
Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2
If $TCRPM_NE_BAR_AVE2 < 100
	If $Vehicle_Flag = 1
		'Prompt driver to start engine
		Screen_Message (Yellow,Please start engine and press 'Resume Test' when ready)
		Pause
	Else
		'Start engine automatically
		Gosub Start_Engine
	End	
End 

'Set File Name
If $BarGraphDirection = 0
	'Low to High
	If $DitherType = 2
		Let !File_Name = Dither_VFS_Pressure_Bar-Graph_Low-to-High_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
		File_Name (Dither_VFS_Pressure_Bar-Graph_Low-to-High_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)
	Else
		Let !File_Name = VFS_Pressure_Bar-Graph_Low-to-High_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
		File_Name (VFS_Pressure_Bar-Graph_Low-to-High_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)		
	End	
Else
	'High to Low
	If $DitherType = 2
		Let !File_Name = Dither_VFS_Pressure_Bar-Graph_High-to-Low_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
		File_Name (Dither_VFS_Pressure_Bar-Graph_High-to-Low_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)
	Else
		Let !File_Name = VFS_Pressure_Bar-Graph_High-to-Low_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
		File_Name (VFS_Pressure_Bar-Graph_High-to-Low_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)		
	End	
End
' Screen_Message (Yellow,start recorder)
' Pause

'Start Vision recorder
Gosub Record_Start
Wait (4)

'Set TRAM_Set flag to reset PCM parameters if test shuts down
Let $TRAM_Set = 1
Log_Message (TRAM_Set set to 1)

'Set Line Pressure for all solenoids except Line Pressure Solenoid
If $CurrentRunElement ~= 1
	Set TVPSC_P_CMD_TST_LNP_S ($CurrentRunLine,0)
Else
	Set TVPSC_P_CMD_TST_LNP_S (0,0)      
End

'Zero all pressure command functions
Set TVPSC_P_CMD_TST_CLC_01_S (0,0)
Set TVPSC_P_CMD_TST_CLC_02_S (0,0)
Set TVPSC_P_CMD_TST_CLC_03_S (0,0)
Set TVPSC_P_CMD_TST_CLC_04_S (0,0)
Set TVPSC_P_CMD_TST_CLC_05_S (0,0)
Set TVPSC_P_CMD_TST_CLC_06_S (0,0)
Set TVPSC_P_CMD_TST_TCC_S (0,0)

'Set test override code to oncoming scalar pressure
Set TVPSC_D_OVRD_LNP_S (11,0)
Set TVPSC_D_OVRD_CLC_01_S (11,0)
Set TVPSC_D_OVRD_CLC_02_S (11,0)
Set TVPSC_D_OVRD_CLC_03_S (11,0)
Set TVPSC_D_OVRD_CLC_05_S (11,0)
Set TVPSC_D_OVRD_CLC_06_S (11,0)
Set TVPSC_D_OVRD_TCC_S (11,0)

'Set test override code to high gain oncoming scalar pressure
Select_Case $Trans_Select 
	Case = 3
		'10R140
		If $CurrentRunLine >= 1200
			Set TVPSC_D_OVRD_CLC_04_S (41,0)
			Set TVPSC_D_OVRD_CLC_05_S (41,0)
		End	
	Case = 6
		'10R60/80
		If $CurrentRunLine >= 1200
			Set TVPSC_D_OVRD_CLC_04_S (41,0)
			Set TVPSC_D_OVRD_CLC_05_S (41,0)
		End	
	Case = 8
		'6R80
		If $CurrentRunLine >= 1200
			Set TVPSC_D_OVRD_CLC_04_S (41,0)
			Set TVPSC_D_OVRD_CLC_05_S (41,0)
		End	
End_Select
		
'Apply holding clutches if enabled
If $BarGraph_HoldClutch = 1
	Select_Case $Trans_Select 
		Case = 2
			'8F24
			Select_Case $CurrentRunElement
				Case = 2
					'Clutch A
				
				Case = 3
					'Clutch B
					Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)				
				Case = 4
					'Clutch C
					Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
				Case = 5
					'Clutch D

				Case = 6
					'Clutch E
					Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)				
				Case = 7
					'Clutch F
					Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
			End_Select
		Case = 3
			'10R140	
			Select_Case $CurrentRunElement
				Case = 2
					'Clutch A
					'Old 3 Clutch Neutral
					'Set TVPSC_P_CMD_TST_CLC_04_S ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($CurrentRunLine,0)				
				Case = 3
					'Clutch B
					'Old 3 Clutch Neutral
					'Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_06_S ($CurrentRunLine,0)				
				Case = 4
					'Clutch C
					'Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_02_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_06_S  ($CurrentRunLine,0)
				Case = 5
					'Clutch D
					 Set RMSC_D_GR_TYP_SW_S (1,0)
					 Set RMSC_GR_TYP_CMD_S (3,0)
					'Old 3 Clutch Neutral
					'Set TVPSC_P_CMD_TST_CLC_02_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_03_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_05_S  ($CurrentRunLine,0)
				Case = 6
					'Clutch E
					 Set RMSC_D_GR_TYP_SW_S (1,0)
					 Set RMSC_GR_TYP_CMD_S (3,0)
					'Old 3 Clutch Neutral
					'Set TVPSC_P_CMD_TST_CLC_02_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_03_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_04_S  ($CurrentRunLine,0)				
				Case = 7
					'Clutch F
					'Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_02_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_03_S  ($CurrentRunLine,0)
			End_Select
		Case = 4
			'8F57
			Select_Case $CurrentRunElement
				Case = 2
					'Clutch A
				
				Case = 3
					'Clutch B
					Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)				
				Case = 4
					'Clutch C
					Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
				Case = 5
					'Clutch D

				Case = 6
					'Clutch E
					Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)				
				Case = 7
					'Clutch F
					Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
			End_Select
		Case = 6
			'10R60/80
			Select_Case $CurrentRunElement
				Case = 2
					'Clutch A
					'Old 3 Clutch Neutral
					'Set TVPSC_P_CMD_TST_CLC_04_S ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($CurrentRunLine,0)				
				Case = 3
					'Clutch B
					'Old 3 Clutch Neutral
					'Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_06_S ($CurrentRunLine,0)				
				Case = 4
					'Clutch C
					'Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_02_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_06_S  ($CurrentRunLine,0)
				Case = 5
					'Clutch D
					 Set RMSC_D_GR_TYP_SW_S (1,0)
					 Set RMSC_GR_TYP_CMD_S (3,0)
					'Old 3 Clutch Neutral
					'Set TVPSC_P_CMD_TST_CLC_02_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_03_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_05_S  ($CurrentRunLine,0)
				Case = 6
					'Clutch E
					 Set RMSC_D_GR_TYP_SW_S (1,0)
					 Set RMSC_GR_TYP_CMD_S (3,0)
					'Old 3 Clutch Neutral
					'Set TVPSC_P_CMD_TST_CLC_02_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_03_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_04_S  ($CurrentRunLine,0)				
				Case = 7
					'Clutch F
					'Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_02_S  ($CurrentRunLine,0)
					Set TVPSC_P_CMD_TST_CLC_03_S  ($CurrentRunLine,0)
			End_Select
		Case = 7
			'8F35	
			Select_Case $CurrentRunElement
				Case = 1
					'Line Pressure
					Set TVPSC_P_CMD_TST_LNP_S ($CurrentRunLine,0)
				Case = 2
					'Clutch A
					Set TVPSC_P_CMD_TST_CLC_03_S ($CurrentRunLine,0)
				Case = 3
					'Clutch B
					Set TVPSC_P_CMD_TST_CLC_05_S ($CurrentRunLine,0)
				Case = 4
					'Clutch C
					Set TVPSC_P_CMD_TST_CLC_05_S  ($CurrentRunLine,0)
				Case = 5
					'Clutch D
					Let $Desired_A_Press = $CurrentRunLine
					Gosub Ramp_A_Clutch
				Case = 6
					'Clutch E
					Set TVPSC_P_CMD_TST_CLC_06_S  ($CurrentRunLine,0)
				Case = 7
					'Clutch F
					Let $Desired_A_Press = $CurrentRunLine
					Gosub Ramp_A_Clutch
			End_Select
		Case = 8
			'6R80
			Select_Case $CurrentRunElement
				Case = 2
					'Clutch A
					Set TVPSC_P_CMD_TST_CLC_04_S ($CurrentRunLine,0)				
				Case = 3
					'Clutch B
					Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)				
				Case = 4
					'Clutch C
					Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
				Case = 5
					'Clutch D
					Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
				Case = 6
					'Clutch E
					Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)			
			End_Select			
	End_Select
End	
	
'Set TRAM_Set to reset PCM parameters to base in case of shutdown
Let $TRAM_Set = 1
Log_Message (TRAM_Set set to 1.)
Log_Message (Starting Engine_Running monitor. Run_Bar_Graph.)

'Disable OBDII
Set OBDII_TST_SW (0,0)

'Enable test mode
Set TVPSC_B_TST_ENBL_S (1,0)
	
'Skip turbine speed check in-vehicle
If $Vehicle_Flag = 1 
	Monitor_On Engine_Running
	Log_Message (Starting Engine_Running monitor. Run_Bar_Graph.)
	
	'Proceed to bar graph test
	Goto Proceed_BarGraph:
End	

'Set output speed
If $CurrentRunOutputSpeed > 0
	Gosub Set_Output_Speed
Else
	'Set engine speed
	Gosub Set_Engine_Speed	
End

Wait (5)

'For debugging purposes
' Screen_Message (Yellow,%%New_Line%%%%New_Line%%Observe engine and output speeds. Press resume to continue bar graph)
' Pause

'Start engine speed monitor
Monitor_On Engine_Running
Log_Message (Starting Engine_Running monitor. Run_Bar_Graph.)

'Enable test mode
Set TVPSC_B_TST_ENBL_S (1,0)

Wait (2)

'Initialize timers
Let $Elapsed_Engine_Settle_Time = 0
Let $Engine_Settle_Start = Timer
Let $Engine_Settle_Time_Limit = 30

'Establish turbine speed thresholds
Let $Engine_Threshold_Low = $CurrentRunTurbine - 100
Let $Engine_Threshold_High = $CurrentRunTurbine + 100

'Start turbine speed check control loop
Do
	Let $Elapsed_Engine_Settle_Time = Timer - $Engine_Settle_Start
	'Check 2 second average turbine speed
	Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2
	'If within threshold range, exit speed check loop
	If $TCRPM_NE_BAR_AVE2 > $Engine_Threshold_Low
		If $TCRPM_NE_BAR_AVE2 < $Engine_Threshold_High
			Goto Proceed_BarGraph:
		End
	End
	'Log average speed if speed check times out. Proceed to test anyway until a better speed check can be developed.
	If $Elapsed_Engine_Settle_Time > $Engine_Settle_Time_Limit
		Log_Message (Engine Speed of %%$CurrentRunTurbine%% could not be properly set for %%$Current_Testpoint%%. Average turbine speed was %%$TCRPM_NE_BAR_AVE2,0D%%rpm. Proceeding with testpoint.)
		Goto Proceed_BarGraph:
	End
	Wait (1)
Loop

Proceed_BarGraph:

'Measure average slip
Let $TCCALC_N_SLP_ACT_AVE2 = TCCALC_N_SLP_ACT_AVE2
'Calculate slip threshold and establish baseline slip
Let $Slip_Threshold = $TCCALC_N_SLP_ACT_AVE2 + 50
Let $BaseSlip = $TCCALC_N_SLP_ACT_AVE2
Log_Message (Slip_Threshold is %%$Slip_Threshold,0D%%)

'Measure average turbine speed
Let $TCRPM_NT_BAR_AVE2 = TCRPM_NT_BAR_AVE2
'Calculate turbine speed threshold
Let $Turbine_Threshold = $TCRPM_NT_BAR_AVE2 - 100
Log_Message (Turbine_Threshold is %%$Turbine_Threshold,0D%%)

'Initialize high slip and turbine speed flags
Let $StopTurbine_Flag = 0
Let $TCCALC_N_SLP_ACT_high_flag = 0

'Apply torque converter if enabled
If $BarGraph_TCC_On = 1
	Gosub Lock_Converter
	Wait (3)	
	'MeasurClutch E slip
	Select_Case $CurrentRunElement
		Case = 2
			'Clutch A
			Let $ClutchSlip_Base = SAUTL_N_CLC_SLP[1]_2AVE
		Case = 3
			'Clutch B
			Let $ClutchSlip_Base = SAUTL_N_CLC_SLP[2]_2AVE
		Case = 4
			'Clutch C
			Let $ClutchSlip_Base = SAUTL_N_CLC_SLP[3]_2AVE
		Case = 5
			'Clutch D
			Let $ClutchSlip_Base = SAUTL_N_CLC_SLP[6]_2AVE
		Case = 6
			'Clutch E
			Let $ClutchSlip_Base = SAUTL_N_CLC_SLP[5]_2AVE
		Case = 7
			'Clutch F
			Let $ClutchSlip_Base = SAUTL_N_CLC_SLP[6]_2AVE
	End_Select
	'Calculate slip thresholds
	Let $ClutchSlip_Threshold_Low = $ClutchSlip_Base - 50
	Let $ClutchSlip_Threshold_High = $ClutchSlip_Base + 50
	Log_Message ((ClutchSlip_Threshold_Low is %%$ClutchSlip_Threshold_Low,0D%%. ClutchSlip_Threshold_High is %%$ClutchSlip_Threshold_High,0D%%.)
	'Start clutch slip monitor
	Monitor_On Clutch_Slip
	Log_Message (Starting Clutch_Slip monitor. Run_Bar_Graph.)
End

'Start turbine speed monitor if holding clutches are applied
If $BarGraph_HoldClutch = 1
	Monitor_On Turbine
	Log_Message (Starting Turbine monitor. Run_Bar_Graph)
End

'Set Line Pressure Clip 
If $CurrentRunLine < 1300
   Set_Function_Table SAPRC_P_LNP_GR_TYP_MIN_V = 200
   Set_Activate
Else
   Set_Function_Table SAPRC_P_LNP_GR_TYP_MIN_V = 1400
   Set_Activate
End

'Set initial pressure command
Let $VFS_Press_Cmd = $StartPressure

Wait (2)
'Screen_Message (Yellow,check turbine)
'Pause

'Apply starting pressure command
Select_Case $CurrentRunElement
	Case = 1
		'Line Pressure
		Set TVPSC_P_CMD_TST_LNP_S ($VFS_Press_Cmd,0)
	Case = 2
		'Clutch A
		Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
	Case = 3
		'Clutch B
		Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
	Case = 4
		'Clutch C
		Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
	Case = 5
		'Clutch D
		Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
	Case = 6
		'Clutch E
		Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
	Case = 7
		'Clutch F
		Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
	Case = 8
		'TCC
		Set TVPSC_P_CMD_TST_TCC_S ($VFS_Press_Cmd,0)
End_Select

'Apply start time wait
Wait ($StartTime)

'Initialize step counter and turbine speed flag
Let $StopTurbine_Flag = 0
Let $Step_Counter = 0

'Start Bar Graph control loop
Do
	Let $Loop_Start = Timer
	'Increment step counter
	Let $Step_Counter = $Step_Counter + 1
	'Calculate pressure command
	If $BarGraphDirection = 0
		'Low to High
		Let $VFS_Press_Cmd = $VFS_Press_Cmd + $BarGraphStepSize
	Else
		'High to Low
		Let $VFS_Press_Cmd = $VFS_Press_Cmd - $BarGraphStepSize
	End		
	'Set first pressure command to low pressure setting (low to high) or high pressure setting (high to low)
	If $Step_Counter = 1
		If $BarGraphDirection = 0
			'Low to High
			Let $VFS_Press_Cmd = $LowPressure
		Else
			'High to Low
			Let $VFS_Press_Cmd = $HighPressure
		End	
	End
	'Apply pressure command via test function
	Select_Case $CurrentRunElement
		Case = 1
			'Line Pressure
			Set TVPSC_P_CMD_TST_LNP_S ($VFS_Press_Cmd,0)
		Case = 2
			'Clutch A
			Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
		Case = 3
			'Clutch B
			Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
		Case = 4
			'Clutch C
			Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
		Case = 5
			'Clutch D
			Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
		Case = 6
			'Clutch E
			Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
		Case = 7
			'Clutch F
			Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
		Case = 8
			'TCC
			Set TVPSC_P_CMD_TST_TCC_S ($VFS_Press_Cmd,0)
	End_Select
	'Set last pressure command as a comparator
	Let $Last_VFS_Press_Cmd = $VFS_Press_Cmd
	Screen_Message (Green,%%New_Line%%Increasing %%!Element%% pressure to %%$VFS_Press_Cmd,2D%%kpa)
	Log_Message (%%!Element%% pressure to %%$VFS_Press_Cmd,2D%%kpa. step %%$Step_Counter%% of %%$Number_Press_Setpoints%%.)
	'Calculate loop time
	Let $Loop_Time = Timer - $Loop_Start
	'Calculate and apply wait time
	If $Loop_Time < $BarGraphStepTime
		Let $Wait_Time = $BarGraphStepTime - $Loop_Time
		Wait ($Wait_Time)
		'Return pressure command to start pressure (low to high) or high pressure (high to low)
		If $BarGraphDirection = 0
			'Low to High
			Select_Case $CurrentRunElement
				Case = 1
					'Line Pressure
					Set TVPSC_P_CMD_TST_LNP_S ($StartPressure,0)
				Case = 2
					'Clutch A
					Set TVPSC_P_CMD_TST_CLC_01_S ($StartPressure,0)
				Case = 3
					'Clutch B
					Set TVPSC_P_CMD_TST_CLC_02_S ($StartPressure,0)
				Case = 4
					'Clutch C
					Set TVPSC_P_CMD_TST_CLC_03_S ($StartPressure,0)
				Case = 5
					'Clutch D
					Set TVPSC_P_CMD_TST_CLC_04_S ($StartPressure,0)
				Case = 6
					'Clutch E
					Set TVPSC_P_CMD_TST_CLC_05_S ($StartPressure,0)
				Case = 7
					'Clutch F
					Set TVPSC_P_CMD_TST_CLC_06_S ($StartPressure,0)
				Case = 8
					'TCC
					Set TVPSC_P_CMD_TST_TCC_S ($StartPressure,0)
			End_Select			
		Else
			'High to Low
			Select_Case $CurrentRunElement
				Case = 1
					'Line Pressure
					Set TVPSC_P_CMD_TST_LNP_S ($HighPressure,0)
				Case = 2
					'Clutch A
					Set TVPSC_P_CMD_TST_CLC_01_S ($HighPressure,0)
				Case = 3
					'Clutch B
					Set TVPSC_P_CMD_TST_CLC_02_S ($HighPressure,0)
				Case = 4
					'Clutch C
					Set TVPSC_P_CMD_TST_CLC_03_S ($HighPressure,0)
				Case = 5
					'Clutch D
					Set TVPSC_P_CMD_TST_CLC_04_S ($HighPressure,0)
				Case = 6
					'Clutch E
					Set TVPSC_P_CMD_TST_CLC_05_S ($HighPressure,0)
				Case = 7
					'Clutch F
					Set TVPSC_P_CMD_TST_CLC_06_S ($HighPressure,0)
				Case = 8
					'TCC
					Set TVPSC_P_CMD_TST_TCC_S ($HighPressure,0)
			End_Select			
		End	
		'Calculate and apply wait time
		If $Loop_Time < $StartTime
			Let $Wait_Time = $StartTime - $Loop_Time
		End
		Wait ($Wait_Time)
	End
	'If Clutch F slip monitor detects slip, reset flag and exit control loop
	If $ClutchSlip_high_flag = 1
		Let $ClutchSlip_high_flag = 0
		Log_Message (ClutchSlip_high_flag set to 1.)
		Goto Done_BarGraph:
	End
	'If slip monitor detects slip, reset flag and exit control loop
	If $TCCALC_N_SLP_ACT_high_flag = 1
		Let $TCCALC_N_SLP_ACT_high_flag = 0
		Goto Done_BarGraph:
	End
	'If turbine speed monitor detects turbine drop, reset flag and exit control loop
	If $StopTurbine_Flag = 1
		Let $StopTurbine_Flag = 0
		Goto Done_BarGraph:
	End
	'If engine overspeeds, terminate test
	If $Engine_Overspeed_Flag = 1
		Let $Engine_Overspeed_Flag = 0
		Log_Message (Bar Graph. Engine overspeed.)
		Log_Message (******************************************************)
		Log_Message (Terminating test.)
		Log_Message (******************************************************)
		'Send text message
		Let !Text_Message = Engine overspeed event. Engine speed is %%$TCRPM_NE_BAR_Monitor,0D%%rpm. Limit is %%$Engine_Speed_Limit,0D%%rpm.)
		Gosub Send_Text_Message
		'Terminate test
		Gosub Terminate_Test
	End
	'Exit loop when all pressure steps have completed
	If $Step_Counter = $Number_Press_Setpoints Then Goto Done_BarGraph:
Loop

Done_BarGraph:

'Turn off monitors
Monitor_Off Slip_Act
Log_Message (Stopping Slip_Act monitor. Run_Bar_Graph.)

Monitor_Off Turbine
Log_Message (Stopping Turbine monitor. Run_Bar_Graph.)

Monitor_Off Clutch_Slip
Log_Message (Stopping Clutch_Slip monitor. Run_Bar_Graph.)

'Return to start pressure command via test function
Select_Case $CurrentRunElement
	Case = 1
		'Line Pressure
		Set TVPSC_P_CMD_TST_LNP_S ($StartPressure,0)
	Case = 2
		'Clutch A
		Set TVPSC_P_CMD_TST_CLC_01_S ($StartPressure,0)
	Case = 3
		'Clutch B
		Set TVPSC_P_CMD_TST_CLC_02_S ($StartPressure,0)
	Case = 4
		'Clutch C
		Set TVPSC_P_CMD_TST_CLC_03_S ($StartPressure,0)
	Case = 5
		'Clutch D
		Set TVPSC_P_CMD_TST_CLC_04_S ($StartPressure,0)
	Case = 6
		'Clutch E
		Set TVPSC_P_CMD_TST_CLC_05_S ($StartPressure,0)
	Case = 7
		'Clutch F
		Set TVPSC_P_CMD_TST_CLC_06_S ($StartPressure,0)
	Case = 8
		'TCC
		Set TVPSC_P_CMD_TST_TCC_S ($StartPressure,0)
End_Select

'Apply start pressure wait time
Wait ($StartTime)

'Set pressure command to zero via test functions
Set TVPSC_P_CMD_TST_CLC_01_S (0,0)
Set TVPSC_P_CMD_TST_CLC_02_S (0,0)
Set TVPSC_P_CMD_TST_CLC_03_S (0,0)
Set TVPSC_P_CMD_TST_CLC_04_S (0,0)
Set TVPSC_P_CMD_TST_CLC_05_S (0,0)
Set TVPSC_P_CMD_TST_CLC_06_S (0,0)

'Unlock torque converter
If $BarGraph_TCC_On = 1
   Gosub Unlock_Converter
End

Wait (2)

'End Vision recorder
Gosub Record_End

'Turn off PID
Set DynSpd (Off) Using Pedal_Position_Cmd

'Reset Engine Speed
Gosub Reset_Engine_Speed

'Shift PRNDL to Neutral
If $THMI_ST_PRND_DES ~= 3
	Let $Desired_PRNDL_Position = 2
	Gosub Set_PRNDL_Position
End

'Disable test mode and reset start switch
Set TVPSC_B_TST_ENBL_S (0,0)
Set SAPRC_P_LNP_GR_TYP_MIN_V ($SAPRC_P_LNP_GR_TYP_MIN_V_Base,0)

'Return Autotest loop rate to baseline
Let $PC_Realtime_Rate = 10
Realtime_Rate = $PC_Realtime_Rate

End_Sub


'*******************************************************
Sub Ramp_A_Clutch
'*******************************************************
Log_Message (Running Ramp_A_Clutch Subroutine)
'Ramp pressure to gently apply the Clutch A

'Set ramp settings
Let $A_Inc = 20
Let $A_Press_Cmd = 0

'Set Clutch A test override code to scalar pressure
Set TVPSC_D_OVRD_CLC_01_S (11,0)

'Start Clutch A ramp control loop
Do
	'Set Pressure command
	Let $A_Press_Cmd = $A_Press_Cmd + $A_Inc
	'Apply pressure command using test function
	Set TVPSC_P_CMD_TST_CLC_01_S ($A_Press_Cmd,0)
	'Exit loop when all pressure steps have been completed
	If $A_Press_Cmd > $Desired_A_Press Then Goto Done_Ramp_A_Clutch:
Loop

Done_Ramp_A_Clutch:
End_Sub

'*******************************************************
' Sub Run_Gain_Sw
' '*******************************************************
 ' 'This subroutine will toggle the solenoid pressure through to activate low and high current transfer function gains.
' Log_Message (Starting Run_Gain_Sw Subroutine)
' Gosub Max_Pressure_Finder

' Set TVPSC_P_CMD_TST_CLC_01_S (0,0)
' Set TVPSC_P_CMD_TST_CLC_02_S (0,0)
' Set TVPSC_P_CMD_TST_CLC_03_S (0,0)
' Set TVPSC_P_CMD_TST_CLC_04_S (0,0)
' Set TVPSC_P_CMD_TST_CLC_05_S (0,0)
' Set TVPSC_P_CMD_TST_CLC_06_S (0,0)
' Set TVPSC_P_CMD_TST_TCC_S (0,0)
' Set TVPSC_D_OVRD_LNP_S (11,0)
' Set TVPSC_D_OVRD_CLC_01_S (11,0)
' Set TVPSC_D_OVRD_CLC_02_S (11,0)
' Set TVPSC_D_OVRD_CLC_03_S (11,0)
' Set TVPSC_D_OVRD_CLC_04_S (11,0)
' Set TVPSC_D_OVRD_CLC_05_S (11,0)
' Set TVPSC_D_OVRD_CLC_06_S (11,0)
' Set TVPSC_D_OVRD_TCC_S (11,0)

' 'Log Testrun conditions
' Log_Message (RunType is %%$RunType%%)
' Log_Message (GainSwStartPressure is %%$GainSwStartPressure%%)
' Log_Message (GainSwStartTime is %%$GainSwStartTime%%)
' Log_Message (GainSwLoPressure is %%$GainSwLoPressure%%)
' Log_Message (GainSwHiPressure is %%$GainSwHiPressure%%)
' Log_Message (GainSwDHoldCurrent is %%$GainSwDHoldCurrent%%)
' Log_Message (GainSwEHoldCurrent is %%$GainSwEHoldCurrent%%)
' Log_Message (GainSwStepSize is %%$GainSwStepSize%%)
' Log_Message (GainSwStepTime is %%$GainSwStepTime%%)
' Log_Message (GainSwType is %%$GainSwType%%)
' Log_Message (MaxPressure is %%$MaxPressure%%)
' Log_Message (GainSwSweepTime is %%$GainSwSweepTime%%)
' Log_Message (GainSwHoldTime is %%$GainSwHoldTime%%)
' Log_Message (GainSwSweepStartPressure is %%$GainSwSweepStartPressure%%)
' Log_Message (GainSwSweepEndPressure is %%$GainSwSweepEndPressure%%)

' If $GainSwType = 1
	' Let $GainSwDirection = 0
' Else
	' Let $GainSwDirection = 1
' End
   
' 'Determine number of profile steps
' Let $First_Press = $GainSwLoPressure
' Let $Max_Press_Cmd = $GainSwHiPressure
' If $Max_Press_Cmd > $MaxPressure
	' Let $Max_Press_Cmd = $MaxPressure
' End
' Let $Pressure_Range = $Max_Press_Cmd - $First_Press
' Let $Number_Press_Setpoints = $Pressure_Range / $GainSwStepSize
' Let $Number_Press_Setpoints = $Number_Press_Setpoints + 1
' Let $Number_Press_Setpoints_Int = Int ($Number_Press_Setpoints)
' Let $Number_Press_Delta = $Number_Press_Setpoints - $Number_Press_Setpoints_Int
' If $Number_Press_Delta > 0
	' Let $Number_Press_Setpoints = $Number_Press_Setpoints_Int + 1
' Else
	' Let $Number_Press_Setpoints = $Number_Press_Setpoints_Int
' End
' Log_Message (Number of Pressure setpoints for run %%$CurrentTestpoint%% is %%$Number_Press_Setpoints%%.)

' Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2
' If $TCRPM_NE_BAR_AVE2 < 100
	' Gosub Start_Engine
' End 

' Gosub Set_Engine_Speed
' Wait (5)
' Monitor_On Engine_Running
' Wait (2)
' Let $TRAM_Set = 1
' Set TVPSC_B_TST_ENBL_S (1,0)

' 'ActivatClutch E Pressure Override and set clutch holding pressure
' Select_Case $CurrentRunElement
	' Case = 5
		' Set TVPSC_D_OVRD_CLC_04_S (1,0)
		' Set TVPSC_IA_CMD_TST_CLC_04_S ($GainSwDHoldCurrent,0)
	' Case = 6
		' Set TVPSC_D_OVRD_CLC_05_S (1,0)
		' Set TVPSC_IA_CMD_TST_CLC_05_S ($GainSwEHoldCurrent,0)
' End_Select
' If $DitherType = 2
	' Let !File_Name = Dither_LPC_Gain_Sw_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	' File_Name (Dither_LPC_Gain_Sw_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)
' Else
	' Let !File_Name = LPC_Gain_Sw_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	' File_Name (LPC_Gain_Sw_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)		
' End	
' Gosub Record_Start
' Wait (4)
' If $GainSwType <= 2
	' 'Set Starting Line Pressure
	' Set TVPSC_D_OVRD_LNP_S (11,0)
	' Set TVPSC_P_CMD_TST_LNP_S ($GainSwStartPressure,0)
	' Wait ($GainSwStartTime)
	' Let $Step_Counter = 0

	' Do
		' Let $Loop_Start = Timer
		' Let $Step_Counter = $Step_Counter + 1
		' If $GainSwDirection = 1
			' Let $VFS_Press_Cmd = $VFS_Press_Cmd - $GainSwStepSize
		' Else
			' Let $VFS_Press_Cmd = $VFS_Press_Cmd + $GainSwStepSize
		' End
		' If $VFS_Press_Cmd > $MaxPressure
			' Let $VFS_Press_Cmd = $MaxPressure
		' End
		' If $VFS_Press_Cmd < $GainSwStartPressure
			' Let $VFS_Press_Cmd = $GainSwStartPressure
		' End
		' If $Step_Counter = 1
			' If $GainSwDirection = 1
				' Let $VFS_Press_Cmd = $GainSwHiPressure
			' Else
				' Let $VFS_Press_Cmd = $GainSwStartPressure
			' End
		' End
		' Set TVPSC_P_CMD_TST_LNP_S ($VFS_Press_Cmd,0)
		' Screen_Message (Green,%%New_Line%%Setting %%!Element%% pressure to %%$VFS_Press_Cmd,2D%%kpa)
		' Log_Message (%%!Element%% pressure to %%$VFS_Press_Cmd,2D%%kpa. step %%$Step_Counter%% of %%$Number_Press_Setpoints%%.)
		' Let $Loop_Time = Timer - $Loop_Start
		' If $Loop_Time < $GainSwStepTime
			' Let $Wait_Time = $GainSwStepTime - $Loop_Time
		' Wait ($Wait_Time)
			' If $GainSwDirection = 1
				' Set TVPSC_P_CMD_TST_LNP_S ($GainSwHiPressure,0)
			' Else
				' Set TVPSC_P_CMD_TST_LNP_S ($GainSwStartPressure,0)
			' End
		' Wait ($Wait_Time)
		' End
		' If $Step_Counter = $Number_Press_Setpoints Then Goto Done_GainSw:
	' Loop
' Else
	' Let $GainSwRampStartTime = $GainSwSweepTime + $GainSwHoldTime
	' Let $GainSwRampEndTime = $GainSwRampStartTime + $GainSwSweepTime
	' Let $GainSwSweepTime_MS = $GainSwSweepTime * 1000
	' Let $GainSwRampStartTime_MS = $GainSwRampStartTime * 1000
	' Let $GainSwRampEndTime_MS = $GainSwRampEndTime * 1000

	' Let $GainSwSweep_Timestamp_10 = $GainSwRampEndTime_MS + 10
	' Let $GainSwSweep_Timestamp_20 = $GainSwRampEndTime_MS + 20
	' Let $GainSwSweep_Timestamp_30 = $GainSwRampEndTime_MS + 30
	' Let $GainSwSweep_Timestamp_40 = $GainSwRampEndTime_MS + 40
	' Let $GainSwSweep_Timestamp_50 = $GainSwRampEndTime_MS + 50
	' Let $GainSwSweep_Timestamp_60 = $GainSwRampEndTime_MS + 60
	' Let $GainSwSweep_Timestamp_70 = $GainSwRampEndTime_MS + 70
	' Let $GainSwSweep_Timestamp_80 = $GainSwRampEndTime_MS + 80
	' Let $GainSwSweep_Timestamp_90 = $GainSwRampEndTime_MS + 90
	' Let $GainSwSweep_Timestamp_100 = $GainSwRampEndTime_MS + 100
	' Let $GainSwSweep_Timestamp_110 = $GainSwRampEndTime_MS + 110
	' Let $GainSwSweep_Timestamp_120 = $GainSwRampEndTime_MS + 120
	' Set TVPSC_D_OVRD_LNP_S (12,0)
	' Set_Function_Table TVPSC_TM_TST_LNP_N (1,0) = $0
	' Set_Function_Table TVPSC_TM_TST_LNP_N (1,1) = $GainSwSweepTime_MS
	' Set_Function_Table TVPSC_TM_TST_LNP_N (1,2) = $GainSwRampStartTime_MS
	' Set_Function_Table TVPSC_TM_TST_LNP_N (1,3) = $GainSwRampEndTime_MS
	' Set_Function_Table TVPSC_TM_TST_LNP_N (1,4) = $GainSwSweep_Timestamp_10
	' Set_Function_Table TVPSC_TM_TST_LNP_N (1,5) = $GainSwSweep_Timestamp_20
	' Set_Function_Table TVPSC_TM_TST_LNP_N (1,6) = $GainSwSweep_Timestamp_30
	' Set_Function_Table TVPSC_TM_TST_LNP_N (1,7) = $GainSwSweep_Timestamp_40
	' Set_Function_Table TVPSC_TM_TST_LNP_N (1,8) = $GainSwSweep_Timestamp_50
	' Set_Function_Table TVPSC_TM_TST_LNP_N (1,9) = $GainSwSweep_Timestamp_60
	' Set_Function_Table TVPSC_TM_TST_LNP_N (1,10) = $GainSwSweep_Timestamp_70
	' Set_Function_Table TVPSC_TM_TST_LNP_N (1,11) = $GainSwSweep_Timestamp_80
	' Set_Function_Table TVPSC_TM_TST_LNP_N (1,12) = $GainSwSweep_Timestamp_90
	' Set_Function_Table TVPSC_TM_TST_LNP_N (1,13) = $GainSwSweep_Timestamp_100
	' Set_Function_Table TVPSC_TM_TST_LNP_N (1,14) = $GainSwSweep_Timestamp_110
	' Set_Function_Table TVPSC_TM_TST_LNP_N (1,15) = $GainSwSweep_Timestamp_120
	' Set_Function_Table TVPSC_P_TST_LNP_T (1,0) = $GainSwSweepStartPressure
	' Set_Function_Table TVPSC_P_TST_LNP_T (1,1) = $GainSwSweepEndPressure
	' Set_Function_Table TVPSC_P_TST_LNP_T (1,2) = $GainSwSweepEndPressure
	' Set_Function_Table TVPSC_P_TST_LNP_T (1,3) = $GainSwSweepStartPressure
	' Set_Function_Table TVPSC_P_TST_LNP_T (1,4) = $GainSwSweepStartPressure
	' Set_Function_Table TVPSC_P_TST_LNP_T (1,5) = $GainSwSweepStartPressure
	' Set_Function_Table TVPSC_P_TST_LNP_T (1,6) = $GainSwSweepStartPressure
	' Set_Function_Table TVPSC_P_TST_LNP_T (1,7) = $GainSwSweepStartPressure
	' Set_Function_Table TVPSC_P_TST_LNP_T (1,8) = $GainSwSweepStartPressure
	' Set_Function_Table TVPSC_P_TST_LNP_T (1,9) = $GainSwSweepStartPressure
	' Set_Function_Table TVPSC_P_TST_LNP_T (1,10) = $GainSwSweepStartPressure
	' Set_Function_Table TVPSC_P_TST_LNP_T (1,11) = $GainSwSweepStartPressure
	' Set_Function_Table TVPSC_P_TST_LNP_T (1,12) = $GainSwSweepStartPressure
	' Set_Function_Table TVPSC_P_TST_LNP_T (1,13) = $GainSwSweepStartPressure
	' Set_Function_Table TVPSC_P_TST_LNP_T (1,14) = $GainSwSweepStartPressure
	' Set_Function_Table TVPSC_P_TST_LNP_T (1,15) = $GainSwSweepStartPressure
' End

' Set TVPSC_B_TST_STRT_ALL_S (1,0)
' Wait ($GainSwRampEndTime)
' Wait (2)
' Goto GainSwEnd:

' Done_GainSw:
' Set TVPSC_P_CMD_TST_LNP_S ($GainSwStartPressure,0)
' Wait ($GainSwStartTime)

' GainSwEnd:
' Gosub Record_End
' Wait (2)
' Set TVPSC_B_TST_STRT_ALL_S (0,0)
' Set TVPSC_B_TST_ENBL_S (0,0)
' End_Sub

'*******************************************************
Sub Run_TriangleWave
'*******************************************************
'This subroutine will ramp solenoid pressure up and down at user-selected rates.
Log_Message (Starting Run_TriangleWave Subroutine)

'Gosub Max_Pressure_Finder

'Set maximum pressure
Let $MaxPressure = $CurrentRunLine

'Set testpoint factors
Let $MinTriRampTime = $TriangleWaveMatrix ($CurrentRunElement,1)
Let $MaxTriRampTime = $TriangleWaveMatrix ($CurrentRunElement,2)
Let $TriRampInc = $TriangleWaveMatrix ($CurrentRunElement,3)
Let $First_Ramp = $MinTriRampTime
Let $Last_Ramp = $MaxTriRampTime

'Determine number of setpoints
Let $Ramp_Range = $Last_Ramp - $First_Ramp
Let $Number_Press_Setpoints = $Ramp_Range / $TriRampInc
Let $Number_Press_Setpoints_Int = Int ($Number_Press_Setpoints)
Let $Number_Press_Delta = $Number_Press_Setpoints - $Number_Press_Setpoints_Int
If $Number_Press_Delta > 0
	Let $Number_Press_Setpoints = $Number_Press_Setpoints_Int + 1
Else
	Let $Number_Press_Setpoints = $Number_Press_Setpoints_Int
End

'Log Testrun conditions
Log_Message (RunType is %%$RunType%%)
Log_Message (MinTriRampTime is %%$MinTriRampTime%%)
Log_Message (MaxTriRampTime is %%$MaxTriRampTime%%)
Log_Message (TriRampRateInc is %%$TriRampRateInc%%)
Log_Message (Number_Press_Setpoints is %%$Number_Press_Setpoints%%)

'Set Line Pressure for all solenoids except Line Pressure Solenoid
If $CurrentRunElement ~= 1
	Set TVPSC_P_CMD_TST_LNP_S ($CurrentRunLine,0)
Else
	Set TVPSC_P_CMD_TST_LNP_S (0,0)      
End

'Zero test pressure command functions
Set TVPSC_P_CMD_TST_CLC_01_S (0,0)
Set TVPSC_P_CMD_TST_CLC_02_S (0,0)
Set TVPSC_P_CMD_TST_CLC_03_S (0,0)
Set TVPSC_P_CMD_TST_CLC_04_S (0,0)
Set TVPSC_P_CMD_TST_CLC_05_S (0,0)
Set TVPSC_P_CMD_TST_CLC_06_S (0,0)
Set TVPSC_P_CMD_TST_TCC_S (0,0)

'Set test override codes
Set TVPSC_D_OVRD_LNP_S (11,0)
Set TVPSC_D_OVRD_CLC_01_S (11,0)
Set TVPSC_D_OVRD_CLC_02_S (11,0)
Set TVPSC_D_OVRD_CLC_03_S (11,0)
Set TVPSC_D_OVRD_CLC_04_S (11,0)
Set TVPSC_D_OVRD_CLC_05_S (11,0)
Set TVPSC_D_OVRD_CLC_06_S (11,0)
Set TVPSC_D_OVRD_TCC_S (11,0)

'Check engine speed. Start engine if not running
Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2
If $TCRPM_NE_BAR_AVE2 < 100
	If $Vehicle_Flag = 1
	'Prompt driver to start engine
		Screen_Message (Yellow,Please start engine and press 'Resume Test' when ready)
		Pause
	Else
		'Automatically start engine
		Gosub Start_Engine
	End	
End 

'Set engine speed
Gosub Set_Engine_Speed
Wait (5)

'Turn on engine speed monitor
Monitor_On Engine_Running
Log_Message (Starting Engine_Running monitor. Run_TriangleWave.)

Wait (2)

'Set File Name
If $DitherType = 2
	Let !File_Name = Dither_TriangleWave_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (Dither_TriangleWave_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)
Else
	Let !File_Name = TriangleWave_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (TriangleWave_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)		
End	

'Start Vision Recorder
Gosub Record_Start
Wait (4)

'Set TRAM_Set flag to reset PCM parameters if test shuts down
Let $TRAM_Set = 1
Log_Message (TRAM_Set set to 1)

'Disable OBDII
Set OBDII_TST_SW (0,0)

'Enable test mode
Set TVPSC_B_TST_ENBL_S (1,0)

'Initialize step counter
Let $Step_Counter = 0

'Start triangle wave ramp control loop
Do
	'Increment step counter
	Let $Step_Counter = $Step_Counter + 1
	'Establish up-ramp start time
	Let $UpTriRampStartTime = 2
	'Calculate ramp time
	Let $RampTimeCalc = $Step_Counter * $TriRampInc
	'Calculate overall setpoint time
	Let $SetpointRampTime = $MinTriRampTime + $RampTimeCalc
	Log_Message (SetpointRampTime is %%$SetpointRampTime%%)
	'Set hold start time for top of ramp hold
	Let $TriRampStartHold = $UpTriRampStartTime + $SetpointRampTime
	'Calculate down-ramp start time
	Let $DownTriRampStartTime = $TriRampStartHold + $TriangleWaveHold
	'Calculate ramp end time
	Let $ProfileEndTime = $DownTriRampStartTime + $SetpointRampTime
	
	'Convert times to milliseconds
	Let $UpTriRampStartTime_MS = $UpTriRampStartTime * 1000
	Let $TriRampStartHold_MS = $TriRampStartHold * 1000
	Let $DownTriRampStartTime_MS = $DownTriRampStartTime * 1000
	Let $ProfileEndTime_MS = $ProfileEndTime * 1000
    
	'Establish profile timestamp normalizer
	Let $Profile_Timestamp_10 = $ProfileEndTime_MS + 10
	Let $Profile_Timestamp_20 = $ProfileEndTime_MS + 20
	Let $Profile_Timestamp_30 = $ProfileEndTime_MS + 30
	Let $Profile_Timestamp_40 = $ProfileEndTime_MS + 40
	Let $Profile_Timestamp_50 = $ProfileEndTime_MS + 50
	Let $Profile_Timestamp_60 = $ProfileEndTime_MS + 60
	Let $Profile_Timestamp_70 = $ProfileEndTime_MS + 70
	Let $Profile_Timestamp_80 = $ProfileEndTime_MS + 80
	Let $Profile_Timestamp_90 = $ProfileEndTime_MS + 90
	Let $Profile_Timestamp_100 = $ProfileEndTime_MS + 100
	Let $Profile_Timestamp_110 = $ProfileEndTime_MS + 110

	'Set profile pressure command test function and test override code to profile pressure
	Select_Case $CurrentRunElement
		Case = 1
			'Line Pressure
			Set TVPSC_D_OVRD_LNP_S (12,0)
			Set_Function_Table TVPSC_TM_TST_LNP_N (1,0) = 0
			Set_Function_Table TVPSC_TM_TST_LNP_N (1,1) = $UpTriRampStartTime_MS
			Set_Function_Table TVPSC_TM_TST_LNP_N (1,2) = $TriRampStartHold_MS
			Set_Function_Table TVPSC_TM_TST_LNP_N (1,3) = $DownTriRampStartTime_MS
			Set_Function_Table TVPSC_TM_TST_LNP_N (1,4) = $ProfileEndTime_MS
			Set_Function_Table TVPSC_TM_TST_LNP_N (1,5) = $Profile_Timestamp_10
			Set_Function_Table TVPSC_TM_TST_LNP_N (1,6) = $Profile_Timestamp_20
			Set_Function_Table TVPSC_TM_TST_LNP_N (1,7) = $Profile_Timestamp_30
			Set_Function_Table TVPSC_TM_TST_LNP_N (1,8) = $Profile_Timestamp_40
			Set_Function_Table TVPSC_TM_TST_LNP_N (1,9) = $Profile_Timestamp_50
			Set_Function_Table TVPSC_TM_TST_LNP_N (1,10) = $Profile_Timestamp_60
			Set_Function_Table TVPSC_TM_TST_LNP_N (1,11) = $Profile_Timestamp_70
			Set_Function_Table TVPSC_TM_TST_LNP_N (1,12) = $Profile_Timestamp_80
			Set_Function_Table TVPSC_TM_TST_LNP_N (1,13) = $Profile_Timestamp_90
			Set_Function_Table TVPSC_TM_TST_LNP_N (1,14) = $Profile_Timestamp_100
			Set_Function_Table TVPSC_TM_TST_LNP_N (1,15) = $Profile_Timestamp_110
			Set_Function_Table TVPSC_P_TST_LNP_T (1,0) = 0
			Set_Function_Table TVPSC_P_TST_LNP_T (1,1) = 0
			Set_Function_Table TVPSC_P_TST_LNP_T (1,2) = $MaxPressure
			Set_Function_Table TVPSC_P_TST_LNP_T (1,3) = $MaxPressure
			Set_Function_Table TVPSC_P_TST_LNP_T (1,4) = 0
			Set_Function_Table TVPSC_P_TST_LNP_T (1,5) = 0
			Set_Function_Table TVPSC_P_TST_LNP_T (1,6) = 0
			Set_Function_Table TVPSC_P_TST_LNP_T (1,7) = 0
			Set_Function_Table TVPSC_P_TST_LNP_T (1,8) = 0
			Set_Function_Table TVPSC_P_TST_LNP_T (1,9) = 0
			Set_Function_Table TVPSC_P_TST_LNP_T (1,10) = 0
			Set_Function_Table TVPSC_P_TST_LNP_T (1,11) = 0
			Set_Function_Table TVPSC_P_TST_LNP_T (1,12) = 0
			Set_Function_Table TVPSC_P_TST_LNP_T (1,13) = 0
			Set_Function_Table TVPSC_P_TST_LNP_T (1,14) = 0
			Set_Function_Table TVPSC_P_TST_LNP_T (1,15) = 0
			Set_Activate
		Case = 2
			'Clutch A
			Set TVPSC_D_OVRD_CLC_01_S (12,0)
			Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,0) = 0
			Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,1) = $UpTriRampStartTime_MS
			Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,2) = $TriRampStartHold_MS
			Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,3) = $DownTriRampStartTime_MS
			Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,4) = $ProfileEndTime_MS
			Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,5) = $Profile_Timestamp_10
			Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,6) = $Profile_Timestamp_20
			Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,7) = $Profile_Timestamp_30
			Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,8) = $Profile_Timestamp_40
			Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,9) = $Profile_Timestamp_50
			Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,10) = $Profile_Timestamp_60
			Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,11) = $Profile_Timestamp_70
			Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,12) = $Profile_Timestamp_80
			Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,13) = $Profile_Timestamp_90
			Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,14) = $Profile_Timestamp_100
			Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,15) = $Profile_Timestamp_110
			Set_Function_Table TVPSC_P_TST_CLC_01_T (1,0) = 0
			Set_Function_Table TVPSC_P_TST_CLC_01_T (1,1) = 0
			Set_Function_Table TVPSC_P_TST_CLC_01_T (1,2) = $MaxPressure
			Set_Function_Table TVPSC_P_TST_CLC_01_T (1,3) = $MaxPressure
			Set_Function_Table TVPSC_P_TST_CLC_01_T (1,4) = 0
			Set_Function_Table TVPSC_P_TST_CLC_01_T (1,5) = 0
			Set_Function_Table TVPSC_P_TST_CLC_01_T (1,6) = 0
			Set_Function_Table TVPSC_P_TST_CLC_01_T (1,7) = 0
			Set_Function_Table TVPSC_P_TST_CLC_01_T (1,8) = 0
			Set_Function_Table TVPSC_P_TST_CLC_01_T (1,9) = 0
			Set_Function_Table TVPSC_P_TST_CLC_01_T (1,10) = 0
			Set_Function_Table TVPSC_P_TST_CLC_01_T (1,11) = 0
			Set_Function_Table TVPSC_P_TST_CLC_01_T (1,12) = 0
			Set_Function_Table TVPSC_P_TST_CLC_01_T (1,13) = 0
			Set_Function_Table TVPSC_P_TST_CLC_01_T (1,14) = 0
			Set_Function_Table TVPSC_P_TST_CLC_01_T (1,15) = 0
			Set_Activate
		Case = 3
			'Clutch B
			Set TVPSC_D_OVRD_CLC_02_S (12,0)
			Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,0) = 0
			Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,1) = $UpTriRampStartTime_MS
			Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,2) = $TriRampStartHold_MS
			Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,3) = $DownTriRampStartTime_MS
			Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,4) = $ProfileEndTime_MS
			Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,5) = $Profile_Timestamp_10
			Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,6) = $Profile_Timestamp_20
			Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,7) = $Profile_Timestamp_30
			Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,8) = $Profile_Timestamp_40
			Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,9) = $Profile_Timestamp_50
			Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,10) = $Profile_Timestamp_60
			Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,11) = $Profile_Timestamp_70
			Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,12) = $Profile_Timestamp_80
			Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,13) = $Profile_Timestamp_90
			Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,14) = $Profile_Timestamp_100
			Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,15) = $Profile_Timestamp_110
			Set_Function_Table TVPSC_P_TST_CLC_02_T (1,0) = 0
			Set_Function_Table TVPSC_P_TST_CLC_02_T (1,1) = 0
			Set_Function_Table TVPSC_P_TST_CLC_02_T (1,2) = $MaxPressure
			Set_Function_Table TVPSC_P_TST_CLC_02_T (1,3) = $MaxPressure
			Set_Function_Table TVPSC_P_TST_CLC_02_T (1,4) = 0
			Set_Function_Table TVPSC_P_TST_CLC_02_T (1,5) = 0
			Set_Function_Table TVPSC_P_TST_CLC_02_T (1,6) = 0
			Set_Function_Table TVPSC_P_TST_CLC_02_T (1,7) = 0
			Set_Function_Table TVPSC_P_TST_CLC_02_T (1,8) = 0
			Set_Function_Table TVPSC_P_TST_CLC_02_T (1,9) = 0
			Set_Function_Table TVPSC_P_TST_CLC_02_T (1,10) = 0
			Set_Function_Table TVPSC_P_TST_CLC_02_T (1,11) = 0
			Set_Function_Table TVPSC_P_TST_CLC_02_T (1,12) = 0
			Set_Function_Table TVPSC_P_TST_CLC_02_T (1,13) = 0
			Set_Function_Table TVPSC_P_TST_CLC_02_T (1,14) = 0
			Set_Function_Table TVPSC_P_TST_CLC_02_T (1,15) = 0
			Set_Activate
		Case = 4
			'Clutch C
			Set TVPSC_D_OVRD_CLC_03_S (12,0)
			Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,0) = 0
			Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,1) = $UpTriRampStartTime_MS
			Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,2) = $TriRampStartHold_MS
			Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,3) = $DownTriRampStartTime_MS
			Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,4) = $ProfileEndTime_MS
			Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,5) = $Profile_Timestamp_10
			Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,6) = $Profile_Timestamp_20
			Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,7) = $Profile_Timestamp_30
			Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,8) = $Profile_Timestamp_40
			Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,9) = $Profile_Timestamp_50
			Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,10) = $Profile_Timestamp_60
			Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,11) = $Profile_Timestamp_70
			Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,12) = $Profile_Timestamp_80
			Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,13) = $Profile_Timestamp_90
			Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,14) = $Profile_Timestamp_100
			Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,15) = $Profile_Timestamp_110
			Set_Function_Table TVPSC_P_TST_CLC_03_T (1,0) = 0
			Set_Function_Table TVPSC_P_TST_CLC_03_T (1,1) = 0
			Set_Function_Table TVPSC_P_TST_CLC_03_T (1,2) = $MaxPressure
			Set_Function_Table TVPSC_P_TST_CLC_03_T (1,3) = $MaxPressure
			Set_Function_Table TVPSC_P_TST_CLC_03_T (1,4) = 0
			Set_Function_Table TVPSC_P_TST_CLC_03_T (1,5) = 0
			Set_Function_Table TVPSC_P_TST_CLC_03_T (1,6) = 0
			Set_Function_Table TVPSC_P_TST_CLC_03_T (1,7) = 0
			Set_Function_Table TVPSC_P_TST_CLC_03_T (1,8) = 0
			Set_Function_Table TVPSC_P_TST_CLC_03_T (1,9) = 0
			Set_Function_Table TVPSC_P_TST_CLC_03_T (1,10) = 0
			Set_Function_Table TVPSC_P_TST_CLC_03_T (1,11) = 0
			Set_Function_Table TVPSC_P_TST_CLC_03_T (1,12) = 0
			Set_Function_Table TVPSC_P_TST_CLC_03_T (1,13) = 0
			Set_Function_Table TVPSC_P_TST_CLC_03_T (1,14) = 0
			Set_Function_Table TVPSC_P_TST_CLC_03_T (1,15) = 0
			Set_Activate
		Case = 5
			'Clutch D
			Set TVPSC_D_OVRD_CLC_04_S (12,0)
			Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,0) = 0
			Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,1) = $UpTriRampStartTime_MS
			Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,2) = $TriRampStartHold_MS
			Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,3) = $DownTriRampStartTime_MS
			Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,4) = $ProfileEndTime_MS
			Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,5) = $Profile_Timestamp_10
			Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,6) = $Profile_Timestamp_20
			Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,7) = $Profile_Timestamp_30
			Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,8) = $Profile_Timestamp_40
			Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,9) = $Profile_Timestamp_50
			Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,10) = $Profile_Timestamp_60
			Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,11) = $Profile_Timestamp_70
			Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,12) = $Profile_Timestamp_80
			Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,13) = $Profile_Timestamp_90
			Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,14) = $Profile_Timestamp_100
			Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,15) = $Profile_Timestamp_110
			Set_Function_Table TVPSC_P_TST_CLC_04_T (1,0) = 0
			Set_Function_Table TVPSC_P_TST_CLC_04_T (1,1) = 0
			Set_Function_Table TVPSC_P_TST_CLC_04_T (1,2) = $MaxPressure
			Set_Function_Table TVPSC_P_TST_CLC_04_T (1,3) = $MaxPressure
			Set_Function_Table TVPSC_P_TST_CLC_04_T (1,4) = 0
			Set_Function_Table TVPSC_P_TST_CLC_04_T (1,5) = 0
			Set_Function_Table TVPSC_P_TST_CLC_04_T (1,6) = 0
			Set_Function_Table TVPSC_P_TST_CLC_04_T (1,7) = 0
			Set_Function_Table TVPSC_P_TST_CLC_04_T (1,8) = 0
			Set_Function_Table TVPSC_P_TST_CLC_04_T (1,9) = 0
			Set_Function_Table TVPSC_P_TST_CLC_04_T (1,10) = 0
			Set_Function_Table TVPSC_P_TST_CLC_04_T (1,11) = 0
			Set_Function_Table TVPSC_P_TST_CLC_04_T (1,12) = 0
			Set_Function_Table TVPSC_P_TST_CLC_04_T (1,13) = 0
			Set_Function_Table TVPSC_P_TST_CLC_04_T (1,14) = 0
			Set_Function_Table TVPSC_P_TST_CLC_04_T (1,15) = 0
			Set_Activate
		Case = 6
			'Clutch E
			Set TVPSC_D_OVRD_CLC_05_S (12,0)
			Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,0) = 0
			Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,1) = $UpTriRampStartTime_MS
			Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,2) = $TriRampStartHold_MS
			Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,3) = $DownTriRampStartTime_MS
			Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,4) = $ProfileEndTime_MS
			Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,5) = $Profile_Timestamp_10
			Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,6) = $Profile_Timestamp_20
			Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,7) = $Profile_Timestamp_30
			Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,8) = $Profile_Timestamp_40
			Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,9) = $Profile_Timestamp_50
			Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,10) = $Profile_Timestamp_60
			Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,11) = $Profile_Timestamp_70
			Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,12) = $Profile_Timestamp_80
			Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,13) = $Profile_Timestamp_90
			Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,14) = $Profile_Timestamp_100
			Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,15) = $Profile_Timestamp_110
			Set_Function_Table TVPSC_P_TST_CLC_05_T (1,0) = 0
			Set_Function_Table TVPSC_P_TST_CLC_05_T (1,1) = 0
			Set_Function_Table TVPSC_P_TST_CLC_05_T (1,2) = $MaxPressure
			Set_Function_Table TVPSC_P_TST_CLC_05_T (1,3) = $MaxPressure
			Set_Function_Table TVPSC_P_TST_CLC_05_T (1,4) = 0
			Set_Function_Table TVPSC_P_TST_CLC_05_T (1,5) = 0
			Set_Function_Table TVPSC_P_TST_CLC_05_T (1,6) = 0
			Set_Function_Table TVPSC_P_TST_CLC_05_T (1,7) = 0
			Set_Function_Table TVPSC_P_TST_CLC_05_T (1,8) = 0
			Set_Function_Table TVPSC_P_TST_CLC_05_T (1,9) = 0
			Set_Function_Table TVPSC_P_TST_CLC_05_T (1,10) = 0
			Set_Function_Table TVPSC_P_TST_CLC_05_T (1,11) = 0
			Set_Function_Table TVPSC_P_TST_CLC_05_T (1,12) = 0
			Set_Function_Table TVPSC_P_TST_CLC_05_T (1,13) = 0
			Set_Function_Table TVPSC_P_TST_CLC_05_T (1,14) = 0
			Set_Function_Table TVPSC_P_TST_CLC_05_T (1,15) = 0
			Set_Activate
		Case = 7
			'Clutch F
			Set TVPSC_D_OVRD_CLC_06_S (12,0)
			Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,0) = 0
			Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,1) = $UpTriRampStartTime_MS
			Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,2) = $TriRampStartHold_MS
			Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,3) = $DownTriRampStartTime_MS
			Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,4) = $ProfileEndTime_MS
			Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,5) = $Profile_Timestamp_10
			Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,6) = $Profile_Timestamp_20
			Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,7) = $Profile_Timestamp_30
			Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,8) = $Profile_Timestamp_40
			Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,9) = $Profile_Timestamp_50
			Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,10) = $Profile_Timestamp_60
			Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,11) = $Profile_Timestamp_70
			Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,12) = $Profile_Timestamp_80
			Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,13) = $Profile_Timestamp_90
			Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,14) = $Profile_Timestamp_100
			Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,15) = $Profile_Timestamp_110
			Set_Function_Table TVPSC_P_TST_CLC_06_T (1,0) = 0
			Set_Function_Table TVPSC_P_TST_CLC_06_T (1,1) = 0
			Set_Function_Table TVPSC_P_TST_CLC_06_T (1,2) = $MaxPressure
			Set_Function_Table TVPSC_P_TST_CLC_06_T (1,3) = $MaxPressure
			Set_Function_Table TVPSC_P_TST_CLC_06_T (1,4) = 0
			Set_Function_Table TVPSC_P_TST_CLC_06_T (1,5) = 0
			Set_Function_Table TVPSC_P_TST_CLC_06_T (1,6) = 0
			Set_Function_Table TVPSC_P_TST_CLC_06_T (1,7) = 0
			Set_Function_Table TVPSC_P_TST_CLC_06_T (1,8) = 0
			Set_Function_Table TVPSC_P_TST_CLC_06_T (1,9) = 0
			Set_Function_Table TVPSC_P_TST_CLC_06_T (1,10) = 0
			Set_Function_Table TVPSC_P_TST_CLC_06_T (1,11) = 0
			Set_Function_Table TVPSC_P_TST_CLC_06_T (1,12) = 0
			Set_Function_Table TVPSC_P_TST_CLC_06_T (1,13) = 0
			Set_Function_Table TVPSC_P_TST_CLC_06_T (1,14) = 0
			Set_Function_Table TVPSC_P_TST_CLC_06_T (1,15) = 0
			Set_Activate
		Case = 8
			'TCC
			Set TVPSC_D_OVRD_TCC_S (12,0)
			Set_Function_Table TVPSC_TM_TST_TCC_N (1,0) = 0
			Set_Function_Table TVPSC_TM_TST_TCC_N (1,1) = $UpTriRampStartTime_MS
			Set_Function_Table TVPSC_TM_TST_TCC_N (1,2) = $TriRampStartHold_MS
			Set_Function_Table TVPSC_TM_TST_TCC_N (1,3) = $DownTriRampStartTime_MS
			Set_Function_Table TVPSC_TM_TST_TCC_N (1,4) = $ProfileEndTime_MS
			Set_Function_Table TVPSC_TM_TST_TCC_N (1,5) = $Profile_Timestamp_10
			Set_Function_Table TVPSC_TM_TST_TCC_N (1,6) = $Profile_Timestamp_20
			Set_Function_Table TVPSC_TM_TST_TCC_N (1,7) = $Profile_Timestamp_30
			Set_Function_Table TVPSC_TM_TST_TCC_N (1,8) = $Profile_Timestamp_40
			Set_Function_Table TVPSC_TM_TST_TCC_N (1,9) = $Profile_Timestamp_50
			Set_Function_Table TVPSC_TM_TST_TCC_N (1,10) = $Profile_Timestamp_60
			Set_Function_Table TVPSC_TM_TST_TCC_N (1,11) = $Profile_Timestamp_70
			Set_Function_Table TVPSC_TM_TST_TCC_N (1,12) = $Profile_Timestamp_80
			Set_Function_Table TVPSC_TM_TST_TCC_N (1,13) = $Profile_Timestamp_90
			Set_Function_Table TVPSC_TM_TST_TCC_N (1,14) = $Profile_Timestamp_100
			Set_Function_Table TVPSC_TM_TST_TCC_N (1,15) = $Profile_Timestamp_110
			Set_Function_Table TVPSC_P_TST_TCC_T (1,0) = 0
			Set_Function_Table TVPSC_P_TST_TCC_T (1,1) = 0
			Set_Function_Table TVPSC_P_TST_TCC_T (1,2) = $MaxPressure
			Set_Function_Table TVPSC_P_TST_TCC_T (1,3) = $MaxPressure
			Set_Function_Table TVPSC_P_TST_TCC_T (1,4) = 0
			Set_Function_Table TVPSC_P_TST_TCC_T (1,5) = 0
			Set_Function_Table TVPSC_P_TST_TCC_T (1,6) = 0
			Set_Function_Table TVPSC_P_TST_TCC_T (1,7) = 0
			Set_Function_Table TVPSC_P_TST_TCC_T (1,8) = 0
			Set_Function_Table TVPSC_P_TST_TCC_T (1,9) = 0
			Set_Function_Table TVPSC_P_TST_TCC_T (1,10) = 0
			Set_Function_Table TVPSC_P_TST_TCC_T (1,11) = 0
			Set_Function_Table TVPSC_P_TST_TCC_T (1,12) = 0
			Set_Function_Table TVPSC_P_TST_TCC_T (1,13) = 0
			Set_Function_Table TVPSC_P_TST_TCC_T (1,14) = 0
			Set_Function_Table TVPSC_P_TST_TCC_T (1,15) = 0
			Set_Activate
	End_Select
	'Screen_Message (Yellow,Check Settings before proceeding)
	'Pause
	'Start profile using test switch
	Set TVPSC_B_TST_STRT_ALL_S (1,0)
	Log_Message (%%!Element%% ramp rate is %%$SetpointRampRate,2D%%kpa. Ramp %%$Step_Counter%% of %%$Number_Press_Setpoints%%.)
	'Calculate and apply wait time
	Let $Profile_EndTime = $Profile_Timestamp_110 / 1000
	Let $Profile_EndTime = $Profile_EndTime + 3
	Wait ($Profile_EndTime)
	'Capture current profile start reset value and toggle reset
	Let $TVPSC_B_TST_RST_ALL_S = Calibration_Values TVPSC_B_TST_RST_ALL_S
	If $TVPSC_B_TST_RST_ALL_S = 1
		Set TVPSC_B_TST_RST_ALL_S (0,0)
	Else
		Set TVPSC_B_TST_RST_ALL_S (1,0)
	End
	'Reset profile start switch
	Set TVPSC_B_TST_STRT_ALL_S (0,0)
	'Exit loop when all pressure steps have been completed
	If $Step_Counter > $Number_Press_Setpoints Then Goto Done_TriangleWave:
Loop

Done_TriangleWave:

'End Vision Recorder
Gosub Record_End

Wait (2)

'Disable test mode and reset start switch
Set TVPSC_B_TST_STRT_ALL_S (0,0)
Set TVPSC_B_TST_ENBL_S (0,0)

End_Sub
'*******************************************************
Sub Run_SquareWave
'*******************************************************
'This subroutine will repeating square wave pressure patterns
Log_Message (Starting Run_SquareWave Subroutine)

'Log Testrun conditions
Log_Message (RunType is %%$RunType%%)
Log_Message (SquareWaveStepSize is %%$SquareWaveStepSize%%)
Log_Message (SquareWaveStepTime is %%$SquareWaveStepTime%%)
Log_Message (SquareWaveCycles is %%$SquareWaveCycles%%)

'Calculate step pressure if using boost pressure tables
If $SquareWaveBoostFlag = 1
	Gosub SquareWave_BoostPressure
End

'Calculate number of cycles if using variable off time
If $SquareWaveVariableOffFlag = 1
	Let $SquareWaveCycles = (($SquareWaveOffMax - $SquareWaveOffMin)/$SquareWaveOffInc + 1)*2
End

'Calculate pressure steps and establish start pressure
Let $Number_Press_Setpoints = $SquareWaveCycles
Let $SquareWaveStartPressure = $SquareWaveStartPressures ($CurrentRunElement,1)

'Set Line Pressure for all solenoids except Line Pressure solenoid
If $CurrentRunElement ~= 1
	Set TVPSC_P_CMD_TST_LNP_S ($CurrentRunLine,0)
Else
	Set TVPSC_P_CMD_TST_LNP_S (0,0)      
End

'Zero test pressure command functions
Set TVPSC_P_CMD_TST_CLC_01_S (0,0)
Set TVPSC_P_CMD_TST_CLC_02_S (0,0)
Set TVPSC_P_CMD_TST_CLC_03_S (0,0)
Set TVPSC_P_CMD_TST_CLC_04_S (0,0)
Set TVPSC_P_CMD_TST_CLC_05_S (0,0)
Set TVPSC_P_CMD_TST_CLC_06_S (0,0)
Set TVPSC_P_CMD_TST_TCC_S (0,0)

'Set test override codes to scalar pressure 
Set TVPSC_D_OVRD_LNP_S (11,0)
Set TVPSC_D_OVRD_CLC_01_S (11,0)
Set TVPSC_D_OVRD_CLC_02_S (11,0)
Set TVPSC_D_OVRD_CLC_03_S (11,0)
Set TVPSC_D_OVRD_CLC_04_S (11,0)
Set TVPSC_D_OVRD_CLC_05_S (11,0)
Set TVPSC_D_OVRD_CLC_06_S (11,0)
Set TVPSC_D_OVRD_TCC_S (11,0)

'Check engine speed and start engine if not running
Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2
If $TCRPM_NE_BAR_AVE2 < 100
	Gosub Start_Engine
End 

'Set engine/turbine speed
Gosub Set_Engine_Speed
Wait (5)

'Start engine speed monitor
Monitor_On Engine_Running
Log_Message (Starting Engine_Running monitor. Run_SquareWave.)

'Set TRAM_Set flag to reset PCM parameters if test shuts down
Let $TRAM_Set = 1
Log_Message (TRAM_Set set to 1)

'Disable OBDII
Set OBDII_TST_SW (0,0)

'Enable test mode
Set TVPSC_B_TST_ENBL_S (1,0)

Wait (2)

'Set File Name
If $DitherType = 2
	Let !File_Name = Dither_Square_Wave_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (Dither_Square_Wave_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)
Else
	Let !File_Name = Square_Wave_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (Square_Wave_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)		
End	

'Start Vision recorder
Gosub Record_Start
Wait (4)

'Apply start pressure command via test function
Select_Case $CurrentRunElement
	Case = 1
		'Line Pressure
		Set TVPSC_P_CMD_TST_LNP_S ($SquareWaveStartPressure,0)
	Case = 2
		'Clutch A
		Set TVPSC_P_CMD_TST_CLC_01_S ($SquareWaveStartPressure,0)
	Case = 3
		'Clutch B
		Set TVPSC_P_CMD_TST_CLC_02_S ($SquareWaveStartPressure,0)
	Case = 4
		'Clutch C
		Set TVPSC_P_CMD_TST_CLC_03_S ($SquareWaveStartPressure,0)
	Case = 5
		'Clutch D
		Set TVPSC_P_CMD_TST_CLC_04_S ($SquareWaveStartPressure,0)
	Case = 6
		'Clutch E
		Set TVPSC_P_CMD_TST_CLC_05_S ($SquareWaveStartPressure,0)
	Case = 7
		'Clutch F
		Set TVPSC_P_CMD_TST_CLC_06_S ($SquareWaveStartPressure,0)
	Case = 8
		'TCC
		Set TVPSC_P_CMD_TST_TCC_S ($SquareWaveStartPressure,0)
End_Select

'Set initial off-time to minimum off-time value
Let $Clutch_Off_Time = $SquareWaveOffMin

'Apply wait time
Wait ($SquareWaveStepTime)

'Initialize counters
Let $Step_Counter = 0

'Start Square Wave control loop
Do
	Let $Loop_Start = Timer
	'Increment step counter
	Let $Step_Counter = $Step_Counter + 1
	'Calculate pressure command
	Let $VFS_Press_Cmd = $SquareWaveStartPressure + $SquareWaveStepSize
	'Apply pressure command via test function
    Select_Case $CurrentRunElement
		Case = 1
			'Line Pressure
			Set TVPSC_P_CMD_TST_LNP_S ($VFS_Press_Cmd,0)
		Case = 2
			'Clutch A
			Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
		Case = 3
			'Clutch B
			Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
		Case = 4
			'Clutch C
			Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
		Case = 5
			'Clutch D
			Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
		Case = 6
			'Clutch E
			Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
		Case = 7
			'Clutch F
			Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
		Case = 8
			'TCC
			Set TVPSC_P_CMD_TST_TCC_S ($VFS_Press_Cmd,0)
	End_Select
	Screen_Message (Green,%%New_Line%%Increasing %%!Element%% pressure to %%$VFS_Press_Cmd,2D%%kpa)
	Log_Message (%%!Element%% pressure to %%$VFS_Press_Cmd,2D%%kpa. Cycle %%$Step_Counter%% of %%$Number_Press_Setpoints%%.)
	'Calculate loop time
	Let $Loop_Time = Timer - $Loop_Start
	'Calculate and apply wait time
	If $Loop_Time < $SquareWaveStepTime
		Let $Wait_Time = $SquareWaveStepTime - $Loop_Time
		Wait ($Wait_Time)
		'Return pressure command to start pressure via test functions
		Select_Case $CurrentRunElement
			Case = 1
				'Line Pressure
				Set TVPSC_P_CMD_TST_LNP_S ($SquareWaveStartPressure,0)
			Case = 2
				'Clutch A
				Set TVPSC_P_CMD_TST_CLC_01_S ($SquareWaveStartPressure,0)
			Case = 3
				'Clutch B
				Set TVPSC_P_CMD_TST_CLC_02_S ($SquareWaveStartPressure,0)
			Case = 4
				'Clutch C
				Set TVPSC_P_CMD_TST_CLC_03_S ($SquareWaveStartPressure,0)
			Case = 5
				'Clutch D
				Set TVPSC_P_CMD_TST_CLC_04_S ($SquareWaveStartPressure,0)
			Case = 6
				'Clutch E
				Set TVPSC_P_CMD_TST_CLC_05_S ($SquareWaveStartPressure,0)
			Case = 7
				'Clutch F
				Set TVPSC_P_CMD_TST_CLC_06_S ($SquareWaveStartPressure,0)
			Case = 8
				'TCC
				Set TVPSC_P_CMD_TST_TCC_S ($SquareWaveStartPressure,0)
		End_Select
		'Apply set wait time or variable off-time if enabled
		If $SquareWaveVariableOffFlag = 1
			Wait ($Clutch_Off_Time)
			'Increment next clutch-off time
			Let $Clutch_Off_Time = $Clutch_Off_Time + $SquareWaveOffInc
		Else
			Wait ($Wait_Time)
		End
	End
	'Exit loop when all pressure steps have been completed
	If $Step_Counter = $Number_Press_Setpoints Then Goto Done_SquareWave:
Loop
Done_SquareWave:

'End Vision recorder
Gosub Record_End

Wait (2)

'Disable test mode and reset start switch
Set TVPSC_B_TST_STRT_ALL_S (0,0)
Set TVPSC_B_TST_ENBL_S (0,0)

End_Sub
'*******************************************************
Sub SquareWave_BoostPressure
'*******************************************************
Log_Message (Starting SquareWave_BoostPressure Subroutine)

'Capture boost table for current VFS, skip LNP and TCC
Select_Case $CurrentRunElement
	Case = 1
		'Line Pressure
		Goto Done_SquareWave_BoostPressure:
	Case = 2
		'Clutch A
		Let $SquareWaveBoostTable = Calibration_Values SAPRC_P_BST_TFT_NE_ELEA_M
	Case = 3
		'Clutch B
		Let $SquareWaveBoostTable = Calibration_Values SAPRC_P_BST_TFT_NE_ELEB_M
	Case = 4
		'Clutch C
		Let $SquareWaveBoostTable = Calibration_Values SAPRC_P_BST_TFT_NE_ELEC_M
	Case = 5
		'Clutch D
		Let $SquareWaveBoostTable = Calibration_Values SAPRC_P_BST_TFT_NE_ELED_M
	Case = 6
		'Clutch E
		Let $SquareWaveBoostTable = Calibration_Values SAPRC_P_BST_TFT_NE_ELEE_M
	Case = 7
		'Clutch F
		Let $SquareWaveBoostTable = Calibration_Values SAPRC_P_BST_TFT_NE_ELEF_M
	Case = 8
		'TCC
		Goto Done_SquareWave_BoostPressure:
End_Select

'get boost table normalizers
Let $SAUTL_TFT_10_N = Calibration_Values SAUTL_TFT_10_N
Let $SACOR_NE_BST_TM_N = Calibration_Values SACOR_NE_BST_TM_N

'Initialize index and flags
Let $BoostIndex = 2
Let $Low_Index = $BoostIndex - 1
Let $TempNormFlag = 0
Let $NeNormFlag = 0

'Find normalizer temperature and engine speed from boost table
Do
	If $TempNormFlag = 0
	'TFT normalizer
		If $SAUTL_TFT_10_N(1,$BoostIndex) > $CurrentRunTemp
			Let $TempNormLow = $SAUTL_TFT_10_N(1,$Low_Index)
			Let $TempNormHigh = $SAUTL_TFT_10_N(1,$BoostIndex)
			Let $TempNormLowInd = $BoostIndex - 1
			Let $TempNormHighInd = $BoostIndex
			Let $TempNormFlag = 1
		End
	End
	'Engine Speed normalizer
	If $NeNormFlag = 0
		If $SACOR_NE_BST_TM_N(1,$BoostIndex) > $CurrentRunTurbine
			Let $NeNormLow = $SACOR_NE_BST_TM_N(1,$Low_Index)
			Let $NeNormHigh = $SACOR_NE_BST_TM_N(1,$BoostIndex)
			Let $NeNormLowInd = $BoostIndex - 1
			Let $NeNormHighInd = $BoostIndex
			Let $NeNormFlag = 1
		End
	End
	If $TempNormFlag = 1
		If $NeNormFlag = 1
			Goto Done_NormValues:
		End
	End
Loop
Done_NormValues:

'find the four boost pressures around the current test point
Let $BoostLowLow = $SquareWaveBoostTable($TempNormLowInd,$NeNormLowInd)
Let $BoostLowHigh = $SquareWaveBoostTable($TempNormLowInd,$NeNormHighInd)
Let $BoostHighLow = $SquareWaveBoostTable($TempNormHighInd,$NeNormLowInd)
Let $BoostHighHigh = $SquareWaveBoostTable($TempNormHighInd,$NeNormHighInd)

'interpolate the pressure to be used as the step size (see bilinear interpolation on Wikipedia)
Let $BoostInterpLow = $BoostLowLow*($TempNormHigh-$CurrentRunTemp)/($TempNormHigh-$TempNormLow) + $BoostHighLow*($CurrentRunTemp-$TempNormLow)/($TempNormHigh-$TempNormLow)
Let $BoostInterpHigh = $BoostLowHigh*($TempNormHigh-$CurrentRunTemp)/($TempNormHigh-$TempNormLow) + $BoostHighHigh*($CurrentRunTemp-$TempNormLow)/($TempNormHigh-$TempNormLow)
Let $SquareWaveStepSize = $BoostInterpLow*($NeNormHigh-$CurrentRunTurbine)/($NeNormHigh-$NeNormLow) + $BoostInterpHigh*($CurrentRunTurbine-$NeNormLow)/($NeNormHigh-$NeNormLow)

Done_SquareWave_BoostPressure:
End_Sub
'*******************************************************
Sub Run_BoostDOE
'*******************************************************
Log_Message (Starting Run_BoostDOE Subroutine)

'Extract boost times and pressures from Boost DOE matrix
Gosub Profile_Index

'Establish start pressure
Let $BoostDOE_StartPressure = $BoostDOEMatrix ($CurrentRunElement,1)

'Increase autotest loop speed to improve detection of slip
Let $PC_Realtime_Rate = 100
Realtime_Rate = $PC_Realtime_Rate

'Zero test pressure functions
Set TVPSC_P_CMD_TST_CLC_01_S (0,0)
Set TVPSC_P_CMD_TST_CLC_02_S (0,0)
Set TVPSC_P_CMD_TST_CLC_03_S (0,0)
Set TVPSC_P_CMD_TST_CLC_04_S (0,0)
Set TVPSC_P_CMD_TST_CLC_05_S (0,0)
Set TVPSC_P_CMD_TST_CLC_06_S (0,0)
Set TVPSC_P_CMD_TST_TCC_S (0,0)

'Set test override code to oncoming profile
Set TVPSC_D_OVRD_LNP_S (11,0)
Set TVPSC_D_OVRD_CLC_01_S (41,0)
Set TVPSC_D_OVRD_CLC_02_S (41,0)
Set TVPSC_D_OVRD_CLC_03_S (41,0)
Select_Case $Trans_Select 
	Case = 3
		'10R140
		Set TVPSC_D_OVRD_CLC_04_S (41,0)
	Case = 6
		'10R60/80
		Set TVPSC_D_OVRD_CLC_04_S (41,0)
	Case = 8
		'6R80
		Set TVPSC_D_OVRD_CLC_04_S (41,0)		
End_Select
Set TVPSC_D_OVRD_CLC_05_S (41,0)
Set TVPSC_D_OVRD_CLC_06_S (41,0)
Set TVPSC_D_OVRD_TCC_S (11,0)

'Check engine speed and start engine if not running
Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2
If $TCRPM_NE_BAR_AVE2 < 100
	If $Vehicle_Flag = 1
		'Prompt driver to start engine
		Screen_Message (Yellow,Please start engine and press 'Resume Test' when ready)
		Pause
	Else
		'Automatically start engine
		Gosub Start_Engine
	End	
End 

'Set engine/turbine speed
Gosub Set_Engine_Speed
Wait (5)

'Start engine speed monitor
Monitor_On Engine_Running
Log_Message (Starting Engine_Running monitor. Run_BoostDOE.)

Wait (2)

'Set clutch pressures to Line Pressure
Select_Case $Trans_Select 
	Case = 2
		'8F24
		'Why was 8F24 set to 500kpa rather than Line Pressure
			Select_Case $CurrentRunElement
				Case = 2
				'Clutch A
					Set TVPSC_P_CMD_TST_CLC_03_S (500,0)
				Case = 3
				'Clutch B
					Set TVPSC_P_CMD_TST_CLC_05_S (500,0)			
				Case = 4
				'Clutch C
					Set TVPSC_P_CMD_TST_CLC_05_S (500,0)		
				Case = 5
				'Clutch D

				Case = 6
				'Clutch E
					Set TVPSC_P_CMD_TST_CLC_03_S  (500,0)				
				Case = 7
				'Clutch F
					Set TVPSC_P_CMD_TST_CLC_05_S  (500,0)		
			End_Select
	Case = 3
		'10R140
		Select_Case $CurrentRunElement
			Case = 2
				'Clutch A
				Set TVPSC_P_CMD_TST_CLC_03_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_05_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_06_S ($CurrentRunLine,0)
			Case = 3
				'Clutch B
				Set TVPSC_P_CMD_TST_CLC_04_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_05_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_06_S ($CurrentRunLine,0)
			Case = 4
				'Clutch C
				Set TVPSC_P_CMD_TST_CLC_04_S  ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_05_S  ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_06_S  ($CurrentRunLine,0)
			Case = 5
				'Clutch D
				Set TVPSC_P_CMD_TST_CLC_03_S  ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_05_S  ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_06_S  ($CurrentRunLine,0)
			Case = 6
				'Clutch E
				Set TVPSC_P_CMD_TST_CLC_03_S  ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_04_S  ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_06_S  ($CurrentRunLine,0)
			Case = 7
				'Clutch F
				Set TVPSC_P_CMD_TST_CLC_03_S  ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_04_S  ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_05_S  ($CurrentRunLine,0)
		End_Select
	Case = 4
		'8F57
		Select_Case $CurrentRunElement
			Case = 2
			'Clutch A
			
			Case = 3
			'Clutch B
				Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)				
			Case = 4
			'Clutch C
				Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
			Case = 5
			'Clutch D

			Case = 6
			'Clutch E
				Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)				
			Case = 7
			'Clutch F
				Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
		End_Select
	Case = 6
		'10R60/80
		Select_Case $CurrentRunElement
			Case = 2
				'Clutch A
				Set TVPSC_P_CMD_TST_CLC_03_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_05_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_06_S ($CurrentRunLine,0)
			Case = 3
				'Clutch B
				Set TVPSC_P_CMD_TST_CLC_04_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_05_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_06_S ($CurrentRunLine,0)
			Case = 4
				'Clutch C
				Set TVPSC_P_CMD_TST_CLC_04_S  ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_05_S  ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_06_S  ($CurrentRunLine,0)
			Case = 5
				'Clutch D
				Set TVPSC_P_CMD_TST_CLC_03_S  ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_05_S  ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_06_S  ($CurrentRunLine,0)
			Case = 6
				'Clutch E
				Set TVPSC_P_CMD_TST_CLC_03_S  ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_04_S  ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_06_S  ($CurrentRunLine,0)
			Case = 7
				'Clutch F
				Set TVPSC_P_CMD_TST_CLC_03_S  ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_04_S  ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_05_S  ($CurrentRunLine,0)
		End_Select
	Case = 7
		'8F35
		Select_Case $CurrentRunElement
			Case = 2
				'Clutch A
				Set TVPSC_P_CMD_TST_CLC_02_S ($CurrentRunLine,0)
			Case = 3
				'Clutch B
				Set TVPSC_P_CMD_TST_CLC_05_S ($CurrentRunLine,0)
			Case = 4
				'Clutch C
				Set TVPSC_P_CMD_TST_CLC_05_S  ($CurrentRunLine,0)
			Case = 5
				'Clutch D
				Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
			Case = 6
				'Clutch E
				Set TVPSC_P_CMD_TST_CLC_06_S  ($CurrentRunLine,0)
			Case = 7
				'Clutch F
				Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
		End_Select
	Case = 8
		'6R80
		Select_Case $CurrentRunElement
			Case = 2
				'Clutch A
				Set TVPSC_P_CMD_TST_CLC_04_S ($CurrentRunLine,0)
			Case = 3
				'Clutch B
				Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)
			Case = 4
				'Clutch C
				Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
			Case = 5
				'Clutch D
				Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
			Case = 6
				'Clutch E
				Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
		End_Select		
End_Select

'Set TRAM_Set flag to reset PCM parameters in case of shutdown
Let $TRAM_Set = 1
Log_Message (TRAM_Set set to 1)

'Disable OBDII
Set OBDII_TST_SW (0,0)

'Enable test mode
Set TVPSC_B_TST_ENBL_S (1,0)

'Set Line pressure for all solenoids except Line Pressure Solenoid
Wait (2)
If $CurrentRunElement ~= 1
	Set TVPSC_P_CMD_TST_LNP_S ($CurrentRunLine,0)
Else
	Set TVPSC_P_CMD_TST_LNP_S (0,0)
End
Wait (2)

'Set output speed if setpoint is non-zero
If $BoostDOE_OutputSpeed > 0
	'Standard dyno cell
	If $Standard_Cell = 1
		Let $Desired_Emcon_Mode = 1
		Gosub Set_Emcon_Mode
		Set DynoSpeed_set ($BoostDOE_OutputSpeed,0)
	End
	'HIL dyno
	If $HIL_Flag = 1
		Gosub Set_PID_Gains
		Set DynSpd ($BoostDOE_OutputSpeed,0) Using Pedal_Position_Cmd 
	End
End

Wait (4)

'Measure average slip
Let $TCCALC_N_SLP_ACT_AVE2 = TCCALC_N_SLP_ACT_AVE2
'Establish slip threshold
Let $Slip_Threshold = $TCCALC_N_SLP_ACT_AVE2 + 50
'Establish baseline slip level
Let $BaseSlip = $TCCALC_N_SLP_ACT_AVE2
Log_Message (Slip_Threshold is %%$Slip_Threshold,0D%%)

'Measure average turbine speed
Let $TCRPM_NT_BAR_AVE2 = TCRPM_NT_BAR_AVE2
'Establish turbine drop threshold
Let $Turbine_Threshold = $TCRPM_NT_BAR_AVE2 - 100
Log_Message (Turbine_Threshold is %%$Turbine_Threshold,0D%%)

'Initialize slip and turbine drop flags
Let $StopTurbine_Flag = 0
Let $TCCALC_N_SLP_ACT_high_flag = 0

Wait (2)

'Set File Name
If $DitherType = 2
	Let !File_Name = Dither_BoostDOE_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (Dither_BoostDOE_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)
Else
	Let !File_Name = BoostDOE_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (BoostDOE_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)		
End	

'Start Vision Recorder	
Gosub Record_Start
Wait (2)

'Start slip speed monitors
Monitor_On Slip_Act
Log_Message (Starting Slip_Act monitor. Run_BoostDOE.)

'Start Turbine Speed Monitor
Monitor_On Turbine
Log_Message (Starting Turbine monitor. Run_BoostDOE.)

'Initialize step counter
Let $Step_Counter = 0

'Start Boost DOE control loop
Do
	Skip_Point_Return:
	Let $Loop_Start = Timer
	'Increment step counter
	Let $Step_Counter = $Step_Counter + 1
	'Set pressure command from boost profile
	Let $VFS_Press_Cmd = $CurrentRunBoostProfile ($Step_Counter,1)
	'If turbine drop threshold is exceeded during the boost profile, keep applying profile. If not completed, skip to end. Reset flag if entering new phase of profile
	If $StopTurbine_Flag = 1
		If $VFS_Press_Cmd = $Last_VFS_Press_Cmd
			If $Step_Counter ~= $CurrentRunBoostProfile_Count
				Goto Skip_Point_Return:
			Else
				Goto Done_Boost:
			End
		Else
			Let $StopTurbine_Flag = 0
		End
	End
	'If slip threshold is exceeded during the boost profile, keep applying profile. If not completed, skip to end. Reset flag if entering new phase of profile
	If $TCCALC_N_SLP_ACT_high_flag = 1
		If $VFS_Press_Cmd = $Last_VFS_Press_Cmd
			If $Step_Counter ~= $CurrentRunBoostProfile_Count
				Goto Skip_Point_Return:
			Else
				Goto Done_Boost:
			End
		Else
			Let $TCCALC_N_SLP_ACT_high_flag = 0
		End
	End
	'Apply Pre-boost pressure blip to excercise full range
	If $BoostDOE_PreBoost_On = 1
		'Set preboost pressure
		Let $Pressure_Blip = 3500
		'Set test override code to oncoming scalar pressure and apply pressure command via test function
		Select_Case $CurrentRunElement
			Case = 2
				'Clutch A
				Set TVPSC_D_OVRD_CLC_01_S (41,0)
				Set TVPSC_P_CMD_TST_CLC_01_S ($Pressure_Blip,0)
			Case = 3
				'Clutch B
				 Set TVPSC_D_OVRD_CLC_02_S (41,0)
				Set TVPSC_P_CMD_TST_CLC_02_S ($Pressure_Blip,0)
			Case = 4
				'Clutch C
				 Set TVPSC_D_OVRD_CLC_03_S (41,0)
				Set TVPSC_P_CMD_TST_CLC_03_S ($Pressure_Blip,0)
			Case = 5
				'Clutch D
				'Set TVPSC_D_OVRD_CLC_04_S (41,0)
				'Set TVPSC_P_CMD_TST_CLC_04_S ($Pressure_Blip,0)
			Case = 6
				'Clutch E
				Set TVPSC_D_OVRD_CLC_05_S (41,0)
				Set TVPSC_P_CMD_TST_CLC_05_S ($Pressure_Blip,0)
			Case = 7
				'Clutch F
				Set TVPSC_D_OVRD_CLC_06_S (41,0)
				Set TVPSC_P_CMD_TST_CLC_06_S ($Pressure_Blip,0)
		End_Select
		'Increase preboost time for cold temperature testpoints
		If $CurrentRunTemp <= 0
			Wait (0.02)
		Else
			Wait (0.01)
		End	
	End
	'Apply Hysteresis pressure
	Select_Case $CurrentRunElement
		Case = 1
			'Line Pressure
			Set TVPSC_P_CMD_TST_LNP_S (0,0)
		Case = 2
			'Clutch A
			Set TVPSC_D_OVRD_CLC_01_S (41,0)
			Set TVPSC_P_CMD_TST_CLC_01_S (0,0)
		Case = 3
			'Clutch B
			Set TVPSC_D_OVRD_CLC_02_S (41,0)
			Set TVPSC_P_CMD_TST_CLC_02_S (0,0)
		Case = 4
			'Clutch C
			Set TVPSC_D_OVRD_CLC_03_S (41,0)		
			Set TVPSC_P_CMD_TST_CLC_03_S (0,0)
		Case = 5
			'Clutch D
			Set TVPSC_D_OVRD_CLC_04_S (41,0)
			Set TVPSC_P_CMD_TST_CLC_04_S (0,0)
		Case = 6
			'Clutch E
			Set TVPSC_D_OVRD_CLC_05_S (41,0)
			Set TVPSC_P_CMD_TST_CLC_05_S (0,0)
		Case = 7
			'Clutch F
			Set TVPSC_D_OVRD_CLC_06_S (41,0)
			Set TVPSC_P_CMD_TST_CLC_06_S (0,0)
	End_Select
	'Apply hysteresis wait time
	Wait (0.01)
	'Apply pressure command via test function
	Select_Case $CurrentRunElement
		Case = 2
			'Clutch A
			Set TVPSC_D_OVRD_CLC_01_S (41,0)
			Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
		Case = 3
			'Clutch B
			Set TVPSC_D_OVRD_CLC_02_S (41,0)
			Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
		Case = 4
			'Clutch C
			Set TVPSC_D_OVRD_CLC_03_S (41,0)		
			Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
		Case = 5
			'Clutch D
			Set TVPSC_D_OVRD_CLC_04_S (41,0)
			Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
		Case = 6
			'Clutch E
			Set TVPSC_D_OVRD_CLC_05_S (41,0)
			Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
		Case = 7
			'Clutch F
			Set TVPSC_D_OVRD_CLC_06_S (41,0)
			Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
	End_Select
	'Set last pressure command as comparator
	Let $Last_VFS_Press_Cmd = $VFS_Press_Cmd
	'Calculate loop time
	Let $Loop_Time = Timer - $Loop_Start
	'Select boost time from boost profile matrix
	Let $VFS_Boost_Time = $CurrentRunBoostProfile ($Step_Counter,2)
	Screen_Message (Green,%%New_Line%%Boosting %%!Element%% pressure to %%$VFS_Press_Cmd,2D%%psi)
	Log_Message (%%!Element%% pressure to %%$VFS_Press_Cmd,2D%%kpa for %%$VFS_Boost_Time,2D%%seconds. Cycle %%$Step_Counter%% of %%$CurrentRunBoostProfile_Count%%.)
	'Calculate and apply boost time
	If $Loop_Time < $VFS_Boost_Time
		Let $Wait_Time = $VFS_Boost_Time - $Loop_Time
		Wait ($Wait_Time)
		'Apply start pressure via test functions
        Select_Case $CurrentRunElement
			Case = 2
				'Clutch A
				Set TVPSC_P_CMD_TST_CLC_01_S ($BoostDOE_StartPressure,0)
			Case = 3
				'Clutch B
				Set TVPSC_P_CMD_TST_CLC_02_S ($BoostDOE_StartPressure,0)
			Case = 4
				'Clutch C
				Set TVPSC_P_CMD_TST_CLC_03_S ($BoostDOE_StartPressure,0)
			Case = 5
				'Clutch D
				Set TVPSC_P_CMD_TST_CLC_04_S ($BoostDOE_StartPressure,0)
			Case = 6
				'Clutch E
				Set TVPSC_P_CMD_TST_CLC_05_S ($BoostDOE_StartPressure,0)
			Case = 7
				'Clutch F
				Set TVPSC_P_CMD_TST_CLC_06_S ($BoostDOE_StartPressure,0)
		End_Select
		Wait (7)
	End
	'Exit loop when all pressure steps in the boost profile have been completed
	If $Step_Counter = $CurrentRunBoostProfile_Count Then Goto Done_Boost:
Loop
Done_Boost:

'Stop monitoring of slip and turbine speed
Monitor_Off Slip_Act
Log_Message (Stopping Slip_Act monitor. Run_BoostDOE.)

Monitor_Off Turbine
Log_Message (Stopping Turbine monitor. Run_BoostDOE.)

'Stop profile start switch
Set TVPSC_B_TST_STRT_ALL_S (0,0)

'Reset clutch pressure to zero
If $Trans_Select = 2
	'8F24
	'Is the 400 kpa pressure for 8F24 still valid? Is this leftover from Short Boost DOE?
	Select_Case $CurrentRunElement
		Case = 2
			'Clutch A
			Set TVPSC_P_CMD_TST_CLC_03_S (400,0)		
			Wait (2)
			Set TVPSC_P_CMD_TST_CLC_03_S  (0,0)			
			'Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)
		Case = 3
			'Clutch B
			Set TVPSC_P_CMD_TST_CLC_05_S (400,0)		
			Wait (2)
			Set TVPSC_P_CMD_TST_CLC_05_S  (0,0)			
			'Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)				
		Case = 4
			'Clutch C
			Set TVPSC_P_CMD_TST_CLC_05_S (400,0)		
			Wait (2)
			Set TVPSC_P_CMD_TST_CLC_05_S  (0,0)
			'Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
		Case = 5
			'Clutch D

		Case = 6
			'Clutch E
			Set TVPSC_P_CMD_TST_CLC_03_S  (400,0)
			Wait (2)
			Set TVPSC_P_CMD_TST_CLC_03_S  (0,0)			
			'Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)				
		Case = 7
			'Clutch F
			Set TVPSC_P_CMD_TST_CLC_05_S  (400,0)
			Wait (2)
			Set TVPSC_P_CMD_TST_CLC_05_S  (0,0)
			'Set TVPSC_P_CMD_TST_CLC_01_S  ($CurrentRunLine,0)
	End_Select
End

'End Vision Recorder
Gosub Record_End

'Stop powertrain
Gosub Slowdown

'Shift PRNDL to neutral
If $THMI_ST_PRND_DES ~= 3
	Let $Desired_PRNDL_Position = 2
	Gosub Set_PRNDL_Position
End
Wait (2)

'Reset Line Pressure test pressure
Set TVPSC_D_OVRD_LNP_S (0,0)
Wait (2)

'Disable test mode
Set TVPSC_B_TST_ENBL_S (0,0)

'Return Autotest loop rate to baseline
Let $PC_Realtime_Rate = 10
Realtime_Rate = $PC_Realtime_Rate

End_Sub 

'******************************************************
Sub Run_CustomProfile_Pressure
'******************************************************
Log_Message (Starting Run_CustomProfile_Pressure subroutine)

'Select proper custom pressure profile
Select_Case $CurrentRunElement
	Case = 1
		'Line Pressure
		Let $CP_Press_Matrix = $CP_Press_Matrix_0
	Case = 2
		'Clutch A
		Let $CP_Press_Matrix = $CP_Press_Matrix_1
	Case = 3
		'Clutch B
		Let $CP_Press_Matrix = $CP_Press_Matrix_2
	Case = 4
		'Clutch C
		Let $CP_Press_Matrix = $CP_Press_Matrix_3
	Case = 5
		'Clutch D
		Let $CP_Press_Matrix = $CP_Press_Matrix_4
	Case = 6
		'Clutch E
		Let $CP_Press_Matrix = $CP_Press_Matrix_5
	Case = 7
		'Clutch F
		Let $CP_Press_Matrix = $CP_Press_Matrix_6
	Case = 8
		'TCC
		Let $CP_Press_Matrix = $CP_Press_Matrix_7
End_Select

'Set profile time normalizer variables from custom pressure matrix
Let $CP_Press_Time00 = $CP_Press_Matrix (1,1)
Let $CP_Press_Time01 = $CP_Press_Matrix (2,1)
Let $CP_Press_Time02 = $CP_Press_Matrix (3,1)
Let $CP_Press_Time03 = $CP_Press_Matrix (4,1)
Let $CP_Press_Time04 = $CP_Press_Matrix (5,1)
Let $CP_Press_Time05 = $CP_Press_Matrix (6,1)
Let $CP_Press_Time06 = $CP_Press_Matrix (7,1)
Let $CP_Press_Time07 = $CP_Press_Matrix (8,1)
Let $CP_Press_Time08 = $CP_Press_Matrix (9,1)
Let $CP_Press_Time09 = $CP_Press_Matrix (10,1)
Let $CP_Press_Time10 = $CP_Press_Matrix (11,1)
Let $CP_Press_Time11 = $CP_Press_Matrix (12,1)
Let $CP_Press_Time12 = $CP_Press_Matrix (13,1)
Let $CP_Press_Time13 = $CP_Press_Matrix (14,1)
Let $CP_Press_Time14 = $CP_Press_Matrix (15,1)
Let $CP_Press_Time15 = $CP_Press_Matrix (16,1)

'Set pressure profile variables from custom pressure matrix
Let $CP_Press_Pressure00 = $CP_Press_Matrix (1,2)
Let $CP_Press_Pressure01 = $CP_Press_Matrix (2,2)
Let $CP_Press_Pressure02 = $CP_Press_Matrix (3,2)
Let $CP_Press_Pressure03 = $CP_Press_Matrix (4,2)
Let $CP_Press_Pressure04 = $CP_Press_Matrix (5,2)
Let $CP_Press_Pressure05 = $CP_Press_Matrix (6,2)
Let $CP_Press_Pressure06 = $CP_Press_Matrix (7,2)
Let $CP_Press_Pressure07 = $CP_Press_Matrix (8,2)
Let $CP_Press_Pressure08 = $CP_Press_Matrix (9,2)
Let $CP_Press_Pressure09 = $CP_Press_Matrix (10,2)
Let $CP_Press_Pressure10 = $CP_Press_Matrix (11,2)
Let $CP_Press_Pressure11 = $CP_Press_Matrix (12,2)
Let $CP_Press_Pressure12 = $CP_Press_Matrix (13,2)
Let $CP_Press_Pressure13 = $CP_Press_Matrix (14,2)
Let $CP_Press_Pressure14 = $CP_Press_Matrix (15,2)
Let $CP_Press_Pressure15 = $CP_Press_Matrix (16,2)

'Set Line Pressure
Set TVPSC_P_CMD_TST_LNP_S ($CurrentRunLine,0)

'Zero test pressure profiles
Set TVPSC_P_CMD_TST_CLC_01_S (0,0)
Set TVPSC_P_CMD_TST_CLC_02_S (0,0)
Set TVPSC_P_CMD_TST_CLC_03_S (0,0)
Set TVPSC_P_CMD_TST_CLC_04_S (0,0)
Set TVPSC_P_CMD_TST_CLC_05_S (0,0)
Set TVPSC_P_CMD_TST_CLC_06_S (0,0)
Set TVPSC_P_CMD_TST_TCC_S (0,0)

'Set test override codes to oncoming pressure profile
Set TVPSC_D_OVRD_LNP_S (11,0)
Set TVPSC_D_OVRD_CLC_01_S (21,0)
Set TVPSC_D_OVRD_CLC_02_S (21,0)
Set TVPSC_D_OVRD_CLC_03_S (21,0)
Set TVPSC_D_OVRD_CLC_04_S (21,0)
Set TVPSC_D_OVRD_CLC_05_S (21,0)
Set TVPSC_D_OVRD_CLC_06_S (21,0)
Set TVPSC_D_OVRD_TCC_S (11,0)

'Check engine speed. Start engine is not running
Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2
If $TCRPM_NE_BAR_AVE2 < 100
	Gosub Start_Engine
End 

'Set engine/ turbine speed
Gosub Set_Engine_Speed
Wait (5)

'Set TRAM_Set flag to reset PCM parameters if test shuts down
Let $TRAM_Set = 1
Log_Message (TRAM_Set set to 1)

'Enable test mode
Set TVPSC_B_TST_ENBL_S (1,0)

'Disable OBDII
Set OBDII_TST_SW (0,0)
Wait (2)

Screen_Message (Green, Running custom pressure profile on %%!Element%%)
'Pause

'Set File Name
If $DitherType = 2
	Let !File_Name = Dither_CustomPressureProfile_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (Dither_CustomPressureProfile_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)
Else
	Let !File_Name = CustomPressureProfile_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec				
	File_Name (CustomPressureProfile_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)
End

'Start Vision Recorder
Gosub Record_Start
Wait (4)

'If preboost is enabled, set pressure command and enable test mode
If $CP_PreBoost = 1
	'Establish preboost pressure setpoint
	Let $Pressure_Blip = 3500
	Select_Case $CurrentRunElement
		Case = 2
			'Clutch A
			If $Trans_Select ~= 7
				'Non-8F35
				Set TVPSC_P_CMD_TST_CLC_01_S ($Pressure_Blip,0)
			End
		Case = 3
			'Clutch B
			Set TVPSC_P_CMD_TST_CLC_02_S ($Pressure_Blip,0)
		Case = 4
			'Clutch C
			Set TVPSC_P_CMD_TST_CLC_03_S ($Pressure_Blip,0)
		Case = 5
			'Clutch D
			If $Trans_Select = 3
				'10R140
				Set TVPSC_P_CMD_TST_CLC_04_S ($Pressure_Blip,0)
			End	
			If $Trans_Select = 6
				'10R60/80
				Set TVPSC_P_CMD_TST_CLC_04_S ($Pressure_Blip,0)
			End	
		Case = 6
			'Clutch E
			Set TVPSC_P_CMD_TST_CLC_05_S ($Pressure_Blip,0)
		Case = 7
			'Clutch F
			Set TVPSC_P_CMD_TST_CLC_06_S ($Pressure_Blip,0)
	End_Select
	Wait (0.01)
End

'Set profile test function time normalizer and pressure profile. Set override code to oncoming pressure profile
Select_Case $CurrentRunElement
	Case = 1
		'Line Pressure
		Set TVPSC_D_OVRD_LNP_S (12,0)
		'Time Normalizer
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,0) = $CP_Press_Time00
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,1) = $CP_Press_Time01
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,2) = $CP_Press_Time02
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,3) = $CP_Press_Time03
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,4) = $CP_Press_Time04
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,5) = $CP_Press_Time05
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,6) = $CP_Press_Time06
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,7) = $CP_Press_Time07
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,8) = $CP_Press_Time08
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,9) = $CP_Press_Time09
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,10) = $CP_Press_Time10
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,11) = $CP_Press_Time11
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,12) = $CP_Press_Time12
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,13) = $CP_Press_Time13
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,14) = $CP_Press_Time14
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,15) = $CP_Press_Time15
		'Pressure profile
		Set_Function_Table TVPSC_P_TST_LNP_T (1,0) = $CP_Press_Pressure00
		Set_Function_Table TVPSC_P_TST_LNP_T (1,1) = $CP_Press_Pressure01
		Set_Function_Table TVPSC_P_TST_LNP_T (1,2) = $CP_Press_Pressure02
		Set_Function_Table TVPSC_P_TST_LNP_T (1,3) = $CP_Press_Pressure03
		Set_Function_Table TVPSC_P_TST_LNP_T (1,4) = $CP_Press_Pressure04
		Set_Function_Table TVPSC_P_TST_LNP_T (1,5) = $CP_Press_Pressure05
		Set_Function_Table TVPSC_P_TST_LNP_T (1,6) = $CP_Press_Pressure06
		Set_Function_Table TVPSC_P_TST_LNP_T (1,7) = $CP_Press_Pressure07
		Set_Function_Table TVPSC_P_TST_LNP_T (1,8) = $CP_Press_Pressure08
		Set_Function_Table TVPSC_P_TST_LNP_T (1,9) = $CP_Press_Pressure09
		Set_Function_Table TVPSC_P_TST_LNP_T (1,10) = $CP_Press_Pressure10
		Set_Function_Table TVPSC_P_TST_LNP_T (1,11) = $CP_Press_Pressure11
		Set_Function_Table TVPSC_P_TST_LNP_T (1,12) = $CP_Press_Pressure12
		Set_Function_Table TVPSC_P_TST_LNP_T (1,13) = $CP_Press_Pressure13
		Set_Function_Table TVPSC_P_TST_LNP_T (1,14) = $CP_Press_Pressure14
		Set_Function_Table TVPSC_P_TST_LNP_T (1,15) = $CP_Press_Pressure15
		Set_Activate
	Case = 2
		'Clutch A
		Set TVPSC_D_OVRD_CLC_01_S (22,0)
		'Time normalizer
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,0) = $CP_Press_Time00
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,1) = $CP_Press_Time01
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,2) = $CP_Press_Time02
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,3) = $CP_Press_Time03
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,4) = $CP_Press_Time04
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,5) = $CP_Press_Time05
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,6) = $CP_Press_Time06
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,7) = $CP_Press_Time07
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,8) = $CP_Press_Time08
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,9) = $CP_Press_Time09
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,10) = $CP_Press_Time10
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,11) = $CP_Press_Time11
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,12) = $CP_Press_Time12
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,13) = $CP_Press_Time13
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,14) = $CP_Press_Time14
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,15) = $CP_Press_Time15
		'Pressure profile
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,0) = $CP_Press_Pressure00
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,1) = $CP_Press_Pressure01
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,2) = $CP_Press_Pressure02
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,3) = $CP_Press_Pressure03
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,4) = $CP_Press_Pressure04
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,5) = $CP_Press_Pressure05
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,6) = $CP_Press_Pressure06
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,7) = $CP_Press_Pressure07
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,8) = $CP_Press_Pressure08
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,9) = $CP_Press_Pressure09
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,10) = $CP_Press_Pressure10
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,11) = $CP_Press_Pressure11
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,12) = $CP_Press_Pressure12
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,13) = $CP_Press_Pressure13
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,14) = $CP_Press_Pressure14
		Set_Function_Table TVPSC_P_TST_CLC_01_T (1,15) = $CP_Press_Pressure15
		Set_Activate
	Case = 3
		'Clutch B
		Set TVPSC_D_OVRD_CLC_02_S (22,0)
		'Time Normalizer
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,0) = $CP_Press_Time00
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,1) = $CP_Press_Time01
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,2) = $CP_Press_Time02
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,3) = $CP_Press_Time03
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,4) = $CP_Press_Time04
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,5) = $CP_Press_Time05
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,6) = $CP_Press_Time06
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,7) = $CP_Press_Time07
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,8) = $CP_Press_Time08
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,9) = $CP_Press_Time09
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,10) = $CP_Press_Time10
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,11) = $CP_Press_Time11
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,12) = $CP_Press_Time12
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,13) = $CP_Press_Time13
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,14) = $CP_Press_Time14
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,15) = $CP_Press_Time15
		'Pressure Profile
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,0) = $CP_Press_Pressure00
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,1) = $CP_Press_Pressure01
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,2) = $CP_Press_Pressure02
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,3) = $CP_Press_Pressure03
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,4) = $CP_Press_Pressure04
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,5) = $CP_Press_Pressure05
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,6) = $CP_Press_Pressure06
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,7) = $CP_Press_Pressure07
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,8) = $CP_Press_Pressure08
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,9) = $CP_Press_Pressure09
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,10) = $CP_Press_Pressure10
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,11) = $CP_Press_Pressure11
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,12) = $CP_Press_Pressure12
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,13) = $CP_Press_Pressure13
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,14) = $CP_Press_Pressure14
		Set_Function_Table TVPSC_P_TST_CLC_02_T (1,15) = $CP_Press_Pressure15
		Set_Activate
	Case = 4
		'Clutch C
		Set TVPSC_D_OVRD_CLC_03_S (22,0)
		'Time Normalizer
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,0) = $CP_Press_Time00
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,1) = $CP_Press_Time01
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,2) = $CP_Press_Time02
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,3) = $CP_Press_Time03
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,4) = $CP_Press_Time04
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,5) = $CP_Press_Time05
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,6) = $CP_Press_Time06
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,7) = $CP_Press_Time07
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,8) = $CP_Press_Time08
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,9) = $CP_Press_Time09
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,10) = $CP_Press_Time10
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,11) = $CP_Press_Time11
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,12) = $CP_Press_Time12
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,13) = $CP_Press_Time13
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,14) = $CP_Press_Time14
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,15) = $CP_Press_Time15
		'Pressure profile
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,0) = $CP_Press_Pressure00
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,1) = $CP_Press_Pressure01
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,2) = $CP_Press_Pressure02
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,3) = $CP_Press_Pressure03
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,4) = $CP_Press_Pressure04
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,5) = $CP_Press_Pressure05
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,6) = $CP_Press_Pressure06
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,7) = $CP_Press_Pressure07
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,8) = $CP_Press_Pressure08
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,9) = $CP_Press_Pressure09
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,10) = $CP_Press_Pressure10
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,11) = $CP_Press_Pressure11
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,12) = $CP_Press_Pressure12
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,13) = $CP_Press_Pressure13
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,14) = $CP_Press_Pressure14
		Set_Function_Table TVPSC_P_TST_CLC_03_T (1,15) = $CP_Press_Pressure15
		Set_Activate
	Case = 5
		'Clutch D
		'Low Gain override switch to oncoming low gain pressure profile
		Set TVPSC_D_OVRD_CLC_04_S (22,0)
		'High gain oncoming pressure profile
		If $CurrentRunLine >= 1200
			Select_Case $Trans_Select 
				Case = 3
					'10R140
					Set TVPSC_D_OVRD_CLC_04_S (42,0)
				Case = 6
					'10R60/80
					Set TVPSC_D_OVRD_CLC_04_S (42,0)
				Case = 8
					'6R80
					Set TVPSC_D_OVRD_CLC_04_S (42,0)			
			End_Select	
		End	
		'Time Normalizer
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,0) = $CP_Press_Time00
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,1) = $CP_Press_Time01
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,2) = $CP_Press_Time02
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,3) = $CP_Press_Time03
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,4) = $CP_Press_Time04
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,5) = $CP_Press_Time05
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,6) = $CP_Press_Time06
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,7) = $CP_Press_Time07
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,8) = $CP_Press_Time08
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,9) = $CP_Press_Time09
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,10) = $CP_Press_Time10
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,11) = $CP_Press_Time11
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,12) = $CP_Press_Time12
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,13) = $CP_Press_Time13
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,14) = $CP_Press_Time14
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,15) = $CP_Press_Time15
		'Pressure profile
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,0) = $CP_Press_Pressure00
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,1) = $CP_Press_Pressure01
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,2) = $CP_Press_Pressure02
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,3) = $CP_Press_Pressure03
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,4) = $CP_Press_Pressure04
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,5) = $CP_Press_Pressure05
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,6) = $CP_Press_Pressure06
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,7) = $CP_Press_Pressure07
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,8) = $CP_Press_Pressure08
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,9) = $CP_Press_Pressure09
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,10) = $CP_Press_Pressure10
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,11) = $CP_Press_Pressure11
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,12) = $CP_Press_Pressure12
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,13) = $CP_Press_Pressure13
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,14) = $CP_Press_Pressure14
		Set_Function_Table TVPSC_P_TST_CLC_04_T (1,15) = $CP_Press_Pressure15
		Set_Activate
	Case = 6
		'Clutch E
		Set TVPSC_D_OVRD_CLC_05_S (22,0)
		'Set override code to high gain oncoming pressure profile for 10R140 and 10R60/80
		'Confirm that we are still using multiple gain
		If $CurrentRunLine >= 1200
			Select_Case $Trans_Select 
				Case = 3
					'10R140
					Set TVPSC_D_OVRD_CLC_05_S (42,0)
				Case = 6
					'10R60/80
					Set TVPSC_D_OVRD_CLC_05_S (42,0)
				Case = 8
					'6R80
					Set TVPSC_D_OVRD_CLC_05_S (42,0)
			End_Select		
		End		
		'Time Normalizer
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,0) = $CP_Press_Time00
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,1) = $CP_Press_Time01
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,2) = $CP_Press_Time02
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,3) = $CP_Press_Time03
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,4) = $CP_Press_Time04
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,5) = $CP_Press_Time05
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,6) = $CP_Press_Time06
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,7) = $CP_Press_Time07
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,8) = $CP_Press_Time08
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,9) = $CP_Press_Time09
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,10) = $CP_Press_Time10
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,11) = $CP_Press_Time11
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,12) = $CP_Press_Time12
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,13) = $CP_Press_Time13
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,14) = $CP_Press_Time14
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,15) = $CP_Press_Time15
		'Pressure profile
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,0) = $CP_Press_Pressure00
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,1) = $CP_Press_Pressure01
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,2) = $CP_Press_Pressure02
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,3) = $CP_Press_Pressure03
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,4) = $CP_Press_Pressure04
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,5) = $CP_Press_Pressure05
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,6) = $CP_Press_Pressure06
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,7) = $CP_Press_Pressure07
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,8) = $CP_Press_Pressure08
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,9) = $CP_Press_Pressure09
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,10) = $CP_Press_Pressure10
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,11) = $CP_Press_Pressure11
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,12) = $CP_Press_Pressure12
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,13) = $CP_Press_Pressure13
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,14) = $CP_Press_Pressure14
		Set_Function_Table TVPSC_P_TST_CLC_05_T (1,15) = $CP_Press_Pressure15
		Set_Activate
	Case = 7
		'Clutch F
		Set TVPSC_D_OVRD_CLC_06_S (22,0)
		'Time Normalizer
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,0) = $CP_Press_Time00
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,1) = $CP_Press_Time01
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,2) = $CP_Press_Time02
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,3) = $CP_Press_Time03
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,4) = $CP_Press_Time04
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,5) = $CP_Press_Time05
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,6) = $CP_Press_Time06
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,7) = $CP_Press_Time07
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,8) = $CP_Press_Time08
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,9) = $CP_Press_Time09
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,10) = $CP_Press_Time10
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,11) = $CP_Press_Time11
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,12) = $CP_Press_Time12
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,13) = $CP_Press_Time13
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,14) = $CP_Press_Time14
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,15) = $CP_Press_Time15
		'Pressure Profile
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,0) = $CP_Press_Pressure00
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,1) = $CP_Press_Pressure01
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,2) = $CP_Press_Pressure02
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,3) = $CP_Press_Pressure03
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,4) = $CP_Press_Pressure04
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,5) = $CP_Press_Pressure05
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,6) = $CP_Press_Pressure06
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,7) = $CP_Press_Pressure07
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,8) = $CP_Press_Pressure08
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,9) = $CP_Press_Pressure09
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,10) = $CP_Press_Pressure10
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,11) = $CP_Press_Pressure11
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,12) = $CP_Press_Pressure12
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,13) = $CP_Press_Pressure13
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,14) = $CP_Press_Pressure14
		Set_Function_Table TVPSC_P_TST_CLC_06_T (1,15) = $CP_Press_Pressure15
		Set_Activate
	Case = 8
		'TCC
		Set TVPSC_D_OVRD_TCC_S (12,0)
		'Time Normalizer
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,0) = $CP_Press_Time00
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,1) = $CP_Press_Time01
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,2) = $CP_Press_Time02
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,3) = $CP_Press_Time03
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,4) = $CP_Press_Time04
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,5) = $CP_Press_Time05
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,6) = $CP_Press_Time06
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,7) = $CP_Press_Time07
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,8) = $CP_Press_Time08
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,9) = $CP_Press_Time09
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,10) = $CP_Press_Time10
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,11) = $CP_Press_Time11
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,12) = $CP_Press_Time12
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,13) = $CP_Press_Time13
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,14) = $CP_Press_Time14
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,15) = $CP_Press_Time15
		'Pressure profile
		Set_Function_Table TVPSC_P_TST_TCC_T (1,0) = $CP_Press_Pressure00
		Set_Function_Table TVPSC_P_TST_TCC_T (1,1) = $CP_Press_Pressure01
		Set_Function_Table TVPSC_P_TST_TCC_T (1,2) = $CP_Press_Pressure02
		Set_Function_Table TVPSC_P_TST_TCC_T (1,3) = $CP_Press_Pressure03
		Set_Function_Table TVPSC_P_TST_TCC_T (1,4) = $CP_Press_Pressure04
		Set_Function_Table TVPSC_P_TST_TCC_T (1,5) = $CP_Press_Pressure05
		Set_Function_Table TVPSC_P_TST_TCC_T (1,6) = $CP_Press_Pressure06
		Set_Function_Table TVPSC_P_TST_TCC_T (1,7) = $CP_Press_Pressure07
		Set_Function_Table TVPSC_P_TST_TCC_T (1,8) = $CP_Press_Pressure08
		Set_Function_Table TVPSC_P_TST_TCC_T (1,9) = $CP_Press_Pressure09
		Set_Function_Table TVPSC_P_TST_TCC_T (1,10) = $CP_Press_Pressure10
		Set_Function_Table TVPSC_P_TST_TCC_T (1,11) = $CP_Press_Pressure11
		Set_Function_Table TVPSC_P_TST_TCC_T (1,12) = $CP_Press_Pressure12
		Set_Function_Table TVPSC_P_TST_TCC_T (1,13) = $CP_Press_Pressure13
		Set_Function_Table TVPSC_P_TST_TCC_T (1,14) = $CP_Press_Pressure14
		Set_Function_Table TVPSC_P_TST_TCC_T (1,15) = $CP_Press_Pressure15
		Set_Activate
End_Select
' Screen_Message (Yellow, Check Pressure table)
' Pause

'Start profile test switch
Set TVPSC_B_TST_STRT_ALL_S (1,0)

'Calculate wait times
Let $Profile_WaitTime = $CP_Press_Time15 / 1000
Let $Profile_WaitTime = $Profile_WaitTime + 2

'Apply calculated wait time
Wait ($Profile_WaitTime)


'Reset test switch
Set TVPSC_B_TST_STRT_ALL_S (0,0)

'End Vision recorder
Gosub Record_End
Wait (2)

'Reset engine speed back to base
Gosub Reset_Engine_Speed

'Turn on engine speed monitor
'Monitor_On Engine_Running
'Log_Message (Starting Engine_Running monitor. Run_CustomProfile_Pressure.)

'Shift PRNDL to Neutral
If $THMI_ST_PRND_DES ~= 3
	Let $Desired_PRNDL_Position = 2
	Gosub Set_PRNDL_Position
End

'Disable test mode and reset start switch
Set TVPSC_B_TST_STRT_ALL_S (0,0)
Set TVPSC_B_TST_ENBL_S (0,0)

End_Sub

'******************************************************
Sub Run_CustomProfile_Current
'******************************************************
Log_Message (Starting Run_CustomProfile_Current subroutine)

'Select appropriate current profile matrix
Select_Case $CurrentRunElement
	Case = 1
		'Line Pressure
		Let $CP_Current_Matrix = $CP_Current_Matrix_0
	Case = 2
		'Clutch A
		Let $CP_Current_Matrix = $CP_Current_Matrix_1
	Case = 3
		'Clutch B
		Let $CP_Current_Matrix = $CP_Current_Matrix_2
	Case = 4
		'Clutch C
		Let $CP_Current_Matrix = $CP_Current_Matrix_3
	Case = 5
		'Clutch D
		Let $CP_Current_Matrix = $CP_Current_Matrix_4
	Case = 6
		'Clutch E
		Let $CP_Current_Matrix = $CP_Current_Matrix_5
	Case = 7
		'Clutch F
		Let $CP_Current_Matrix = $CP_Current_Matrix_6
	Case = 8
		'TCC
		Let $CP_Current_Matrix = $CP_Current_Matrix_7
End_Select

'Set time normalizer variable from the current profile matrix
Let $CP_Current_Time00 = $CP_Current_Matrix (1,1)
Let $CP_Current_Time01 = $CP_Current_Matrix (2,1)
Let $CP_Current_Time02 = $CP_Current_Matrix (3,1)
Let $CP_Current_Time03 = $CP_Current_Matrix (4,1)
Let $CP_Current_Time04 = $CP_Current_Matrix (5,1)
Let $CP_Current_Time05 = $CP_Current_Matrix (6,1)
Let $CP_Current_Time06 = $CP_Current_Matrix (7,1)
Let $CP_Current_Time07 = $CP_Current_Matrix (8,1)
Let $CP_Current_Time08 = $CP_Current_Matrix (9,1)
Let $CP_Current_Time09 = $CP_Current_Matrix (10,1)
Let $CP_Current_Time10 = $CP_Current_Matrix (11,1)
Let $CP_Current_Time11 = $CP_Current_Matrix (12,1)
Let $CP_Current_Time12 = $CP_Current_Matrix (13,1)
Let $CP_Current_Time13 = $CP_Current_Matrix (14,1)
Let $CP_Current_Time14 = $CP_Current_Matrix (15,1)
Let $CP_Current_Time15 = $CP_Current_Matrix (16,1)

'Set current profile variables from the current profile matrix
Let $CP_Current_Current00 = $CP_Current_Matrix (1,2)
Let $CP_Current_Current01 = $CP_Current_Matrix (2,2)
Let $CP_Current_Current02 = $CP_Current_Matrix (3,2)
Let $CP_Current_Current03 = $CP_Current_Matrix (4,2)
Let $CP_Current_Current04 = $CP_Current_Matrix (5,2)
Let $CP_Current_Current05 = $CP_Current_Matrix (6,2)
Let $CP_Current_Current06 = $CP_Current_Matrix (7,2)
Let $CP_Current_Current07 = $CP_Current_Matrix (8,2)
Let $CP_Current_Current08 = $CP_Current_Matrix (9,2)
Let $CP_Current_Current09 = $CP_Current_Matrix (10,2)
Let $CP_Current_Current10 = $CP_Current_Matrix (11,2)
Let $CP_Current_Current11 = $CP_Current_Matrix (12,2)
Let $CP_Current_Current12 = $CP_Current_Matrix (13,2)
Let $CP_Current_Current13 = $CP_Current_Matrix (14,2)
Let $CP_Current_Current14 = $CP_Current_Matrix (15,2)
Let $CP_Current_Current15 = $CP_Current_Matrix (16,2)

'Set TRAM_Set flag to reset PCM parameters in case test shuts down
Let $TRAM_Set = 1
Log_Message (TRAM_Set set to 1)

'Disable OBDII
Set OBDII_TST_SW (0,0)

'Enable test mode
Set TVPSC_B_TST_ENBL_S (1,0)

'Set Line Pressure
Set TVPSC_P_CMD_TST_LNP_S ($CurrentRunLine,0)

'Zero all clutch test pressures
Set TVPSC_P_CMD_TST_CLC_01_S (0,0)
Set TVPSC_P_CMD_TST_CLC_02_S (0,0)
Set TVPSC_P_CMD_TST_CLC_03_S (0,0)
Set TVPSC_P_CMD_TST_CLC_04_S (0,0)
Set TVPSC_P_CMD_TST_CLC_05_S (0,0)
Set TVPSC_P_CMD_TST_CLC_06_S (0,0)
Set TVPSC_P_CMD_TST_TCC_S (0,0)

'Set test override code to oncoming current profile
Set TVPSC_D_OVRD_LNP_S (11,0)
Set TVPSC_D_OVRD_CLC_01_S (11,0)
Set TVPSC_D_OVRD_CLC_02_S (11,0)
Set TVPSC_D_OVRD_CLC_03_S (11,0)
Set TVPSC_D_OVRD_CLC_04_S (11,0)
Set TVPSC_D_OVRD_CLC_05_S (11,0)
Set TVPSC_D_OVRD_CLC_06_S (11,0)
Set TVPSC_D_OVRD_TCC_S (11,0)

'Check engine speed. Start engine if not running
Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2
If $TCRPM_NE_BAR_AVE2 < 100
	If $Vehicle_Flag = 1
	'Prompt driver to start engine
		Screen_Message (Yellow,Please start engine and press 'Resume Test' when ready)
		Pause
	Else
		'Start engine automatically
		Gosub Start_Engine
	End	
End  

'Set engine/ turbine speed
Gosub Set_Engine_Speed

Wait (5)

'Start engine speed monitor
Monitor_On Engine_Running
Log_Message (Starting Engine_Running monitor. Run_CustomProfile_Current.)

Wait (2)

'If custom current profile preboost is enabled, set preboost current, and enable test mode
If $CP_PreBoost = 1
	Let $CurrentBlip = 1.1
	Select_Case $CurrentRunElement
		Case = 2
			'Clutch A
			If $Trans_Select = 7
				Set TVPSC_D_OVRD_CLC_01_S (1,0)
				Set TVPSC_IA_CMD_TST_CLC_01_S ($CurrentBlip,0)
			End	
		Case = 3
			'Clutch B
			Set TVPSC_D_OVRD_CLC_02_S (1,0)
			Set TVPSC_IA_CMD_TST_CLC_02_S ($CurrentBlip,0)
		Case = 4
			'Clutch C
			Set TVPSC_D_OVRD_CLC_03_S (1,0)
			Set TVPSC_IA_CMD_TST_CLC_03_S ($CurrentBlip,0)
		Case = 5
			'Clutch D
			Set TVPSC_D_OVRD_CLC_04_S (1,0)
			Set TVPSC_IA_CMD_TST_CLC_04_S ($CurrentBlip,0)
		Case = 6
			'Clutch E
			Set TVPSC_D_OVRD_CLC_05_S (1,0)
			Set TVPSC_IA_CMD_TST_CLC_05_S ($CurrentBlip,0)
		Case = 7
			'Clutch F
			Set TVPSC_D_OVRD_CLC_06_S (1,0)
			Set TVPSC_IA_CMD_TST_CLC_06_S ($CurrentBlip,0)
	End_Select
	Wait (0.01)
End

'Set current profile test function and test override code to oncoming current profile
Select_Case $CurrentRunElement
	Case = 1
		'Line Pressure
		Set TVPSC_D_OVRD_LNP_S (2,0)
		
		'Test normalizer
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,0) = $CP_Current_Time00
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,1) = $CP_Current_Time01
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,2) = $CP_Current_Time02
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,3) = $CP_Current_Time03
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,4) = $CP_Current_Time04
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,5) = $CP_Current_Time05
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,6) = $CP_Current_Time06
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,7) = $CP_Current_Time07
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,8) = $CP_Current_Time08
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,9) = $CP_Current_Time09
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,10) = $CP_Current_Time10
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,11) = $CP_Current_Time11
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,12) = $CP_Current_Time12
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,13) = $CP_Current_Time13
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,14) = $CP_Current_Time14
		Set_Function_Table TVPSC_TM_TST_LNP_N (1,15) = $CP_Current_Time15
		
		'Current profile
		Set_Function_Table TVPSC_IA_TST_LNP_T (1,0) = $CP_Current_Current00
		Set_Function_Table TVPSC_IA_TST_LNP_T (1,1) = $CP_Current_Current01
		Set_Function_Table TVPSC_IA_TST_LNP_T (1,2) = $CP_Current_Current02
		Set_Function_Table TVPSC_IA_TST_LNP_T (1,3) = $CP_Current_Current03
		Set_Function_Table TVPSC_IA_TST_LNP_T (1,4) = $CP_Current_Current04
		Set_Function_Table TVPSC_IA_TST_LNP_T (1,5) = $CP_Current_Current05
		Set_Function_Table TVPSC_IA_TST_LNP_T (1,6) = $CP_Current_Current06
		Set_Function_Table TVPSC_IA_TST_LNP_T (1,7) = $CP_Current_Current07
		Set_Function_Table TVPSC_IA_TST_LNP_T (1,8) = $CP_Current_Current08
		Set_Function_Table TVPSC_IA_TST_LNP_T (1,9) = $CP_Current_Current09
		Set_Function_Table TVPSC_IA_TST_LNP_T (1,10) = $CP_Current_Current10
		Set_Function_Table TVPSC_IA_TST_LNP_T (1,11) = $CP_Current_Current11
		Set_Function_Table TVPSC_IA_TST_LNP_T (1,12) = $CP_Current_Current12
		Set_Function_Table TVPSC_IA_TST_LNP_T (1,13) = $CP_Current_Current13
		Set_Function_Table TVPSC_IA_TST_LNP_T (1,14) = $CP_Current_Current14
		Set_Function_Table TVPSC_IA_TST_LNP_T (1,15) = $CP_Current_Current15
		Set_Activate
	Case = 2
		'Clutch A
		Set TVPSC_D_OVRD_CLC_01_S (2,0)
		
		'Time normalizer
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,0) = $CP_Current_Time00
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,1) = $CP_Current_Time01
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,2) = $CP_Current_Time02
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,3) = $CP_Current_Time03
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,4) = $CP_Current_Time04
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,5) = $CP_Current_Time05
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,6) = $CP_Current_Time06
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,7) = $CP_Current_Time07
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,8) = $CP_Current_Time08
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,9) = $CP_Current_Time09
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,10) = $CP_Current_Time10
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,11) = $CP_Current_Time11
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,12) = $CP_Current_Time12
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,13) = $CP_Current_Time13
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,14) = $CP_Current_Time14
		Set_Function_Table TVPSC_TM_TST_CLC_01_N (1,15) = $CP_Current_Time15
		
		'Current profile
		Set_Function_Table TVPSC_IA_TST_CLC_01_T (1,0) = $CP_Current_Current00
		Set_Function_Table TVPSC_IA_TST_CLC_01_T (1,1) = $CP_Current_Current01
		Set_Function_Table TVPSC_IA_TST_CLC_01_T (1,2) = $CP_Current_Current02
		Set_Function_Table TVPSC_IA_TST_CLC_01_T (1,3) = $CP_Current_Current03
		Set_Function_Table TVPSC_IA_TST_CLC_01_T (1,4) = $CP_Current_Current04
		Set_Function_Table TVPSC_IA_TST_CLC_01_T (1,5) = $CP_Current_Current05
		Set_Function_Table TVPSC_IA_TST_CLC_01_T (1,6) = $CP_Current_Current06
		Set_Function_Table TVPSC_IA_TST_CLC_01_T (1,7) = $CP_Current_Current07
		Set_Function_Table TVPSC_IA_TST_CLC_01_T (1,8) = $CP_Current_Current08
		Set_Function_Table TVPSC_IA_TST_CLC_01_T (1,9) = $CP_Current_Current09
		Set_Function_Table TVPSC_IA_TST_CLC_01_T (1,10) = $CP_Current_Current10
		Set_Function_Table TVPSC_IA_TST_CLC_01_T (1,11) = $CP_Current_Current11
		Set_Function_Table TVPSC_IA_TST_CLC_01_T (1,12) = $CP_Current_Current12
		Set_Function_Table TVPSC_IA_TST_CLC_01_T (1,13) = $CP_Current_Current13
		Set_Function_Table TVPSC_IA_TST_CLC_01_T (1,14) = $CP_Current_Current14
		Set_Function_Table TVPSC_IA_TST_CLC_01_T (1,15) = $CP_Current_Current15
		Set_Activate
	Case = 3
		'Clutch B
		Set TVPSC_D_OVRD_CLC_02_S (2,0)
		
		'Time normalizer
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,0) = $CP_Current_Time00
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,1) = $CP_Current_Time01
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,2) = $CP_Current_Time02
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,3) = $CP_Current_Time03
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,4) = $CP_Current_Time04
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,5) = $CP_Current_Time05
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,6) = $CP_Current_Time06
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,7) = $CP_Current_Time07
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,8) = $CP_Current_Time08
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,9) = $CP_Current_Time09
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,10) = $CP_Current_Time10
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,11) = $CP_Current_Time11
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,12) = $CP_Current_Time12
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,13) = $CP_Current_Time13
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,14) = $CP_Current_Time14
		Set_Function_Table TVPSC_TM_TST_CLC_02_N (1,15) = $CP_Current_Time15
		'Current profile
		Set_Function_Table TVPSC_IA_TST_CLC_02_T (1,0) = $CP_Current_Current00
		Set_Function_Table TVPSC_IA_TST_CLC_02_T (1,1) = $CP_Current_Current01
		Set_Function_Table TVPSC_IA_TST_CLC_02_T (1,2) = $CP_Current_Current02
		Set_Function_Table TVPSC_IA_TST_CLC_02_T (1,3) = $CP_Current_Current03
		Set_Function_Table TVPSC_IA_TST_CLC_02_T (1,4) = $CP_Current_Current04
		Set_Function_Table TVPSC_IA_TST_CLC_02_T (1,5) = $CP_Current_Current05
		Set_Function_Table TVPSC_IA_TST_CLC_02_T (1,6) = $CP_Current_Current06
		Set_Function_Table TVPSC_IA_TST_CLC_02_T (1,7) = $CP_Current_Current07
		Set_Function_Table TVPSC_IA_TST_CLC_02_T (1,8) = $CP_Current_Current08
		Set_Function_Table TVPSC_IA_TST_CLC_02_T (1,9) = $CP_Current_Current09
		Set_Function_Table TVPSC_IA_TST_CLC_02_T (1,10) = $CP_Current_Current10
		Set_Function_Table TVPSC_IA_TST_CLC_02_T (1,11) = $CP_Current_Current11
		Set_Function_Table TVPSC_IA_TST_CLC_02_T (1,12) = $CP_Current_Current12
		Set_Function_Table TVPSC_IA_TST_CLC_02_T (1,13) = $CP_Current_Current13
		Set_Function_Table TVPSC_IA_TST_CLC_02_T (1,14) = $CP_Current_Current14
		Set_Function_Table TVPSC_IA_TST_CLC_02_T (1,15) = $CP_Current_Current15
		Set_Activate
	Case = 4
		'Clutch C
		Set TVPSC_D_OVRD_CLC_03_S (2,0)
		
		'Time Normalizer
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,0) = $CP_Current_Time00
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,1) = $CP_Current_Time01
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,2) = $CP_Current_Time02
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,3) = $CP_Current_Time03
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,4) = $CP_Current_Time04
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,5) = $CP_Current_Time05
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,6) = $CP_Current_Time06
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,7) = $CP_Current_Time07
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,8) = $CP_Current_Time08
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,9) = $CP_Current_Time09
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,10) = $CP_Current_Time10
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,11) = $CP_Current_Time11
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,12) = $CP_Current_Time12
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,13) = $CP_Current_Time13
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,14) = $CP_Current_Time14
		Set_Function_Table TVPSC_TM_TST_CLC_03_N (1,15) = $CP_Current_Time15
		
		'Current profile
		Set_Function_Table TVPSC_IA_TST_CLC_03_T (1,0) = $CP_Current_Current00
		Set_Function_Table TVPSC_IA_TST_CLC_03_T (1,1) = $CP_Current_Current01
		Set_Function_Table TVPSC_IA_TST_CLC_03_T (1,2) = $CP_Current_Current02
		Set_Function_Table TVPSC_IA_TST_CLC_03_T (1,3) = $CP_Current_Current03
		Set_Function_Table TVPSC_IA_TST_CLC_03_T (1,4) = $CP_Current_Current04
		Set_Function_Table TVPSC_IA_TST_CLC_03_T (1,5) = $CP_Current_Current05
		Set_Function_Table TVPSC_IA_TST_CLC_03_T (1,6) = $CP_Current_Current06
		Set_Function_Table TVPSC_IA_TST_CLC_03_T (1,7) = $CP_Current_Current07
		Set_Function_Table TVPSC_IA_TST_CLC_03_T (1,8) = $CP_Current_Current08
		Set_Function_Table TVPSC_IA_TST_CLC_03_T (1,9) = $CP_Current_Current09
		Set_Function_Table TVPSC_IA_TST_CLC_03_T (1,10) = $CP_Current_Current10
		Set_Function_Table TVPSC_IA_TST_CLC_03_T (1,11) = $CP_Current_Current11
		Set_Function_Table TVPSC_IA_TST_CLC_03_T (1,12) = $CP_Current_Current12
		Set_Function_Table TVPSC_IA_TST_CLC_03_T (1,13) = $CP_Current_Current13
		Set_Function_Table TVPSC_IA_TST_CLC_03_T (1,14) = $CP_Current_Current14
		Set_Function_Table TVPSC_IA_TST_CLC_03_T (1,15) = $CP_Current_Current15
		Set_Activate
	Case = 5
		'Clutch D
		Set TVPSC_D_OVRD_CLC_04_S (2,0)
		
		'Time Normalizer
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,0) = $CP_Current_Time00
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,1) = $CP_Current_Time01
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,2) = $CP_Current_Time02
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,3) = $CP_Current_Time03
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,4) = $CP_Current_Time04
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,5) = $CP_Current_Time05
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,6) = $CP_Current_Time06
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,7) = $CP_Current_Time07
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,8) = $CP_Current_Time08
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,9) = $CP_Current_Time09
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,10) = $CP_Current_Time10
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,11) = $CP_Current_Time11
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,12) = $CP_Current_Time12
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,13) = $CP_Current_Time13
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,14) = $CP_Current_Time14
		Set_Function_Table TVPSC_TM_TST_CLC_04_N (1,15) = $CP_Current_Time15
		
		'Current profile
		Set_Function_Table TVPSC_IA_TST_CLC_04_T (1,0) = $CP_Current_Current00
		Set_Function_Table TVPSC_IA_TST_CLC_04_T (1,1) = $CP_Current_Current01
		Set_Function_Table TVPSC_IA_TST_CLC_04_T (1,2) = $CP_Current_Current02
		Set_Function_Table TVPSC_IA_TST_CLC_04_T (1,3) = $CP_Current_Current03
		Set_Function_Table TVPSC_IA_TST_CLC_04_T (1,4) = $CP_Current_Current04
		Set_Function_Table TVPSC_IA_TST_CLC_04_T (1,5) = $CP_Current_Current05
		Set_Function_Table TVPSC_IA_TST_CLC_04_T (1,6) = $CP_Current_Current06
		Set_Function_Table TVPSC_IA_TST_CLC_04_T (1,7) = $CP_Current_Current07
		Set_Function_Table TVPSC_IA_TST_CLC_04_T (1,8) = $CP_Current_Current08
		Set_Function_Table TVPSC_IA_TST_CLC_04_T (1,9) = $CP_Current_Current09
		Set_Function_Table TVPSC_IA_TST_CLC_04_T (1,10) = $CP_Current_Current10
		Set_Function_Table TVPSC_IA_TST_CLC_04_T (1,11) = $CP_Current_Current11
		Set_Function_Table TVPSC_IA_TST_CLC_04_T (1,12) = $CP_Current_Current12
		Set_Function_Table TVPSC_IA_TST_CLC_04_T (1,13) = $CP_Current_Current13
		Set_Function_Table TVPSC_IA_TST_CLC_04_T (1,14) = $CP_Current_Current14
		Set_Function_Table TVPSC_IA_TST_CLC_04_T (1,15) = $CP_Current_Current15
		Set_Activate
	Case = 6
		'Clutch E
		Set TVPSC_D_OVRD_CLC_05_S (2,0)
		'Time normalizer
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,0) = $CP_Current_Time00
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,1) = $CP_Current_Time01
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,2) = $CP_Current_Time02
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,3) = $CP_Current_Time03
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,4) = $CP_Current_Time04
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,5) = $CP_Current_Time05
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,6) = $CP_Current_Time06
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,7) = $CP_Current_Time07
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,8) = $CP_Current_Time08
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,9) = $CP_Current_Time09
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,10) = $CP_Current_Time10
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,11) = $CP_Current_Time11
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,12) = $CP_Current_Time12
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,13) = $CP_Current_Time13
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,14) = $CP_Current_Time14
		Set_Function_Table TVPSC_TM_TST_CLC_05_N (1,15) = $CP_Current_Time15
		
		'Current profile
		Set_Function_Table TVPSC_IA_TST_CLC_05_T (1,0) = $CP_Current_Current00
		Set_Function_Table TVPSC_IA_TST_CLC_05_T (1,1) = $CP_Current_Current01
		Set_Function_Table TVPSC_IA_TST_CLC_05_T (1,2) = $CP_Current_Current02
		Set_Function_Table TVPSC_IA_TST_CLC_05_T (1,3) = $CP_Current_Current03
		Set_Function_Table TVPSC_IA_TST_CLC_05_T (1,4) = $CP_Current_Current04
		Set_Function_Table TVPSC_IA_TST_CLC_05_T (1,5) = $CP_Current_Current05
		Set_Function_Table TVPSC_IA_TST_CLC_05_T (1,6) = $CP_Current_Current06
		Set_Function_Table TVPSC_IA_TST_CLC_05_T (1,7) = $CP_Current_Current07
		Set_Function_Table TVPSC_IA_TST_CLC_05_T (1,8) = $CP_Current_Current08
		Set_Function_Table TVPSC_IA_TST_CLC_05_T (1,9) = $CP_Current_Current09
		Set_Function_Table TVPSC_IA_TST_CLC_05_T (1,10) = $CP_Current_Current10
		Set_Function_Table TVPSC_IA_TST_CLC_05_T (1,11) = $CP_Current_Current11
		Set_Function_Table TVPSC_IA_TST_CLC_05_T (1,12) = $CP_Current_Current12
		Set_Function_Table TVPSC_IA_TST_CLC_05_T (1,13) = $CP_Current_Current13
		Set_Function_Table TVPSC_IA_TST_CLC_05_T (1,14) = $CP_Current_Current14
		Set_Function_Table TVPSC_IA_TST_CLC_05_T (1,15) = $CP_Current_Current15
		Set_Activate
	Case = 7
		'Clutch F
		Set TVPSC_D_OVRD_CLC_06_S (2,0)
		'Time normalizer
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,0) = $CP_Current_Time00
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,1) = $CP_Current_Time01
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,2) = $CP_Current_Time02
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,3) = $CP_Current_Time03
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,4) = $CP_Current_Time04
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,5) = $CP_Current_Time05
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,6) = $CP_Current_Time06
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,7) = $CP_Current_Time07
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,8) = $CP_Current_Time08
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,9) = $CP_Current_Time09
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,10) = $CP_Current_Time10
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,11) = $CP_Current_Time11
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,12) = $CP_Current_Time12
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,13) = $CP_Current_Time13
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,14) = $CP_Current_Time14
		Set_Function_Table TVPSC_TM_TST_CLC_06_N (1,15) = $CP_Current_Time15
		
		'Current profile
		Set_Function_Table TVPSC_IA_TST_CLC_06_T (1,0) = $CP_Current_Current00
		Set_Function_Table TVPSC_IA_TST_CLC_06_T (1,1) = $CP_Current_Current01
		Set_Function_Table TVPSC_IA_TST_CLC_06_T (1,2) = $CP_Current_Current02
		Set_Function_Table TVPSC_IA_TST_CLC_06_T (1,3) = $CP_Current_Current03
		Set_Function_Table TVPSC_IA_TST_CLC_06_T (1,4) = $CP_Current_Current04
		Set_Function_Table TVPSC_IA_TST_CLC_06_T (1,5) = $CP_Current_Current05
		Set_Function_Table TVPSC_IA_TST_CLC_06_T (1,6) = $CP_Current_Current06
		Set_Function_Table TVPSC_IA_TST_CLC_06_T (1,7) = $CP_Current_Current07
		Set_Function_Table TVPSC_IA_TST_CLC_06_T (1,8) = $CP_Current_Current08
		Set_Function_Table TVPSC_IA_TST_CLC_06_T (1,9) = $CP_Current_Current09
		Set_Function_Table TVPSC_IA_TST_CLC_06_T (1,10) = $CP_Current_Current10
		Set_Function_Table TVPSC_IA_TST_CLC_06_T (1,11) = $CP_Current_Current11
		Set_Function_Table TVPSC_IA_TST_CLC_06_T (1,12) = $CP_Current_Current12
		Set_Function_Table TVPSC_IA_TST_CLC_06_T (1,13) = $CP_Current_Current13
		Set_Function_Table TVPSC_IA_TST_CLC_06_T (1,14) = $CP_Current_Current14
		Set_Function_Table TVPSC_IA_TST_CLC_06_T (1,15) = $CP_Current_Current15
		Set_Activate
	Case = 8
		'TCC
		Set TVPSC_D_OVRD_TCC_S (2,0)
		
		'Time normalizer
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,0) = $CP_Current_Time00
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,1) = $CP_Current_Time01
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,2) = $CP_Current_Time02
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,3) = $CP_Current_Time03
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,4) = $CP_Current_Time04
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,5) = $CP_Current_Time05
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,6) = $CP_Current_Time06
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,7) = $CP_Current_Time07
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,8) = $CP_Current_Time08
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,9) = $CP_Current_Time09
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,10) = $CP_Current_Time10
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,11) = $CP_Current_Time11
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,12) = $CP_Current_Time12
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,13) = $CP_Current_Time13
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,14) = $CP_Current_Time14
		Set_Function_Table TVPSC_TM_TST_TCC_N (1,15) = $CP_Current_Time15
		
		'Current Profile
		Set_Function_Table TVPSC_IA_TST_TCC_T (1,0) = $CP_Current_Current00
		Set_Function_Table TVPSC_IA_TST_TCC_T (1,1) = $CP_Current_Current01
		Set_Function_Table TVPSC_IA_TST_TCC_T (1,2) = $CP_Current_Current02
		Set_Function_Table TVPSC_IA_TST_TCC_T (1,3) = $CP_Current_Current03
		Set_Function_Table TVPSC_IA_TST_TCC_T (1,4) = $CP_Current_Current04
		Set_Function_Table TVPSC_IA_TST_TCC_T (1,5) = $CP_Current_Current05
		Set_Function_Table TVPSC_IA_TST_TCC_T (1,6) = $CP_Current_Current06
		Set_Function_Table TVPSC_IA_TST_TCC_T (1,7) = $CP_Current_Current07
		Set_Function_Table TVPSC_IA_TST_TCC_T (1,8) = $CP_Current_Current08
		Set_Function_Table TVPSC_IA_TST_TCC_T (1,9) = $CP_Current_Current09
		Set_Function_Table TVPSC_IA_TST_TCC_T (1,10) = $CP_Current_Current10
		Set_Function_Table TVPSC_IA_TST_TCC_T (1,11) = $CP_Current_Current11
		Set_Function_Table TVPSC_IA_TST_TCC_T (1,12) = $CP_Current_Current12
		Set_Function_Table TVPSC_IA_TST_TCC_T (1,13) = $CP_Current_Current13
		Set_Function_Table TVPSC_IA_TST_TCC_T (1,14) = $CP_Current_Current14
		Set_Function_Table TVPSC_IA_TST_TCC_T (1,15) = $CP_Current_Current15
		Set_Activate
End_Select
'Screen_Message (Yellow,Check Settings before proceeding)
'Pause

'Set File Name
If $DitherType = 2
	Let !File_Name = Dither_CustomCurrentProfile_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec	
	File_Name (Dither_CustomCurrentProfile_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)
Else
	Let !File_Name = CustomCurrentProfile_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (CustomCurrentProfile_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)
End	

'Start Vision Recorder
Gosub Record_Start

Screen_Message (Green, Running custom current profile on %%!Element%%)
Wait (4)

'Start profile test switch
Set TVPSC_B_TST_STRT_ALL_S (1,0)

'Calculate wait time
Let $Profile_WaitTime = $CP_Current_Time15 / 1000
Let $Profile_WaitTime = $Profile_WaitTime + 2
Wait ($Profile_WaitTime)

'Reset profile test switch
Set TVPSC_B_TST_STRT_ALL_S (0,0)

'End Vision Recorder
Gosub Record_End

Screen_Message (Green, Custom profile complete.)
Wait (2)

'Reset engine speed
Gosub Reset_Engine_Speed

'Shift PRNDL to Neutral
If $THMI_ST_PRND_DES ~= 3
	Let $Desired_PRNDL_Position = 2
	Gosub Set_PRNDL_Position
End

'Disable test mode and reset start switch
Set TVPSC_B_TST_STRT_ALL_S (0,0)
Set TVPSC_B_TST_ENBL_S (0,0)

End_Sub
'******************************************************
Sub Run_DualBoost
'******************************************************
Log_Message (Starting Run_DualBoost subroutine)

'Calculate Dual Boost increments
Gosub DualBoostPress_Count
Gosub DualBoostPress_Index

'Set Line Pressure
Set TVPSC_P_CMD_TST_LNP_S ($CurrentRunLine,0)

'Zero test pressures
Set TVPSC_P_CMD_TST_CLC_01_S (0,0)
Set TVPSC_P_CMD_TST_CLC_02_S (0,0)
Set TVPSC_P_CMD_TST_CLC_03_S (0,0)
Set TVPSC_P_CMD_TST_CLC_04_S (0,0)
Set TVPSC_P_CMD_TST_CLC_05_S (0,0)
Set TVPSC_P_CMD_TST_CLC_06_S (0,0)
Set TVPSC_P_CMD_TST_TCC_S (0,0)

'Set test override codes to oncoming scalar pressure
Set TVPSC_D_OVRD_LNP_S (11,0)
Set TVPSC_D_OVRD_CLC_01_S (11,0)
Set TVPSC_D_OVRD_CLC_02_S (11,0)
Set TVPSC_D_OVRD_CLC_03_S (11,0)
Set TVPSC_D_OVRD_CLC_04_S (11,0)
Set TVPSC_D_OVRD_CLC_05_S (11,0)
Set TVPSC_D_OVRD_CLC_06_S (11,0)
Set TVPSC_D_OVRD_TCC_S (11,0)

'Check engine speed and start engine if not running
Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2
If $TCRPM_NE_BAR_AVE2 < 100
	Gosub Start_Engine
End 

'Set engine speed
Gosub Set_Engine_Speed
Wait (5)

'Start engine speed monitor
Monitor_On Engine_Running
Log_Message (Starting Engine_Running monitor. Run_DualBoost.)

'Set TRAM_Set flag to reset PCM parameters if test shuts down
Let $TRAM_Set = 1
Log_Message (TRAM_Set set to 1)

'Disable OBDII
Set OBDII_TST_SW (0,0)

'Enable test mode
Set TVPSC_B_TST_ENBL_S (1,0)

Wait (2)

'Set File Name
If $DitherType = 2
	Let !File_Name = Dither_Dual_Boost_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (Dither_Dual_Boost_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)
Else
	Let !File_Name = Dual_Boost_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (Dual_Boost_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)
End

'Start Vision Recorder	
Gosub Record_Start
Wait (2)

'Start slip monitor
Monitor_On DualBoost_Slip_Act
Log_Message (Starting DualBoost_Slip_Act monitor. Run_DualBoost.)

'Initialize step counter
Let $Step_Counter = 0

'Start Dual Boost control loop
Do
	Let $Loop_Start = Timer
	'Increment step counter
	Let $Step_Counter = $Step_Counter + 1
	'Set pressure command from dual boost pressure matrix
	Let $VFS_Press_Cmd = $CurrentRunDualBoostPress ($Step_Counter,1)
	Select_Case $Trans_Select 
		Case = 2
			'8F24
			Select_Case $CurrentRunGear
				Case = 1
					'First Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
				Case = 2
					'Second Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
				Case = 3
					'Third Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
				Case = 4
					'Fourth Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
				Case = 5
					'Fifth Gear		
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
				Case = 6
					'Sixth Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
				Case = 7
					'Seventh Gear
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
				Case = 8
					'Eighth Gear
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
				Case = 9
					'Ninth Gear
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
				Case = 10
					'Tenth Gear
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
			End_Select
		Case = 3
			'10R60/80
			Select_Case $CurrentRunGear
				Case = 1
					'First Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
				Case = 2
					'Second Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
				Case = 3
					'Third Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
				Case = 4
					'Fourth Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
				Case = 5
					'Fifth Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
				Case = 6
					'Sixth Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
				Case = 7
					'Seventh Gear
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
				Case = 8
					'Eighth Gear
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
				Case = 9
					'Ninth Gear
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
				Case = 10
					'Tenth Gear
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
			End_Select
		Case = 4
			'8F57
			Select_Case $CurrentRunGear
				Case = 1
					'First Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
				Case = 2
					'Second Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
				Case = 3
					'Third Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
				Case = 4
					'Fourth Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
				Case = 5
					'Fifth Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
				Case = 6
					'Sixth Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
				Case = 7
					'Seventh Gear
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
				Case = 8
					'Eighth Gear
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
				Case = 9
					'Ninth Gear
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
				Case = 10
					'Tenth Gear
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
			End_Select
		Case = 6
			'10R60/80
			Select_Case $CurrentRunGear
				Case = 1
					'First Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
				Case = 2
					'Second Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
				Case = 3
					'Third Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
				Case = 4
					'Fourth Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
				Case = 5
					'Fifth Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
				Case = 6
					'Sixth Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
				Case = 7
					'Seventh Gear
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
				Case = 8
					'Eighth Gear
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
				Case = 9
					'Ninth Gear
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
				Case = 10
					'Tenth Gear
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
			End_Select
		Case = 7
			'8F35
			Select_Case $CurrentRunGear
				Case = 1
					'First Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
				Case = 2
					'Second Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
				Case = 3
					'Third Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
				Case = 4
					'Fourth Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
				Case = 5
					'Fifth Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
				Case = 6
					'Sixth Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
				Case = 7
					'Seventh Gear
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
				Case = 8
					'Eighth Gear
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_05_S ($VFS_Press_Cmd,0)
				Case = 9
					'Ninth Gear
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
				Case = 10
					'Tenth Gear
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
			End_Select		
		Case = 8
			'6R80
			Select_Case $CurrentRunGear
				Case = 1
					'First Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
				Case = 2
					'Second Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_03_S ($VFS_Press_Cmd,0)
				Case = 3
					'Third Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
				Case = 4
					'Fourth Gear
					Set TVPSC_P_CMD_TST_CLC_01_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
				Case = 5
					'Fifth Gear
					Set TVPSC_P_CMD_TST_CLC_02_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)
				Case = 6
					'Sixth Gear
					Set TVPSC_P_CMD_TST_CLC_04_S ($VFS_Press_Cmd,0)
					Set TVPSC_P_CMD_TST_CLC_06_S ($VFS_Press_Cmd,0)					
			End_Select
	End_Select	
	Screen_Message (Green,%%New_Line%%Boosting %%!Element%% pressure to %%$VFS_Press_Cmd,2D%%psi)
	Log_Message (%%!Element%% pressure to %%$VFS_Press_Cmd,2D%%psi. Cycle %%$Step_Counter%% of %%$CurrentRunDualBoostPress_Count%%.)
	'Calculate loop time
	Let $Loop_Time = Timer - $Loop_Start
	'Calculate and apply wait time
	If $Loop_Time < $DualBoost_StepTime
		Let $Wait_Time = $DualBoost_StepTime - $Loop_Time
		Wait ($Wait_Time)
		Set TVPSC_P_CMD_TST_CLC_01_S (0,0)
		Set TVPSC_P_CMD_TST_CLC_02_S (0,0)
		Set TVPSC_P_CMD_TST_CLC_03_S (0,0)
		Set TVPSC_P_CMD_TST_CLC_04_S (0,0)
		Set TVPSC_P_CMD_TST_CLC_05_S (0,0)
		Set TVPSC_P_CMD_TST_CLC_06_S (0,0)
		Wait (2)
	End
	'Exit loop when all pressure steps have completed
	If $Step_Counter = $CurrentRunDualBoostPress_Count Then Goto Done_DualBoost:
Loop
Done_DualBoost:

'Turn off slip monitor
Monitor_Off DualBoost_Slip_Act
Log_Message (Stopping DualBoost_Slip_Act monitor. Run_DualBoost.)

Wait (2)
'End Vision Recorder
Gosub Record_End
Wait (2)

'Reset engine speed
Gosub Reset_Engine_Speed

'Shift PRNDL to Neutral
If $THMI_ST_PRND_DES ~= 3
	Let $Desired_PRNDL_Position = 2
	Gosub Set_PRNDL_Position
End

'Disable test mode and reset start switch
Set TVPSC_B_TST_STRT_ALL_S (0,0)
Set TVPSC_B_TST_ENBL_S (0,0)
End_Sub

'*********************************************************************
Monitor DualBoost_Slip_Act
'*********************************************************************
'Monitors TCCALC_N_SLP_ACT during Boost, Stroke, Ramp test to save friction material from excessive slipping

'Measure slip
Let $TCCALC_N_SLP_ACT = TCCALC_N_SLP_ACT

'Zero test pressures if slip reaches 50rpm
If $TCCALC_N_SLP_ACT > 50
	Set TVPSC_P_CMD_TST_CLC_01_S (0,0)
	Set TVPSC_P_CMD_TST_CLC_02_S (0,0)
	Set TVPSC_P_CMD_TST_CLC_03_S (0,0)
	Set TVPSC_P_CMD_TST_CLC_04_S (0,0)
	Set TVPSC_P_CMD_TST_CLC_05_S (0,0)
	Set TVPSC_P_CMD_TST_CLC_06_S (0,0)
	Let $Step_Counter = $CurrentRunDualBoostPress_Count
End

End_Monitor

'******************************************************
Sub DualBoostPress_Index
'******************************************************
Log_Message (Starting DualBoostPress_Index subroutine)

'Extract Dual Boost Pressure test factors from the dual boost matrix
Let $CurrentRunDualBoostPress_Count = $DualBoostPressCountMatrix ($CurrentRunGear , 1)
Let $Min_DualBoostPress = $DualBoost_Matrix ($CurrentRunGear,1)
Let $Max_DualBoostPress = $DualBoost_Matrix ($CurrentRunGear,2)
Let $DualBoostPress_Inc = $DualBoost_Matrix ($CurrentRunGear,3)

'Dimension testpoint pressure matrix
Dim $CurrentRunDualBoostPress ($CurrentRunDualBoostPress_Count , 1)

'Fill testpoint pressure matrix
Gosub Fill_DualBoostPress

End_Sub
'*******************************************************
Sub DualBoostPress_Count
'*******************************************************
Log_Message (Starting DualBoostPress_Count subroutine)

'Dimension dual boost pressure count matrix
Dim $DualBoostPressCountMatrix ($Gear_Length , 1)

'Initialize index and count
Let $Gear_Index = 0
Let $DualBoostPressCountMatrix = 0

'Start dual boost pressure count control loop
Do
	'Increment index
	Let $Gear_Index = $Gear_Index + 1
	'Exit loop when all indices have been completed
	If $Gear_Index > $Gear_Length Then Goto Done_DualBoostPress_Counting:
	'Extract IO from Gear IO matrix
	Let $Gear_Dummy = $DualBoost_Gear_IO ($Gear_Index,1)
	Log_Message (Gear_Index is %%$Gear_Index%%.  Gear_Dummy is %%$Gear_Dummy%%.)
	'If gear is selected, extract min, max and increment values
	If $Gear_Dummy = 1
		Let $Min_DualBoostPress = $DualBoost_Matrix ($Gear_Index,1)
		Let $Max_DualBoostPress = $DualBoost_Matrix ($Gear_Index,2)
		Let $DualBoostPress_Inc = $DualBoost_Matrix ($Gear_Index,3)
		Log_Message (  Min_DualBoostPress for %%$Gear_Index%% is %%$Min_DualBoostPress%%.)
		Log_Message (  Max_DualBoostPress for %%$Gear_Index%% is %%$Max_DualBoostPress%%.)
		Log_Message (  DualBoostPress_Inc for %%$Gear_Index%% is %%$DualBoostPress_Inc%%.)
		'Determine number of steps
		Let $DualBoostPress_Delta = $Max_DualBoostPress - $Min_DualBoostPress
		Let $DualBoostPress_Steps = $DualBoostPress_Delta / $DualBoostPress_Inc
		Let $DualBoostPress_Steps2 = Int ($DualBoostPress_Steps)
		Let $DualBoostPress_Non_Int = $DualBoostPress_Steps - $DualBoostPress_Steps2
		If $DualBoostPress_Non_Int > 0
			Let $DualBoostPress_Count = $DualBoostPress_Steps2 + 2
		Else
			Let $DualBoostPress_Count = $DualBoostPress_Steps2 + 1
		End
		Log_Message (DualBoostPress_Count for %%$Gear_Index%% is %%$DualBoostPress_Count%%.)
	Else
		Let $DualBoostPress_Count = 0
	End
	'Populate pressure count matrix with pressure count for selected gear
	Let $DualBoostPressCountMatrix ($Gear_Index , 1) = $DualBoostPress_Count
Loop
Done_DualBoostPress_Counting:

End_Sub
'******************************************************
Sub Fill_DualBoostPress
'******************************************************
Log_Message (Starting fill_DualBoostPress subroutine)

'Initialize index
Let $DualBoostPress_Index = 0

'Start fill dual boost pressure matrix control loop
Do
	'Increment index
	Let $DualBoostPress_Index = $DualBoostPress_Index + 1
	'Exit loop when all indices have been completed
	If $DualBoostPress_Index > $CurrentRunDualBoostPress_Count Then Goto Done_Fill_DualBoostPress:
	'Set first index to minimum pressure
	If $DualBoostPress_Index = 1
		Let $Matrix_DualBoostPress = $Min_DualBoostPress
	Else
		'Calculate boost pressure
		Let $Matrix_DualBoostPress = $Matrix_DualBoostPress + $DualBoostPress_Inc
		'Limit dual boost pressure to maximum value
		If $Matrix_DualBoostPress > $Max_DualBoostPress
			Let $Matrix_DualBoostPress = $Max_DualBoostPress
		End
	End
	'Fill dual boost pressure matrix with calculated boost pressure
	Let $CurrentRunDualBoostPress ($DualBoostPress_Index , 1) = $Matrix_DualBoostPress
Loop

Done_Fill_DualBoostPress:

End_Sub
'*******************************************************
Sub BoostPress_Count
'*******************************************************
Log_Message (Starting BoostPress_Count subroutine)

'Dimension boost pressure count matrix
Dim $BoostPressCountMatrix ($VFS_Length , 1)

'Initialize index and pressure count
Let $VFS_Index = 0
Let $BoostPressCountMatrix = 0

'Start boost pressure count control loop
Do
	'Increment index
	Let $VFS_Index = $VFS_Index + 1
	'Exit loop when all indices have been completed
	If $VFS_Index > $VFS_Length Then Goto Done_Start_Pressure_Counting:
	'Extract IO from Solenoid IO matrix
	Let $VFS_Dummy = $Elements ($VFS_Index,$RunType)
	Log_Message (VFS_index is %%$VFS_Index%%.  VFS_Dummy is %%$VFS_Dummy%%.)
	'If selected, extract minimum, maximum, and increment values from the boost DOE matrix
	If $VFS_Dummy = 1
		Let $Min_BoostPress = $BoostDOEMatrix ($VFS_Index,2)
		Let $Max_BoostPress = $BoostDOEMatrix ($VFS_Index,3)
		Let $BoostPress_Inc = $BoostDOEMatrix ($VFS_Index,4)
		Log_Message (  Min_BoostPress for %%$VFS_Index%% is %%$Min_BoostPress%%.)
		Log_Message (  Max_BoostPress for %%$VFS_Index%% is %%$Max_BoostPress%%.)
		Log_Message (  BoostPress_Inc for %%$VFS_Index%% is %%$BoostPress_Inc%%.)
		'Calculate number of steps
		Let $BoostPress_Delta = $Max_BoostPress - $Min_BoostPress
		Let $BoostPress_Steps = $BoostPress_Delta / $BoostPress_Inc
		Let $BoostPress_Steps2 = Int ($BoostPress_Steps)
		Let $BoostPress_Non_Int = $BoostPress_Steps - $BoostPress_Steps2
		If $BoostPress_Non_Int > 0
			Let $BoostPress_Count = $BoostPress_Steps2 + 2
		Else
			Let $BoostPress_Count = $BoostPress_Steps2 + 1
		End
		Log_Message (BoostPress_Count for %%$VFS_Index%% is %%$BoostPress_Count%%.)
	Else
		Let $BoostPress_Count = 0
	End
	'Fill boost pressure count matrix 
	Let $BoostPressCountMatrix ($VFS_Index , 1) = $BoostPress_Count
Loop
Done_Start_Pressure_Counting:

End_Sub

'*******************************************************
Sub BoostTime_Count
'*******************************************************
Log_Message (Starting BoostTime_Count subroutine)

'Dimension boost time count matrix
Dim $BoostTimeCountMatrix ($VFS_Length , 1)

'Initialize index and boost time count
Let $VFS_Index = 0
Let $BoostTimeCountMatrix = 0

'Start boost time count control loop
Do
	'Increment index
	Let $VFS_Index = $VFS_Index + 1
	'Exit loop when all indices have been completed
	If $VFS_Index > $VFS_Length Then Goto Done_Start_Time_Counting:
	'Extract IO from Solenoid IO matrix
	Let $VFS_Dummy = $Elements ($VFS_Index,$RunType)
	Log_Message (VFS_index is %%$VFS_Index%%.  VFS_Dummy is %%$VFS_Dummy%%.)
	'If selected, extract minimum, maximum, and increment values from boost DOE matrix
	If $VFS_Dummy = 1
		Let $Min_BoostTime = $BoostDOEMatrix ($VFS_Index,5)
		Let $Max_BoostTime = $BoostDOEMatrix ($VFS_Index,6)
		Let $BoostTime_Inc = $BoostDOEMatrix ($VFS_Index,7)
		Log_Message (  Min_BoostTime for %%$VFS_Index%% is %%$Min_BoostTime%%.)
		Log_Message (  Max_BoostTime for %%$VFS_Index%% is %%$Max_BoostTime%%.)
		Log_Message (  BoostTime_Inc for %%$VFS_Index%% is %%$BoostTime_Inc%%.)
		'Calculate number of steps
		Let $BoostTime_Delta = $Max_BoostTime - $Min_BoostTime
		Let $BoostTime_Steps = $BoostTime_Delta / $BoostTime_Inc
		Let $BoostTime_Steps2 = Int ($BoostTime_Steps)
		Let $BoostTime_Non_Int = $BoostTime_Steps - $BoostTime_Steps2
		If $BoostTime_Non_Int > 0
			Let $BoostTime_Count = $BoostTime_Steps2 + 2
		Else
			Let $BoostTime_Count = $BoostTime_Steps2 + 1
		End
		Log_Message (BoostTime_Count for %%$VFS_Index%% is %%$BoostTime_Count%%.)
	Else
		Let $BoostTime_Count = 0
	End
	'Fill boost time count matrix
	Let $BoostTimeCountMatrix ($VFS_Index , 1) = $BoostTime_Count
Loop
Done_Start_Time_Counting:

End_Sub
'******************************************************
Sub Profile_Index
'******************************************************
Log_Message (Starting Profile_Index subroutine)

'Extract boost pressure and time counts from boost pressure and boost time count matrices
Let $CurrentRunBoostPress_Count = $BoostPressCountMatrix ($CurrentRunElement,1)
Let $CurrentRunBoostTime_Count = $BoostTimeCountMatrix ($CurrentRunElement,1)
'Calculate total profile count
Let $CurrentRunBoostProfile_Count = $CurrentRunBoostPress_Count * $CurrentRunBoostTime_Count

'Dimension boost profile matrix for the current testpoint
Dim $CurrentRunBoostProfile ($CurrentRunBoostProfile_Count , 2)

'Initialize index
Let $BoostProfile_Index = 0

'Extract minimum, maximum, and increment values for boost pressure and time from the boost DOE matrix
Let $Min_BoostPress = $BoostDOEMatrix ($CurrentRunElement,2)
Let $Max_BoostPress = $BoostDOEMatrix ($CurrentRunElement,3)
Let $BoostPress_Inc = $BoostDOEMatrix ($CurrentRunElement,4)
Let $Min_BoostTime = $BoostDOEMatrix ($CurrentRunElement,5)
Let $Max_BoostTime = $BoostDOEMatrix ($CurrentRunElement,6)
Let $BoostTime_Inc = $BoostDOEMatrix ($CurrentRunElement,7)

'Fill boost pressure
Gosub Fill_BoostPress

End_Sub

'******************************************************
Sub Fill_BoostPress
'******************************************************
Log_Message (Starting fill_BoostPress subroutine)

'Initialize index
Let $BoostPress_Index = 0

'Start fill boost pressure control loop
Do
	'Increment index
	Let $BoostPress_Index = $BoostPress_Index + 1
	'Exit loop when all indices have been completed
	If $BoostPress_Index > $CurrentRunBoostPress_Count Then Goto Done_Fill_BoostPress:
	'Set first index to minimum value
	If $BoostPress_Index = 1
		Let $Matrix_BoostPress = $Min_BoostPress
	Else
		'Calculate boost pressure
		Let $Matrix_BoostPress = $Matrix_BoostPress + $BoostPress_Inc
		'Limit boost pressure to maximum boost pressure value
		If $Matrix_BoostPress > $Max_BoostPress
			Let $Matrix_BoostPress = $Max_BoostPress
		End
	End
	'Fill boost time
	Gosub Fill_BoostTime
Loop

Done_Fill_BoostPress:

End_Sub

'******************************************************
Sub Fill_BoostTime
'******************************************************
Log_Message (Starting fill_BoostTime subroutine)

'Initialize index
Let $BoostTime_Index = 0

'Start fill boost time control loop
Do
	'Increment index
	Let $BoostTime_Index = $BoostTime_Index + 1
	'Exit loop when all indices have been completed
	If $BoostTime_Index > $CurrentRunBoostTime_Count Then Goto Done_Fill_BoostTime:
	'Set first index to minimum boost time
	If $BoostTime_Index = 1
		Let $Matrix_BoostTime = $Min_BoostTime
		Let $First_BoostTime = 0
	Else
		'Calculate boost time
		Let $Matrix_BoostTime = $Matrix_BoostTime + $BoostTime_Inc
		'Limit boost time to maximum boost time value
		If $Matrix_BoostTime > $Max_BoostTime
			Let $Matrix_BoostTime = $Max_BoostTime
		End
	End
	'Fill boost profile
	Gosub Fill_Boost_Profile
Loop

Done_Fill_BoostTime:
End_Sub

'******************************************************
Sub Fill_Boost_Profile
'******************************************************
Log_Message (Starting Boost_Profile subroutine)

'Increment index
Let $BoostProfile_Index = $BoostProfile_Index + 1
Log_Message (BoostProfile_Index is %%$BoostProfile_Index%%.)

'Fill boost profile matrix with boost pressure and boost time
Let $CurrentRunBoostProfile ($BoostProfile_Index,1) = $Matrix_BoostPress
Let $CurrentRunBoostProfile ($BoostProfile_Index,2) = $Matrix_BoostTime
Log_Message (Matrix_BoostPress is %%$Matrix_BoostPress%%.)
Log_Message (Matrix_BoostTime is %%$Matrix_BoostTime%%.)

End_Sub

'*******************************************************
Sub Run_TransferFunction
'*******************************************************
 'This subroutine will toggle the solenoid pressure through to activate low and high current transfer function gains.
Log_Message (Starting Run_TransferFunction Subroutine)

'Log Testpoint test factors
Log_Message (RunType is %%$RunType%%)
Log_Message (XferStepTime is %%$XferStepTime%%)
Log_Message (XferDirection is %%$XferDirection%%)
Log_Message (XferHold is %%$XferHold%%)
Log_Message (XferFunction_Type is %%$XferFunction_Type%%)

'Log gain settings for PID gain tuning
If $XferFunction_Type = 0
	Log_Message (CurrentRunKP is %%$CurrentRunKP%%)
	Log_Message (CurrentRunKI is %%$CurrentRunKI%%)
	Log_Message (CurrentRunKD is %%$CurrentRunKD%%)
End	

'Zero test pressure functions
Set TVPSC_P_CMD_TST_CLC_01_S (0,0)
Set TVPSC_P_CMD_TST_CLC_02_S (0,0)
Set TVPSC_P_CMD_TST_CLC_03_S (0,0)
Set TVPSC_P_CMD_TST_CLC_04_S (0,0)
Set TVPSC_P_CMD_TST_CLC_05_S (0,0)
Set TVPSC_P_CMD_TST_CLC_06_S (0,0)
Set TVPSC_P_CMD_TST_TCC_S (0,0)

'Set test override code to low gain oncoming pressure profile
Set TVPSC_D_OVRD_CLC_01_S (21,0)
Set TVPSC_D_OVRD_CLC_02_S (21,0)
Set TVPSC_D_OVRD_CLC_03_S (21,0)
Set TVPSC_D_OVRD_CLC_04_S (21,0)
Set TVPSC_D_OVRD_CLC_05_S (21,0)
Set TVPSC_D_OVRD_CLC_06_S (21,0)
Set TVPSC_D_OVRD_TCC_S (11,0)

'Set test override code to high gain oncoming profile for high line pressure testpoints
If $CurrentRunLine > 1200
	Select_Case $Trans_Select
		Case = 3
			'10R140
			Set TVPSC_D_OVRD_CLC_04_S (41,0)
			Set TVPSC_D_OVRD_CLC_05_S (41,0)
		Case = 6
			'10R60/80
			Set TVPSC_D_OVRD_CLC_04_S (41,0)
			Set TVPSC_D_OVRD_CLC_05_S (41,0)	
		Case = 8
			'6R80
			Set TVPSC_D_OVRD_CLC_04_S (41,0)
			Set TVPSC_D_OVRD_CLC_05_S (41,0)	
	End_Select
End

'Set pressure profile matrix
Gosub Set_Pressure_Setpoints

'Check engine speed and start engine if not running
Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2
If $TCRPM_NE_BAR_AVE2 < 100
	If $Vehicle_Flag = 1
		'Prompt driver to start engine
		Screen_Message (Yellow,Please start engine and press 'Resume Test' when ready)
		Pause
	Else
		'Automatically start engine
		Gosub Start_Engine
	End	
End 

'Set engine/turbine speed
Gosub Set_Engine_Speed
Wait (5)

'Start engine speed monitor
Monitor_On Engine_Running
Log_Message (Starting Engine_Running monitor. Run_TransferFunction.)

'Set TRAM_Set flag to reset PCM parameters if test shuts down
Let $TRAM_Set = 1
Log_Message (TRAM_Set set to 1)

'Disable OBDII
Set OBDII_TST_SW (0,0)

'Enable test mode
Set TVPSC_B_TST_ENBL_S (1,0)

Wait (2)

'Set Line Pressure for all solenoids except Line Pressure Solenoid.
If $CurrentRunElement ~= 1
	Set TVPSC_D_OVRD_LNP_S (11,0)
	Set TVPSC_P_CMD_TST_LNP_S ($CurrentRunLine,0)
Else
	'Set test override code to oncoming pressure profile
	Set TVPSC_D_OVRD_LNP_S (21,0)	
End
Wait (2)

'Set PID gains for Temp Comp testing
If $XferFunction_Type = 1
		Select_Case $Trans_Select 
			Case = 2
				'8F24
				Select_Case $CurrentRunElement
					Case = 1
						'Line Pressure - kinda verified
						Let $Xfer_KP = 0.00000075
						Let $Xfer_KI = 0.000001
						Let $Xfer_KD = 0.0
					Case = 2
						'Clutch A - best guess
						Let $Xfer_KP = 0.00005
						Let $Xfer_KI = 0.00005
						Let $Xfer_KD = 0.0				
					Case = 3
						'Clutch B - verified
						Let $Xfer_KP = 0.0001	
						Let $Xfer_KI = 0.0005
						Let $Xfer_KD = 0.0
					Case = 4
						'Clutch C - verified
						Let $Xfer_KP = 0.00005	
						Let $Xfer_KI = 0.00005
						Let $Xfer_KD = 0.0
					Case = 5
						'Clutch D - not used
						Let $Xfer_KP = 0.0000125
						Let $Xfer_KI = 0.000000006
						Let $Xfer_KD = 0.0
					Case = 6
						'Clutch E - verified
						Let $Xfer_KP = 0.00005
						Let $Xfer_KI = 0.0001	
						Let $Xfer_KD = 0.0				
					Case = 7
						'Clutch F - verified
						Let $Xfer_KP = 0.00005
						Let $Xfer_KI = 0.0001	
						Let $Xfer_KD = 0.0				
					Case = 8
						'TCC - verified
						Let $Xfer_KP = 0.00005
						Let $Xfer_KI = 0.00005	
						Let $Xfer_KD = 0.0				
				End_Select
			Case = 3
				'10R140
				Select_Case $CurrentRunElement
					Case = 1
						'Line Pressure
						Let $Xfer_KP = 0.000035
						Let $Xfer_KI = 0.0000002	
					Case = 2
						'Clutch A
						Let $Xfer_KP = 0.000035
						Let $Xfer_KI = 0.0000002	
					Case = 3
						'Clutch B
						Let $Xfer_KP = 0.000035
						Let $Xfer_KI = 0.00000009
					Case = 4
						'Clutch C
						Let $Xfer_KP = 0.0000125
						Let $Xfer_KI = 0.000000006
					Case = 5
						'Clutch D
						Let $Xfer_KP = 0.0000125
						Let $Xfer_KI = 0.000000006
					Case = 6
						'Clutch E
						Let $Xfer_KP = 0.0000125
						Let $Xfer_KI = 0.000000006		
					Case = 7
						'Clutch F
						Let $Xfer_KP = 0.0000125
						Let $Xfer_KI = 0.000000006		
					Case = 8
						'TCC
						Let $Xfer_KP = 0.0000125
						Let $Xfer_KI = 0.000000006					
				End_Select
			Case = 4
				'8F57
				Select_Case $CurrentRunElement
					Case = 1
						'Line Pressure
						Let $Xfer_KP = 0.000035
						Let $Xfer_KI = 0.0000002	
						Let $Xfer_KD = 0.0
					Case = 2
						'Clutch A
						Let $Xfer_KP = 0.000035
						Let $Xfer_KI = 0.0000002
						Let $Xfer_KD = 0.0
					Case = 3
						'Clutch B
						Let $Xfer_KP = 0.000035
						Let $Xfer_KI = 0.00000009
						Let $Xfer_KD = 0.0
					Case = 4
						'Clutch C
						Let $Xfer_KP = 0.0000125
						Let $Xfer_KI = 0.000000006
						Let $Xfer_KD = 0.0
					Case = 5
						'Clutch D
						Let $Xfer_KP = 0.0000125
						Let $Xfer_KI = 0.000000006
						Let $Xfer_KD = 0.0
					Case = 6
						'Clutch E
						Let $Xfer_KP = 0.0000125
						Let $Xfer_KI = 0.000000006	
						Let $Xfer_KD = 0.0				
					Case = 7
						'Clutch F
						Let $Xfer_KP = 0.0000125
						Let $Xfer_KI = 0.000000006	
						Let $Xfer_KD = 0.0
					Case = 8
						'TCC
						Let $Xfer_KP = 0.0000125
						Let $Xfer_KI = 0.000000006	
						Let $Xfer_KD = 0.0
				End_Select
			Case = 6
				'10R60/80
				Select_Case $CurrentRunElement
					Case = 1
						'Line Pressure - PID confirmed
						Let $Xfer_KP = 0.00025
						Let $Xfer_KI = 0.005
						Let $Xfer_KD = 0.00001
					Case = 2
						'Clutch A - PID confirmed
						Let $Xfer_KP = 0.000075
						Let $Xfer_KI = 0.00025	
						Let $Xfer_KD = 0.000000001
					Case = 3
						'Clutch B - PID confirmed
						Let $Xfer_KP = 0.00025
						Let $Xfer_KI = 0.0025
						Let $Xfer_KD = 0.000000001
					Case = 4
						'Clutch C - PID confirmed
						Let $Xfer_KP = 0.0000125
						Let $Xfer_KI = 0.000000006
						Let $Xfer_KD = 0.000000001
					Case = 5
						'Clutch D
						If $CurrentRunLine < 1200
							'Clutch D - Low Gain - PID confirmed
							Let $Xfer_KP = 0.0001
							Let $Xfer_KI = 0.000003
							Let $Xfer_KD = 0.00001
						Else
							'Clutch D - High Gain - PID confirmed
							Let $Xfer_KP = 0.0001
							Let $Xfer_KI = 0.0005
							Let $Xfer_KD = 0.0000001
						End
					Case = 6
						'Clutch E
						If $CurrentRunLine < 1200
							'Cluth E Low Gain - PID confirmed
							Let $Xfer_KP = 0.0001
							Let $Xfer_KI = 0.0005
							Let $Xfer_KD = 0.0
						Else
							'Clutch E High Gain - PID confirmed
							Let $Xfer_KP = 0.00005
							Let $Xfer_KI = 0.005
							Let $Xfer_KD = 0.0
						End
					Case = 7
						'Clutch F - PID confirmed
						Let $Xfer_KP = 0.000125
						Let $Xfer_KI = 0.00004	
						Let $Xfer_KD = 0.0				
					Case = 8
						'TCC - PID confirmed
						Let $Xfer_KP = 0.0001
						Let $Xfer_KI = 0.00005	
						Let $Xfer_KD = 0.0
				End_Select
			Case = 7
				'8F35
				Select_Case $CurrentRunElement
					Case = 1
						'Line Pressure
						Let $Xfer_KP = 0.000035
						Let $Xfer_KI = 0.0000002
						Let $Xfer_KD = 0.0
					Case = 2
						'Clutch A
						Let $Xfer_KP = 0.000035
						Let $Xfer_KI = 0.0000002
						Let $Xfer_KD = 0.0				
					Case = 3
						'Clutch B
						Let $Xfer_KP = 0.000035
						Let $Xfer_KI = 0.00000009
						Let $Xfer_KD = 0.0
					Case = 4
						'Clutch C
						Let $Xfer_KP = 0.0000125
						Let $Xfer_KI = 0.000000006
						Let $Xfer_KD = 0.0
					Case = 5
						'Clutch D
						Let $Xfer_KP = 0.0000125
						Let $Xfer_KI = 0.000000006
						Let $Xfer_KD = 0.0
					Case = 6
						'Clutch E
						Let $Xfer_KP = 0.0000125
						Let $Xfer_KI = 0.000000006
						Let $Xfer_KD = 0.0				
					Case = 7
						'Clutch F
						Let $Xfer_KP = 0.0000125
						Let $Xfer_KI = 0.000000006	
						Let $Xfer_KD = 0.0
					Case = 8
						'TCC
						Let $Xfer_KP = 0.0000125
						Let $Xfer_KI = 0.000000006	
						Let $Xfer_KD = 0.0
				End_Select
			Case = 8
				'6R80
				'Unconfirmed
				Select_Case $CurrentRunElement
					Case = 1
						'Line Pressure
						Let $Xfer_KP = 0.000035
						Let $Xfer_KI = 0.0000002
						Let $Xfer_KD = 0.0
					Case = 2
						'Clutch A
						Let $Xfer_KP = 0.000035
						Let $Xfer_KI = 0.0000002
						Let $Xfer_KD = 0.0				
					Case = 3
						'Clutch B
						Let $Xfer_KP = 0.000035
						Let $Xfer_KI = 0.00000009
						Let $Xfer_KD = 0.0
					Case = 4
						'Clutch C
						Let $Xfer_KP = 0.0000125
						Let $Xfer_KI = 0.000000006
						Let $Xfer_KD = 0.0
					Case = 5
						'Clutch D
						Let $Xfer_KP = 0.0000125
						Let $Xfer_KI = 0.000000006
						Let $Xfer_KD = 0.0
					Case = 6
						'Clutch E
						Let $Xfer_KP = 0.0000125
						Let $Xfer_KI = 0.000000006
						Let $Xfer_KD = 0.0				
					Case = 7
						'Clutch F
						Let $Xfer_KP = 0.0000125
						Let $Xfer_KI = 0.000000006	
						Let $Xfer_KD = 0.0
					Case = 8
						'TCC
						Let $Xfer_KP = 0.0000125
						Let $Xfer_KI = 0.000000006	
						Let $Xfer_KD = 0.0
				End_Select				
	End_Select	
Else
	'PID Gain Tuning
	Let $Xfer_KP = $CurrentRunKP
	Let $Xfer_KI = $CurrentRunKI
	Let $Xfer_KD = $CurrentRunKD
End	

'Set File Name
If $DitherType = 2
	Let !File_Name = Dither_TransferFunction_%%!PT_Name%%_%%!Clutch_Name%%_%%$Xfer_KP,8D%%KP_%%$Xfer_KI,8D%%KI_%%$Xfer_KD,8D%%KD_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (Dither_TransferFunction_%%!PT_Name%%_%%!Clutch_Name%%_%%$Xfer_KP,8D%%KP_%%$Xfer_KI,8D%%KI_%%$Xfer_KD,8D%%KD_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)				
Else
	Let !File_Name = TransferFunction_%%!PT_Name%%_%%!Clutch_Name%%_%%$Xfer_KP,8D%%KP_%%$Xfer_KI,8D%%KI_%%$Xfer_KD,8D%%KD_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (TransferFunction_%%!PT_Name%%_%%!Clutch_Name%%_%%$Xfer_KP,8D%%KP_%%$Xfer_KI,8D%%KI_%%$Xfer_KD,8D%%KD_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)		
End	

'Start Vision Recorder
Gosub Record_Start
Wait (4)

'Set test pressure command to zero 
Select_Case $CurrentRunElement
	Case = 1
		'Line Pressure
		Set TVPSC_P_CMD_TST_LNP_S (0,0)
	Case = 2
		'Clutch A
		Set TVPSC_P_CMD_TST_CLC_01_S (0,0)
	Case = 3
		'Clutch B
		Set TVPSC_P_CMD_TST_CLC_02_S (0,0)
	Case = 4
		'Clutch C
		Set TVPSC_P_CMD_TST_CLC_03_S (0,0)
	Case = 5
		'Clutch D
		Set TVPSC_P_CMD_TST_CLC_04_S (0,0)
	Case = 6
		'Clutch E
		Set TVPSC_P_CMD_TST_CLC_05_S (0,0)
	Case = 7
		'Clutch F
		Set TVPSC_P_CMD_TST_CLC_06_S (0,0)
	Case = 8
		'TCC
		Set TVPSC_P_CMD_TST_TCC_S (0,0)
End_Select

Wait (2)

'Exercise full pressure range of solenoid
Let $Pressure_Blip = 3500
Select_Case $CurrentRunElement
	Case = 2
		'Clutch A
		Set TVPSC_P_CMD_TST_CLC_01_S ($Pressure_Blip,0)
	Case = 3
		'Clutch B
		Set TVPSC_P_CMD_TST_CLC_02_S ($Pressure_Blip,0)
	Case = 4
		'Clutch C
		Set TVPSC_P_CMD_TST_CLC_03_S ($Pressure_Blip,0)
	Case = 5
		'Clutch D
		Set TVPSC_P_CMD_TST_CLC_04_S ($Pressure_Blip,0)
	Case = 6
		'Clutch E
		Set TVPSC_P_CMD_TST_CLC_05_S ($Pressure_Blip,0)
	Case = 7
		'Clutch F
		Set TVPSC_P_CMD_TST_CLC_06_S ($Pressure_Blip,0)
	Case = 8
		'TCC
		Set TVPSC_P_CMD_TST_TCC_S ($Pressure_Blip,0)
End_Select
Wait (1)

'Initialize step counter and current command value
Let $Step_Counter = 0
Let $Current_Command = 0

'Set direction to select appropriate transfer function table
Let $Xfer_StepDirection = 1

'Determine number of pressure setpoints
Let $PressureSetpoint_Length = Variable_Rows $PressureSetpoints

'Start transfer function control loop
Do
	'Increment step counter
	Let $Step_Counter = $Step_Counter + 1
	'Determine target pressure from pressure setpoint matrix
	Let $TargetP = $PressureSetpoints ($Step_Counter , 1)
	'Measure averagClutch E pressure to determine zero level offset
	If $TargetP = 0
		Select_Case $CurrentRunElement
			Case = 1
				'Line Pressure
				Let $XferZeroOffset = LPC_1sMAve
			Case = 2 
				'Clutch A
				Let $XferZeroOffset = ClA_1sMAve
			Case = 3  
				'Clutch B
				Let $XferZeroOffset = ClB_1sMAve
			Case = 4
				'Clutch C
				Let $XferZeroOffset = ClC_1sMAve
			Case = 5
				'Clutch D
				Let $XferZeroOffset = ClD_1sMAve
			Case = 6
				'Clutch E
				Let $XferZeroOffset = ClE_1sMAve
			Case = 7
				'Clutch F
				Let $XferZeroOffset = ClF_1sMAve
			Case = 8
				'TCC
				Let $XferZeroOffset = TCC_1sMAve
		End_Select
	End
	'Set TargetP_Scalar ($TargetP,0)
	'Set low and high threshold for target pressure
	Let $TargetP_Low = $TargetP - 3
	Let $TargetP_High = $TargetP + 3
	Log_Message (TargetP for %%!Element%% is %%$TargetP%%kpa. TargetP_Low is %%$TargetP_Low,1D%%kpa. TargetP_High is %%$TargetP_High,1D%%kpa.)
	'Check tft normalizer for tft setpoint
	'Determine row and column for tft and pressure setpoints 
	Gosub Xfer_Offset_Indexer
	'Capture base transfer function values from calibration table
	Gosub Base_Offset	
	Log_Message (TargetP is %%$TargetP%%kpa. Temp_Index is %%$Temp_Index%%. Column_Index is %%$Column_Index%%.)
	'Zero transfer function table cell for tft/pressure setpoint
	Select_Case $CurrentRunElement
		Case = 1
			'Line Pressure
			Set_Function_Table TVPSC_IA_TRGT_LNP_A_M ($Row_Index , $Column_Index) = $Current_Command	
		Case = 2
			'Clutch A
			Set_Function_Table TVPSC_IA_TRGT_CLC_01_ONC_A_M ($Row_Index , $Column_Index) = $Current_Command			
		Case = 3
			'Clutch B
			Set_Function_Table TVPSC_IA_TRGT_CLC_02_ONC_A_M ($Row_Index , $Column_Index) = $Current_Command			
		Case = 4
			'Clutch C
			Set_Function_Table TVPSC_IA_TRGT_CLC_03_ONC_A_M ($Row_Index , $Column_Index) = $Current_Command			
		Case = 5
			'Clutch D
			If $CurrentRunLine < 1200
				'Low Gain
				Set_Function_Table TVPSC_IA_TRGT_CLC_04_ONC_LO_A_M ($Row_Index , $Column_Index) = $Current_Command			
			Else
				'High Gain
				Set_Function_Table TVPSC_IA_TRGT_CLC_04_ONC_HI_A_M ($Row_Index , $Column_Index) = $Current_Command			
			End
		Case = 6
			'Clutch E
			If $CurrentRunLine < 1200
				'Low Gain
				Set_Function_Table TVPSC_IA_TRGT_CLC_05_ONC_LO_A_M ($Row_Index , $Column_Index) = $Current_Command			
			Else
				'High Gain
				Set_Function_Table TVPSC_IA_TRGT_CLC_05_ONC_HI_A_M ($Row_Index , $Column_Index) = $Current_Command			
			End
		Case = 7
			'Clutch F
			Set_Function_Table TVPSC_IA_TRGT_CLC_06_ONC_A_M ($Row_Index , $Column_Index) = $Current_Command
		Case = 8
			'TCC
			Set_Function_Table TVPSC_IA_TRGT_TCC_A_M ($Row_Index , $Column_Index) = $Current_Command					
	End_Select
	Set_Activate
	Screen_Message (Green,%%New_Line%%Setting %%!Element%% Current to %%$Current_Command,4D%%Amps.%%New_Line%%%%New_Line%%KP is %%$Xfer_KP%%. KI is %%$Xfer_KI%%. KD is %%$Xfer_KD%%.%%New_Line%%%%New_Line%%TargetP is %%$TargetP%%kpa.)
	'Run PID control loop to determine correct current to meet pressure setpoint
	Gosub Xfer_Current_Optimization
	'Exit Step-Up loop when all pressure steps have been completed
	If $Step_Counter = $PressureSetpoint_Length Then Goto Done_Xfer_Up:
Loop

Done_Xfer_Up:
'For Line Pressure Solenoid and Torque Converter Clutch Solenoid, perform step-up only
Select_Case $CurrentRunElement
	Case = 1
		'Line Pressure
		Goto Done_Xfer_Down:
	Case = 8
		'TCC
		Goto Done_Xfer_Down:
End_Select

'For step-up only, skip to end		
If $XferDirection ~= 1 Then Goto Done_Xfer_Down:

'Apply hold wait time
Wait ($XferHold)

'Set test override code to offgoing scalar pressure
Set TVPSC_D_OVRD_CLC_01_S (11,0)
Set TVPSC_D_OVRD_CLC_02_S (11,0)
Set TVPSC_D_OVRD_CLC_03_S (11,0)
Set TVPSC_D_OVRD_CLC_04_S (11,0)
Set TVPSC_D_OVRD_CLC_05_S (11,0)
Set TVPSC_D_OVRD_CLC_06_S (11,0)
Set TVPSC_D_OVRD_TCC_S (11,0)

'Set test override code to high gain offgoing scalar for high line pressure testpoints
If $CurrentRunLine > 1200
	Set TVPSC_D_OVRD_CLC_04_S (31,0)
	Set TVPSC_D_OVRD_CLC_05_S (31,0)
End

'Initialize step counter
Let $Step_Counter = 0

'Set direction to select appropriate transfer function table
Let $Xfer_StepDirection = 2

'Start step-down transfer function control loop
Do
	'Increment step counter
	Let $Step_Counter = $Step_Counter + 1
	'Find reverse index for pressure setpoint matrix
	Let $CurrentSetpoint = $PressureSetpoint_Length - $Step_Counter
	'Select target pressure from pressure setpoint matrix
	Let $TargetP = $PressureSetpoints ($CurrentSetpoint , 1)
	' Let $TargetP_Low = $TargetP - 3
	' Let $TargetP_High = $TargetP + 3
	'Set step-down low and high threshold
	Let $TargetP_Low = $TargetP - 4
	Let $TargetP_High = $TargetP + 4
	Log_Message (TargetP for %%!Element%% is %%$TargetP%%kpa. TargetP_Low is %%$TargetP_Low,1D%%kpa. TargetP_High is %%$TargetP_High,1D%%kpa.)	
	'Check tft normalizer for tft setpoint
	'Determine row and column for tft and pressure setpoints 	
	Gosub Xfer_Offset_Indexer
	'Capture base transfer function values from calibration table
	Gosub Base_Offset
	'Set transfer function table to tft/pressure setpoint
	Select_Case $CurrentRunElement
		Case = 2
			'Clutch A
			Set_Function_Table TVPSC_IA_TRGT_CLC_01_OFG_A_M = $Current_Command			
		Case = 3
			'Clutch B
			Set_Function_Table TVPSC_IA_TRGT_CLC_02_OFG_A_M = $Current_Command			
		Case = 4
			'Clutch C
			Set_Function_Table TVPSC_IA_TRGT_CLC_03_OFG_A_M = $Current_Command			
		Case = 5
			'Clutch D
			If $CurrentRunLine < 1200
				'Low Gain
				Set_Function_Table TVPSC_IA_TRGT_CLC_04_OFG_LO_A_M = $Current_Command			
			Else
				'High Gain
				Set_Function_Table TVPSC_IA_TRGT_CLC_04_OFG_HI_A_M = $Current_Command			
			End
		Case = 6
			'Clutch E
			If $CurrentRunLine < 1200
				'Low Gain
				Set_Function_Table TVPSC_IA_TRGT_CLC_05_OFG_LO_A_M = $Current_Command			
			Else
				'High Gain
				Set_Function_Table TVPSC_IA_TRGT_CLC_05_OFG_HI_A_M = $Current_Command			
			End
		Case = 7
			'Clutch F
			Set_Function_Table TVPSC_IA_TRGT_CLC_06_OFG_A_M = $Current_Command				
	End_Select
	Set_Activate
	Log_Message (Setting %%!Element%% Current_Command to %%$Current_Command,3D%%.)
	'Run PID control loop to determine current required to deliver target pressure
	Gosub Xfer_Current_Optimization
	Screen_Message (Green,%%New_Line%%Setting %%!Element%% Current to %%$Current_Command,4D%%Amps.%%New_Line%%%%New_Line%%KP is %%$Xfer_KP%%.KI is %%$Xfer_KI%%. KD is %%$Xfer_KD%%.%%New_Line%%%%New_Line%%TargetP is %%$TargetP%%kpa.)
	'Exit loop when all step-down setpoints have been completed
	If $CurrentSetpoint = 1 Then Goto Done_Xfer_Down:
Loop

Done_Xfer_Down:

Wait (2)

'End Vision Recorder
Gosub Record_End

'Reset engine speed to base
Gosub Reset_Engine_Speed

'Shift PRNDL to Neutral
If $THMI_ST_PRND_DES ~= 3
	Let $Desired_PRNDL_Position = 2
	Gosub Set_PRNDL_Position
End

'Disable test mode and reset start switch
Set TVPSC_B_TST_STRT_ALL_S (0,0)
Set TVPSC_B_TST_ENBL_S (0,0)

'Reset PCM parameters to zero
Select_Case $Trans_Select 
	Case = 2
		'8F24
		Gosub TRAM_Reset_8F
	Case = 3
		'10R140
		Gosub TRAM_Reset_10R	
	Case = 4
		'8F57
		Gosub TRAM_Reset_8F	
	Case = 6
		'10R60/80
		Gosub TRAM_Reset_10R
	Case = 7
		'8F35
	 	Gosub TRAM_Reset_8F
	Case = 8
		'6R80
	 	Gosub TRAM_Reset_6R		
End_Select

'Turn off engine speed monitor
Monitor_Off Engine_Running
Log_Message (Stopping Engine_Running monitor. Run_TransferFunction.)

End_Sub
'*******************************************************
Sub Base_Offset
'*******************************************************
Log_Message (Starting Base_Current Subroutine)

'For step-up test, use oncoming transfer function tables to create base offset table
If $Xfer_StepDirection = 1
	Select_Case $CurrentRunElement
		Case = 1
			'Line Pressure
			Let $Base_Offset_Table = Calibration_Values TVPSC_IA_TRGT_LNP_A_M
		Case = 2
			'Clutch A
			Let $Base_Offset_Table = Calibration_Values TVPSC_IA_TRGT_CLC_01_ONC_A_M
		Case = 3
			'Clutch B
			Let $Base_Offset_Table = Calibration_Values TVPSC_IA_TRGT_CLC_02_ONC_A_M
		Case = 4
			'Clutch C
			Let $Base_Offset_Table = Calibration_Values TVPSC_IA_TRGT_CLC_03_ONC_A_M
		Case = 5
			'Clutch D
			If $CurrentRunLine < 1200
				'Low Gain
				Let $Base_Offset_Table = Calibration_Values TVPSC_IA_TRGT_CLC_04_ONC_LO_A_M
			Else
				'High Gain
				Let $Base_Offset_Table = Calibration_Values TVPSC_IA_TRGT_CLC_04_ONC_HI_A_M
			End
		Case = 6
			'Clutch E
			If $CurrentRunLine < 1200
				'Low Gain
				Let $Base_Offset_Table = Calibration_Values TVPSC_IA_TRGT_CLC_05_ONC_LO_A_M
			Else
				'High Gain
				Let $Base_Offset_Table = Calibration_Values TVPSC_IA_TRGT_CLC_05_ONC_HI_A_M
			End
		Case = 7
			'Clutch F
			Let $Base_Offset_Table = Calibration_Values TVPSC_IA_TRGT_CLC_06_ONC_A_M
		Case = 8
			'TCC
			Let $Base_Offset_Table = Calibration_Values TVPSC_IA_TRGT_TCC_A_M			
	End_Select
End
If $Xfer_StepDirection = 2
	Select_Case $CurrentRunElement
		Case = 2
			'Clutch A
			Let $Base_Offset_Table = Calibration_Values TVPSC_IA_TRGT_CLC_01_OFG_A_M
		Case = 3
			'Clutch B
			Let $Base_Offset_Table = Calibration_Values TVPSC_IA_TRGT_CLC_02_OFG_A_M
		Case = 4
			'Clutch C
			Let $Base_Offset_Table = Calibration_Values TVPSC_IA_TRGT_CLC_03_OFG_A_M
		Case = 5
			'Clutch D
			If $CurrentRunLine < 1200
				'Low Gain
				Let $Base_Offset_Table = Calibration_Values TVPSC_IA_TRGT_CLC_04_OFG_LO_A_M
			Else
				'High Gain
				Let $Base_Offset_Table = Calibration_Values TVPSC_IA_TRGT_CLC_04_OFG_HI_A_M
			End
		Case = 6
			'Clutch E
			If $CurrentRunLine < 1200
				'Low Gain
				Let $Base_Offset_Table = Calibration_Values TVPSC_IA_TRGT_CLC_05_OFG_LO_A_M
			Else
				'High Gain
				Let $Base_Offset_Table = Calibration_Values TVPSC_IA_TRGT_CLC_05_OFG_HI_A_M
			End
		Case = 7	
			'Clutch F
			Let $Base_Offset_Table = Calibration_Values TVPSC_IA_TRGT_CLC_06_OFG_A_M
		Case = 8
			'TCC
			Let $Base_Offset_Table = Calibration_Values TVPSC_IA_TRGT_TCC_A_M			
	End_Select
End

'Establish base offset from the base offset table, using temp and column indices derived from Xfer_Offset_Indexer subroutine
Let $Base_Offset = $Base_Offset_Table ($Temp_Index , $Column_Index)
Log_Message (Base_Offset for TargetP of %%$TargetP%% is %%$Base_Offset%%)

'Set current command to table derived offset value
Let $Current_Command = $Base_Offset

'Apply target pressure command via test function
Select_Case $CurrentRunElement
	Case = 1
		'Line Pressure
		Set TVPSC_P_CMD_TST_LNP_S ($TargetP,0)
	Case = 2
		'Clutch A
		Set TVPSC_P_CMD_TST_CLC_01_S ($TargetP,0)
	Case = 3
		'Clutch B
		Set TVPSC_P_CMD_TST_CLC_02_S ($TargetP,0)
	Case = 4
		'Clutch C
		Set TVPSC_P_CMD_TST_CLC_03_S ($TargetP,0)
	Case = 5
		'Clutch D
		Set TVPSC_P_CMD_TST_CLC_04_S ($TargetP,0)
	Case = 6
		'Clutch E
		Set TVPSC_P_CMD_TST_CLC_05_S ($TargetP,0)
	Case = 7
		'Clutch F
		Set TVPSC_P_CMD_TST_CLC_06_S ($TargetP,0)
	Case = 8
		'TCC
		Set TVPSC_P_CMD_TST_TCC_S ($TargetP,0)
End_Select

'Increase step time for low-pressure command
If $TargetP < 400
	Wait (2)
Else
	Wait (0.5)
End	

End_Sub
'*******************************************************
Sub Xfer_Offset_Indexer
'*******************************************************
Log_Message (Starting Xfer_Offset_Indexer Subroutine)

'Capture tft normalizer 
Let $TVPSC_TFT_NRM_10_N = Calibration_Values TVPSC_TFT_NRM_10_N

'Determine number of normalizer values
Let $Temp_Length = Variable_Columns $TVPSC_TFT_NRM_10_N

'Initialize index
Let $Temp_Index = 0

'Start temp indexer control loop to determine if current testpoint appears in normalizer table
Do
	'Increment index
	Let $Temp_Index = $Temp_Index + 1
	'Extract value from normalizer
	Let $Temp_Dummy = $TVPSC_TFT_NRM_10_N (2,$Temp_Index)
	'If normalizer matches current testpoint, exit loop
	If $Temp_Dummy = $CurrentRunTemp Then Goto Done_Temp_Indexing:
	'If current testpoint is not in normalizer, fail testpoint
	If $Temp_Index > $Temp_Length
		Log_Message (Temperature %%$CurrentRunTemp%%degC not found in Normalizer)
		Point_Status (Testpoint) = Failed
		Goto Done_Temp_Indexing:
	End
Loop

Done_Temp_Indexing:
Log_Message (Xfer_Offset_Indexer Temp_Index is %%$Temp_Index%% of %%$Temp_Length%%.)

'Set transfer function table row index from temp index determined above
Let $Row_Index = $Temp_Index - 1

'Capture pressure normalizer values from calibration table
Select_Case $CurrentRunElement
	Case = 1
		'Line Pressure
		Let $PressureNormalizer = Calibration_Values TVPSC_P_LNP_A_N
	Case = 2 
		'Clutch A
		Let $PressureNormalizer = Calibration_Values TVPSC_P_CLC_01_A_N
	Case = 3 
		'Clutch B
		Let $PressureNormalizer = Calibration_Values TVPSC_P_CLC_02_A_N
	Case = 4
		'Clutch C
		Let $PressureNormalizer = Calibration_Values TVPSC_P_CLC_03_A_N	
	Case = 5
		'Clutch D
		Select_Case $Trans_Select
			Case = 2
				'8F24
				Let $PressureNormalizer = Calibration_Values TVPSC_P_CLC_04_N
			Case = 3
				'10R140			
				If $CurrentRunLine < 1200
					'Low Gain
					Let $PressureNormalizer = Calibration_Values TVPSC_P_CLC_04_LO_A_N
				Else
					'High Gain
					Let $PressureNormalizer = Calibration_Values TVPSC_P_CLC_04_HI_A_N
				End	
			Case = 4
				'8F57
				Let $PressureNormalizer = Calibration_Values TVPSC_P_CLC_04_N
			Case = 6
			'10R60/80			
				If $CurrentRunLine < 1200
					'Low Gain
					Let $PressureNormalizer = Calibration_Values TVPSC_P_CLC_04_LO_A_N
				Else
					'High Gain
					Let $PressureNormalizer = Calibration_Values TVPSC_P_CLC_04_HI_A_N
				End					
			Case = 7
				'8F35
				Let $PressureNormalizer = Calibration_Values TVPSC_P_CLC_04_N
			Case = 8
				'6R80
				If $CurrentRunLine < 1200
					'Low Gain
					Let $PressureNormalizer = Calibration_Values TVPSC_P_CLC_04_LO_A_N
				Else
					'High Gain
					Let $PressureNormalizer = Calibration_Values TVPSC_P_CLC_04_HI_A_N
				End	
		End_Select
	Case = 6
		'Clutch E
		Select_Case $Trans_Select
			Case = 2
				'8F24	
				Let $PressureNormalizer = Calibration_Values TVPSC_P_CLC_05_N
			Case = 3
				'10R140			
				If $CurrentRunLine < 1200
					'Low Gain
					Let $PressureNormalizer = Calibration_Values TVPSC_P_CLC_05_LO_A_N
				Else
					'High Gain
					Let $PressureNormalizer = Calibration_Values TVPSC_P_CLC_05_HI_A_N
				End	
			Case = 4
				'8F57	
				Let $PressureNormalizer = Calibration_Values TVPSC_P_CLC_05_N				
			Case = 6
			'10R60/80			
				If $CurrentRunLine < 1200
					'Low Gain
					Let $PressureNormalizer = Calibration_Values TVPSC_P_CLC_05_LO_A_N
				Else
					'High Gain
					Let $PressureNormalizer = Calibration_Values TVPSC_P_CLC_05_HI_A_N
				End					
			Case = 7
				'8F35
				Let $PressureNormalizer = Calibration_Values TVPSC_P_CLC_05_N
			Case = 8
				'6R80				
				If $CurrentRunLine < 1200
					'Low Gain
					Let $PressureNormalizer = Calibration_Values TVPSC_P_CLC_05_LO_A_N
				Else
					'High Gain
					Let $PressureNormalizer = Calibration_Values TVPSC_P_CLC_05_HI_A_N
				End	
		End_Select		
	Case = 7
		'Clutch F
		Let $PressureNormalizer = Calibration_Values TVPSC_P_CLC_06_A_N
	Case = 8
		'TCC
		Let $PressureNormalizer = Calibration_Values TVPSC_P_TCC_A_N
End_Select

'Determine number of pressure normalizers
Let $TargetP_Length = Variable_Columns $PressureNormalizer

'Initialize target pressure index
Let $TargetP_Index = 0

'Start Target Pressure normalizer control loop to determine if target pressure appears in the pressure normalizer
Do
	'Increment index
	Let $TargetP_Index = $TargetP_Index + 1
	'Extract value from pressure normalizer
	Let $TargetP_Dummy = $PressureNormalizer (2 , $TargetP_Index)
	'If pressure normalizer value matches pressure setpoint, exit loop
	If $TargetP_Dummy = $TargetP Then Goto Done_TargetP_Indexing:
	'If target setpoint is not in pressure normalizer, terminate test so that user may correct the pressure setpoints
	If $TargetP_Index = $TargetP_Length
		Log_Message (Pressure %%$TargetP%%kpa not found in Normalizer. Please correct Pressure setpoints and restart.)
		Log_Message (******************************************************)
		Log_Message (Terminating test.)
		Log_Message (******************************************************)
		Gosub Terminate_Test
	End
Loop

Done_TargetP_Indexing:

'Set transfer function table column index from pressure index determined above
Let $Column_Index = $TargetP_Index - 1

Log_Message (TargetP %%$TargetP%%kpa found in Normalizer)

'Dimension output matrices to capture new current offset values
Select_Case $CurrentRunElement
	Case = 1
		'Line Pressure
		Dim $XferFunction_Matrix_LNP ($Temp_Length , $TargetP_Length)
		Dim $XferFunction_Current_LNP ($TargetP_Length , 1) 
	Case = 2 
		'Clutch A
		Dim $XferFunction_Matrix_CLC_01_Onc ($Temp_Length , $TargetP_Length)
		Dim $XferFunction_Matrix_CLC_01_Ofg ($Temp_Length , $TargetP_Length)
		Dim $XferFunction_Current_CLC_01 ($TargetP_Length , 1)
	Case = 3  
		'Clutch B
		Dim $XferFunction_Matrix_CLC_02_Onc ($Temp_Length , $TargetP_Length)
		Dim $XferFunction_Matrix_CLC_02_Ofg ($Temp_Length , $TargetP_Length)
		Dim $XferFunction_Current_CLC_02 ($TargetP_Length , 1)
	Case = 4
		'Clutch C
		Dim $XferFunction_Matrix_CLC_03_Onc ($Temp_Length , $TargetP_Length)
		Dim $XferFunction_Matrix_CLC_03_Ofg ($Temp_Length , $TargetP_Length)
		Dim $XferFunction_Current_CLC_03 ($TargetP_Length , 1)
	Case = 5   
		'Clutch D
		If $CurrentRunLine < 1400
			'Low Gain
			Dim $XferFunction_Matrix_CLC_04_Onc_Lo ($Temp_Length , $TargetP_Length)
			Dim $XferFunction_Matrix_CLC_04_Ofg_Lo ($Temp_Length , $TargetP_Length)
		Else
			'High Gain
			Dim $XferFunction_Matrix_CLC_04_Onc_Hi ($Temp_Length , $TargetP_Length)	
			Dim $XferFunction_Matrix_CLC_04_Ofg_Hi ($Temp_Length , $TargetP_Length)	
		End
		Dim $XferFunction_Current_CLC_04 ($TargetP_Length , 1)	
	Case = 6
		'Clutch E
		If $CurrentRunLine < 1400
			'Low Gain
			Dim $XferFunction_Matrix_CLC_05_Onc_Lo ($Temp_Length , $TargetP_Length)
			Dim $XferFunction_Matrix_CLC_05_Ofg_Lo ($Temp_Length , $TargetP_Length)
		Else
			'High Gain
			Dim $XferFunction_Matrix_CLC_05_Onc_Hi ($Temp_Length , $TargetP_Length)
			Dim $XferFunction_Matrix_CLC_05_Ofg_Hi ($Temp_Length , $TargetP_Length)
		End
		Dim $XferFunction_Current_CLC_05 ($TargetP_Length , 1)	
	Case = 7 
		'Clutch F
		Dim $XferFunction_Matrix_CLC_06_Onc ($Temp_Length , $TargetP_Length)
		Dim $XferFunction_Matrix_CLC_06_Ofg ($Temp_Length , $TargetP_Length)
		Dim $XferFunction_Current_CLC_06 ($TargetP_Length , 1)
	Case = 8
		'TCC
		Dim $XferFunction_Matrix_TCC ($Temp_Length , $TargetP_Length)
		Dim $XferFunction_Current_TCC ($TargetP_Length , 1)
End_Select
Save_Variables
'Screen_Message (Yellow,check var file)
'Pause
End_Sub 

'*******************************************************
Sub Xfer_Current_Optimization
'*******************************************************
Log_Message (Running Xfer_Current_Optimization Subroutine)

'Initialize error, timers, indices, and flags
Let $Cumulative_Error = 0
Let $Pressure_Settled_Flag = 0
Let $Elapsed_Current_Optimize_Time = 0
Let $Current_Optimize_Count = 0
Let $XferLoopTime = 0
Let $Xfer_Press_Error = 0
Let $Loop = 0

'Monitor_On Pressure_Settle
Let $Pressure_Monitor_Flag = 0
Let $Pressure_Settled_Flag = 0

'Start Timers
Let $XferLoop_StartTime = Timer
Let $Current_Optimize_Start_Time = Timer

'Start current pressure PID control loop
Do
	'Increment loop number
	Let $Loop = $Loop + 1
	'***********************
	'Ignore target pressures below 10kpa due to low signal to noise
	If $TargetP <= 10 Then Goto Xfer_Current_Optimized:
	'***********************
	'Capture time
	Let $Elapsed_Current_Optimize_Time = Timer - $Current_Optimize_Start_Time
	'Increase allowable settle time for low pressure setpoints
	If $TargetP < 300
		Let $TotalStepTime = $XferStepTime + 5
	Else
		Let $TotalStepTime = $XferStepTime
	End	
	'********************
	'Exit loop if pressure has settled between low and high threshold
	If $Pressure_Settled_Flag = 1 Then Goto Xfer_Current_Optimized:
	'Exit loop without pressure_settled_flag if total step time has been exceeded
	If $Elapsed_Current_Optimize_Time > $TotalStepTime Then Goto Xfer_Current_Optimized:
	'If pressure monitor is not active, start pressure monitor if measured pressure is within the acceptable threshold
	If $Pressure_Monitor_Flag ~= 1
		If $AdjustedMeasuredP > $TargetP_Low
			If $AdjustedMeasuredP < $TargetP_High
				'Zero timer
				Let $Elapsed_Pressure_Settle_Time = 0
				'Start timer
				Let $Pressure_Settle_Start_Time = Timer
				Log_Message (TargetP %%$TargetP%% pressure %%$AdjustedMeasuredP%% within target range. Starting Pressure Settle monitor.)
				'Set flag that pressure is being monitored
				Let $Pressure_Monitor_Flag = 1
				'Start pressure monitor
				Monitor_On Pressure_Settle
				Log_Message (Starting Pressure_Settle monitor. Xfer_Current_Optimization.)
			End
		End
	End
	'Capture measured average pressure
	Select_Case $CurrentRunElement
		Case = 1
			'Line Pressure
			Let $MeasuredP = LPC_1sMAve
		Case = 2 
			'Clutch A
			Let $MeasuredP = ClA_1sMAve
		Case = 3  
			'Clutch B
			Let $MeasuredP = ClB_1sMAve
		Case = 4
			'Clutch C
			Let $MeasuredP = ClC_1sMAve
		Case = 5
			'Clutch D
			Let $MeasuredP = ClD_1sMAve
		Case = 6
			'Clutch E
			Let $MeasuredP = ClE_1sMAve
		Case = 7
			'Clutch F
			Let $MeasuredP = ClF_1sMAve
		Case = 8
			'TCC
			Let $MeasuredP = TCC_1sMAve
	End_Select
	'Adjust measured pressure by captured zero offset.
	If $TargetP = 0
	    Let $AdjustedMeasuredP = $MeasuredP - $XferZeroOffset
	Else
		Let $AdjustedMeasuredP = $MeasuredP
	End
	'Set latch threshold 300 kpa above target pressure to determine iClutch F is latching
	'This could be improved with more specific latch thresholds for clutches that latch
	Let $Latch_threshold = $TargetP + 300
	'If latch threshold exceeded for all clutches but Line Pressure solenoid, exit optimization loop
	If $CurrentRunElement ~= 1
		If $MeasuredP > $Latch_threshold
			Log_Message (Latch_threshold of %%$Latch_threshold,0D%%kpa reached for TargetP of %%$TargetP%%kpa. Current_Command is %%$Current_Command,6D%%amps.)
			Goto Xfer_Current_Optimized:
		End
	End
	'Determine maximum pressure normalizer
	Let $PMax = $PressureNormalizer (2 , $TargetP_Length)
	'Capture last pressure error for comparator
	Let $Last_Xfer_Press_Error = $Xfer_Press_Error
	'Calculate pressure error
	Let $Xfer_Press_Error = $TargetP - $AdjustedMeasuredP
	Log_Message (TargetP %%$TargetP%%kpa. Loop %%$Loop%%. MeasuredP is %%$MeasuredP,1D%%kpa)
	Log_Message (-Xfer_Press_Error is %%$Xfer_Press_Error,0D%%kpa.)
	'Determine PID adjustment factors
	'********************************************
	'Proportional Control
	Let $CurrentAdjust_KP = $Xfer_Press_Error * $Xfer_KP	
	'********************************************
	'Integral Control
	Let $XferLoopTime = Timer - $XferLoop_StartTime
	Let $Integral_Error = $Xfer_Press_Error * $XferLoopTime
	Let $Cumulative_Error = $Cumulative_Error + $Integral_Error
	Let $CurrentAdjust_KI = $Xfer_KI * $Cumulative_Error
	'********************************************	
	'Derivative Control
	Let $Delta_Error = $Xfer_Press_Error - $Last_Xfer_Press_Error
	Let $Delta_Error_dt = $Delta_Error / $XferLoopTime
	Let $CurrentAdjust_KD = $Xfer_KD * $Delta_Error_dt
	'********************************************	
	Let $Last_CurrentAdjust = $CurrentAdjust
	Let $CurrentAdjust_PI = $CurrentAdjust_KP + $CurrentAdjust_KI
	Let $CurrentAdjust = $CurrentAdjust_PI + $CurrentAdjust_KD
	'Set last current command as comparator
	Let $Previous_Current_Command = $Current_Command
	'Adjust current command by calculated PID adjustment factor
	If $CurrentRunElement ~= 1
		'Add adjustment for normally low solenoids
		Let $Current_Command = $Current_Command + $CurrentAdjust
	Else
		'Subtract adjustment for normally high solenoid
		Let $Current_Command = $Current_Command - $CurrentAdjust
	End
	'Limit current command to 1.2Amps
	If $Current_Command > 1.2
		Let $Current_Command = 1.2
	End
	Log_Message (--XferLoopTime is %%$XferLoopTime,6D%%secs. Cumulative_Error %%$Cumulative_Error,6D%%kpa. Elapsed_Current_Optimize_Time is %%$Elapsed_Current_Optimize_Time,6D%% secs.)
	Log_Message (---CurrentAdjust_KI is %%$CurrentAdjust_KI,8D%%.  CurrentAdjust_KP is %%$CurrentAdjust_KP,6D%%. CurrentAdjust_KD is %%$CurrentAdjust_KD,8D%%. Total CurrentAdjust is %%$CurrentAdjust,6D%%kpa.)
	Log_Message (----Setting %%!Element%% offset to %%$Current_Command,4D%%.)
	'For step-up, set current command to transfer function current offset table
	If $Xfer_StepDirection = 1
		Select_Case $CurrentRunElement
			Case = 1
				'Line Pressure
				Set_Function_Table TVPSC_IA_TRGT_LNP_A_M = $Current_Command
			Case = 2
				'Clutch A
				Set_Function_Table TVPSC_IA_TRGT_CLC_01_ONC_A_M = $Current_Command			
			Case = 3
				'Clutch B
				Set_Function_Table TVPSC_IA_TRGT_CLC_02_ONC_A_M = $Current_Command			
			Case = 4
				'Clutch C
				Set_Function_Table TVPSC_IA_TRGT_CLC_03_ONC_A_M = $Current_Command			
			Case = 5
				'Clutch D
				If $CurrentRunLine < 1200
					'Low Gain
					Set_Function_Table TVPSC_IA_TRGT_CLC_04_ONC_LO_A_M = $Current_Command			
				Else
					'High Gain
					Set_Function_Table TVPSC_IA_TRGT_CLC_04_ONC_HI_A_M = $Current_Command			
				End
			Case = 6
				'Clutch E
				If $CurrentRunLine < 1200
					'Low Gain
					Set_Function_Table TVPSC_IA_TRGT_CLC_05_ONC_LO_A_M = $Current_Command			
				Else
					'High Gain
					Set_Function_Table TVPSC_IA_TRGT_CLC_05_ONC_HI_A_M = $Current_Command			
				End
			Case = 7
				'Clutch F
				Set_Function_Table TVPSC_IA_TRGT_CLC_06_ONC_A_M = $Current_Command		
			Case = 8
				'TCC
				Set_Function_Table TVPSC_IA_TRGT_TCC_A_M = $Current_Command			
		End_Select
	End
	'For step-down, use offgoing transfer function offset table
	If $Xfer_StepDirection = 2
		Select_Case $CurrentRunElement
			Case = 2
				'Clutch A
				Set_Function_Table TVPSC_IA_TRGT_CLC_01_OFG_A_M = $Current_Command			
			Case = 3
				'Clutch B
				Set_Function_Table TVPSC_IA_TRGT_CLC_02_OFG_A_M = $Current_Command			
			Case = 4
				'Clutch C
				Set_Function_Table TVPSC_IA_TRGT_CLC_03_OFG_A_M = $Current_Command			
			Case = 5
				'Clutch D
				If $CurrentRunLine < 1200
					'Low Gain
					Set_Function_Table TVPSC_IA_TRGT_CLC_04_OFG_LO_A_M = $Current_Command			
				Else
					'High Gain
					Set_Function_Table TVPSC_IA_TRGT_CLC_04_OFG_HI_A_M = $Current_Command			
				End
			Case = 6
				'Clutch E
				If $CurrentRunLine < 1200
					'Low Gain
					Set_Function_Table TVPSC_IA_TRGT_CLC_05_OFG_LO_A_M = $Current_Command			
				Else	
					'High Gain
					Set_Function_Table TVPSC_IA_TRGT_CLC_05_OFG_HI_A_M = $Current_Command			
				End
			Case = 7
				'Clutch F
				Set_Function_Table TVPSC_IA_TRGT_CLC_06_OFG_A_M = $Current_Command		
			Case = 8
				'TCC
				Set_Function_Table TVPSC_IA_TRGT_TCC_A_M = $Current_Command				
		End_Select
	End
	Set_Activate
	'Reset loop time
	Let $XferLoopTime = 0
	'Restart loop timer
	Let $XferLoop_StartTime = Timer
Loop

Xfer_Current_Optimized:
'Turn off pressure monitor
Monitor_Off Pressure_Settle
Log_Message (Stopping Pressure_Settle monitor. Xfer_Offset_Indexer.)

'************************************
'Log message if pressure does not settle within the pressure threshold within the allotted time
If $Pressure_Settled_Flag ~= 1		
	Log_Message (Current_Optimization timed out for %%$TargetP,0D%% kpa.)
End	
Log_Message (**********%%!Element%% current for %%$TargetP,0D%% kpa is %%$Current_Command,6D%%. AdjustedMeasuredP is %%$AdjustedMeasuredP,1D%%.*************)
Log_Message (**********TargetP_Low is %%$TargetP_Low,2D%%. TargetP_High is %%$TargetP_High,2D%%***********)
'Capture settled current command in the variable matrix created in the Xfer_Offset_Indexer subroutine
If $Xfer_StepDirection = 1
	'Copy Step-Up current to oncoming current offset matrix
	Select_Case $CurrentRunElement
		Case = 1
			'Line Pressure 
			Let $XferFunction_Matrix_LNP ($Temp_Index , $TargetP_Index) = $Current_Command
		Case = 2 
			'Clutch A
			Let $XferFunction_Matrix_CLC_01_Onc ($Temp_Index , $TargetP_Index) = $Current_Command
		Case = 3 
			'Clutch B
			Let $XferFunction_Matrix_CLC_02_Onc ($Temp_Index , $TargetP_Index) = $Current_Command
		Case = 4  
			'Clutch C
			Let $XferFunction_Matrix_CLC_03_Onc ($Temp_Index , $TargetP_Index) = $Current_Command
		Case = 5
			'Clutch D		
			Select_Case $Trans_Select 
				Case = 2
					'8F24
					Let $XferFunction_Matrix_CLC_04_Onc ($Temp_Index , $TargetP_Index) = $Current_Command
				Case = 3
					'10R140
					If $CurrentRunLine < 1400
						'Low Gain
						Let $XferFunction_Matrix_CLC_04_Onc_Lo ($Temp_Index , $TargetP_Index) = $Current_Command
					Else
						'High Gain
						Let $XferFunction_Matrix_CLC_04_Onc_Hi ($Temp_Index , $TargetP_Index) = $Current_Command
					End
				Case = 4
					'8F57
					Let $XferFunction_Matrix_CLC_04_Onc ($Temp_Index , $TargetP_Index) = $Current_Command					
				Case = 6
					'10R80E
					If $CurrentRunLine < 1400
						'Low Gain
						Let $XferFunction_Matrix_CLC_04_Onc_Lo ($Temp_Index , $TargetP_Index) = $Current_Command
					Else
						'High Gain
						Let $XferFunction_Matrix_CLC_04_Onc_Hi ($Temp_Index , $TargetP_Index) = $Current_Command
					End
				Case = 7
					'8F35
					Let $XferFunction_Matrix_CLC_04_Onc ($Temp_Index , $TargetP_Index) = $Current_Command
				Case = 8
					'6R80
					If $CurrentRunLine < 1400
						'Low Gain
						Let $XferFunction_Matrix_CLC_04_Onc_Lo ($Temp_Index , $TargetP_Index) = $Current_Command
					Else
						'High Gain
						Let $XferFunction_Matrix_CLC_04_Onc_Hi ($Temp_Index , $TargetP_Index) = $Current_Command
					End				
			End_Select		
		Case = 6
			'Clutch E
			Select_Case $Trans_Select 
				Case = 2
					'8F24
					Let $XferFunction_Matrix_CLC_05_Onc ($Temp_Index , $TargetP_Index) = $Current_Command
				Case = 3
					'10R140
					If $CurrentRunLine < 1400
						'Low Gain
						Let $XferFunction_Matrix_CLC_05_Onc_Lo ($Temp_Index , $TargetP_Index) = $Current_Command
					Else
						'High Gain
						Let $XferFunction_Matrix_CLC_05_Onc_Hi ($Temp_Index , $TargetP_Index) = $Current_Command
					End
				Case = 4
					'8F57
					Let $XferFunction_Matrix_CLC_05_Onc ($Temp_Index , $TargetP_Index) = $Current_Command					
				Case = 6
					'10R80E
						If $CurrentRunLine < 1400
							'Low Gain
							Let $XferFunction_Matrix_CLC_05_Onc_Lo ($Temp_Index , $TargetP_Index) = $Current_Command
						Else
							'High Gain
							Let $XferFunction_Matrix_CLC_05_Onc_Hi ($Temp_Index , $TargetP_Index) = $Current_Command
						End
				Case = 7
					'8F35
					Let $XferFunction_Matrix_CLC_05_Onc ($Temp_Index , $TargetP_Index) = $Current_Command
				Case = 8
					'6R80
						If $CurrentRunLine < 1400
							'Low Gain
							Let $XferFunction_Matrix_CLC_05_Onc_Lo ($Temp_Index , $TargetP_Index) = $Current_Command
						Else
							'High Gain
							Let $XferFunction_Matrix_CLC_05_Onc_Hi ($Temp_Index , $TargetP_Index) = $Current_Command
						End
			End_Select
		Case = 7
			'Clutch F
			Let $XferFunction_Matrix_CLC_06_Onc ($Temp_Index , $TargetP_Index) = $Current_Command
		Case = 8   
			'TCC
			Let $XferFunction_Matrix_TCC ($Temp_Index , $TargetP_Index) = $Current_Command							
	End_Select
End

'For step-down, copy current command of settled pressure to offgoing transfer function tables	
If $Xfer_StepDirection = 2
	Select_Case $CurrentRunElement
		Case = 1
			'Line Pressure
			Let $XferFunction_Matrix_LNP ($Temp_Index , $TargetP_Index) = $Current_Command
		Case = 2 
			'Clutch A
			Let $XferFunction_Matrix_CLC_01_Ofg ($Temp_Index , $TargetP_Index) = $Current_Command
		Case = 3  
			'Clutch B
			Let $XferFunction_Matrix_CLC_02_Ofg ($Temp_Index , $TargetP_Index) = $Current_Command
		Case = 4
			'Clutch C
			Let $XferFunction_Matrix_CLC_03_Ofg ($Temp_Index , $TargetP_Index) = $Current_Command
		Case = 5
			'Clutch D
			Select_Case $Trans_Select 
				Case = 2
					'8F24
					Let $XferFunction_Matrix_CLC_04_Ofg ($Temp_Index , $TargetP_Index) = $Current_Command			
				Case = 3
					'10R140
					If $CurrentRunLine < 1200
						'Low Gain
						Let $XferFunction_Matrix_CLC_04_Ofg_Lo ($Temp_Index , $TargetP_Index) = $Current_Command
					Else
						'High Gain
						Let $XferFunction_Matrix_CLC_04_Ofg_Hi ($Temp_Index , $TargetP_Index) = $Current_Command
					End	
				Case = 4
					'8F57
					Let $XferFunction_Matrix_CLC_04_Ofg ($Temp_Index , $TargetP_Index) = $Current_Command					
				Case = 6
					'10R80E
					If $CurrentRunLine < 1200
						'Low Gain
						Let $XferFunction_Matrix_CLC_04_Ofg_Lo ($Temp_Index , $TargetP_Index) = $Current_Command
					Else
						'High Gain
						Let $XferFunction_Matrix_CLC_04_Ofg_Hi ($Temp_Index , $TargetP_Index) = $Current_Command
					End
				Case = 7
					'8F35
					Let $XferFunction_Matrix_CLC_04_Ofg ($Temp_Index , $TargetP_Index) = $Current_Command
				Case = 8
					'6R80
					If $CurrentRunLine < 1200
						'Low Gain
						Let $XferFunction_Matrix_CLC_04_Ofg_Lo ($Temp_Index , $TargetP_Index) = $Current_Command
					Else
						'High Gain
						Let $XferFunction_Matrix_CLC_04_Ofg_Hi ($Temp_Index , $TargetP_Index) = $Current_Command
					End
			End_Select
		Case = 6
			'Clutch E
			Select_Case $Trans_Select 
				Case = 2
					'8F24
					Let $XferFunction_Matrix_CLC_05_Ofg ($Temp_Index , $TargetP_Index) = $Current_Command			
				Case = 3
					'10R140
					If $CurrentRunLine < 1200
						'Low Gain
						Let $XferFunction_Matrix_CLC_05_Ofg_Lo ($Temp_Index , $TargetP_Index) = $Current_Command
					Else
						'High Gain
						Let $XferFunction_Matrix_CLC_05_Ofg_Hi ($Temp_Index , $TargetP_Index) = $Current_Command
					End
				Case = 4
					'8F57
					Let $XferFunction_Matrix_CLC_05_Ofg ($Temp_Index , $TargetP_Index) = $Current_Command						
				Case = 6
					'10R80E
					If $CurrentRunLine < 1200
						'Low Gain
						Let $XferFunction_Matrix_CLC_05_Ofg_Lo ($Temp_Index , $TargetP_Index) = $Current_Command
					Else
						'High Gain
						Let $XferFunction_Matrix_CLC_05_Ofg_Hi ($Temp_Index , $TargetP_Index) = $Current_Command
					End
				Case = 7
					'8F35
					Let $XferFunction_Matrix_CLC_05_Ofg ($Temp_Index , $TargetP_Index) = $Current_Command
				Case = 8
					'6R80
					If $CurrentRunLine < 1200
						'Low Gain
						Let $XferFunction_Matrix_CLC_05_Ofg_Lo ($Temp_Index , $TargetP_Index) = $Current_Command
					Else
						'High Gain
						Let $XferFunction_Matrix_CLC_05_Ofg_Hi ($Temp_Index , $TargetP_Index) = $Current_Command
					End
			End_Select
		Case = 7 
			'Clutch F
			Let $XferFunction_Matrix_CLC_06_Ofg ($Temp_Index , $TargetP_Index) = $Current_Command
		Case = 8  
			'TCC
			Let $XferFunction_Matrix_TCC ($Temp_Index , $TargetP_Index) = $Current_Command
	End_Select
End

'Export new offset tables to Test Setup sheet
Excel (Workbook = Test_Setup)
Excel (Worksheet = Metrics)
Excel (Visible = False)

'For Step-Up, copy oncoming transfer function matrices to test setup Ranges
If $Xfer_StepDirection = 1
	Select_Case $CurrentRunElement
		Case = 1
			'Line Pressure
			Excel (Range(XferFunction_VFS0) = $XferFunction_Matrix_LNP)
		Case = 2
			'Clutch A
			Excel (Range(XferFunction_VFS1_Onc) = $XferFunction_Matrix_CLC_01_Onc)
		Case = 3
			'Clutch B
			Excel (Range(XferFunction_VFS2_Onc) = $XferFunction_Matrix_CLC_02_Onc)
		Case = 4
			'Clutch C
			Excel (Range(XferFunction_VFS3_Onc) = $XferFunction_Matrix_CLC_03_Onc)
		Case = 5
			'Clutch D
			Select_Case $Trans_Select 	
				Case = 2
					'8F24
					Excel (Range(XferFunction_VFS4_Onc) = $XferFunction_Matrix_CLC_04_Onc)			
				Case = 3
					'10R140
					If $CurrentRunLine < 1400
						'Low Gain
						Excel (Range(XferFunction_VFS4_Onc_Lo) = $XferFunction_Matrix_CLC_04_Onc_Lo)
					Else
						'High Gain
						Excel (Range(XferFunction_VFS4_Onc_Hi) = $XferFunction_Matrix_CLC_04_Onc_Hi)
					End	
				Case = 4
					'8F57
					Excel (Range(XferFunction_VFS4_Onc) = $XferFunction_Matrix_CLC_04_Onc)					
				Case = 6
					'10R80E
					If $CurrentRunLine < 1400
						Excel (Range(XferFunction_VFS4_Onc_Lo) = $XferFunction_Matrix_CLC_04_Onc_Lo)
					Else
						Excel (Range(XferFunction_VFS4_Onc_Hi) = $XferFunction_Matrix_CLC_04_Onc_Hi)
					End
				Case = 7
					'8F35
					Excel (Range(XferFunction_VFS4_Onc) = $XferFunction_Matrix_CLC_04_Onc)
				Case = 8
					'6R80
					If $CurrentRunLine < 1400
						Excel (Range(XferFunction_VFS4_Onc_Lo) = $XferFunction_Matrix_CLC_04_Onc_Lo)
					Else
						Excel (Range(XferFunction_VFS4_Onc_Hi) = $XferFunction_Matrix_CLC_04_Onc_Hi)
					End
			End_Select
		Case = 6
			'Clutch E
			Select_Case $Trans_Select 
				Case = 2
					'8F24
					Excel (Range(XferFunction_VFS5_Onc) = $XferFunction_Matrix_CLC_05_Onc)			
				Case = 3
					'10R140
					If $CurrentRunLine < 1400
						'Low Gain
						Excel (Range(XferFunction_VFS5_Onc_Lo) = $XferFunction_Matrix_CLC_05_Onc_Lo)
					Else
						'High Gain
						Excel (Range(XferFunction_VFS5_Onc_Hi) = $XferFunction_Matrix_CLC_05_Onc_Hi)
					End
				Case = 4
					'8F57
					Excel (Range(XferFunction_VFS5_Onc) = $XferFunction_Matrix_CLC_05_Onc)						
				Case = 6
					'10R80E
					If $CurrentRunLine < 1400
						'Low Gain
						Excel (Range(XferFunction_VFS5_Onc_Lo) = $XferFunction_Matrix_CLC_05_Onc_Lo)
					Else
						'High Gain
						Excel (Range(XferFunction_VFS5_Onc_Hi) = $XferFunction_Matrix_CLC_05_Onc_Hi)
					End
				Case = 7
					'8F35
					Excel (Range(XferFunction_VFS5_Onc) = $XferFunction_Matrix_CLC_05_Onc)
				Case = 8
					'6R80
					If $CurrentRunLine < 1400
						'Low Gain
						Excel (Range(XferFunction_VFS5_Onc_Lo) = $XferFunction_Matrix_CLC_05_Onc_Lo)
					Else
						'High Gain
						Excel (Range(XferFunction_VFS5_Onc_Hi) = $XferFunction_Matrix_CLC_05_Onc_Hi)
					End
			End_Select
		Case = 7
			'Clutch F
			Excel (Range(XferFunction_VFS6_Onc) = $XferFunction_Matrix_CLC_06_Onc)
		Case = 8
			'TCC
			Excel (Range(XferFunction_VFS7) = $XferFunction_Matrix_TCC)
	End_Select
End

'For Step-Down, copy offgoing transfer function matrices to test setup Ranges
If $Xfer_StepDirection = 2
	Select_Case $CurrentRunElement
		Case = 2
			'Clutch A
			Excel (Range(XferFunction_VFS1_Ofg) = $XferFunction_Matrix_CLC_01_Ofg)
		Case = 3
			'Clutch B
			Excel (Range(XferFunction_VFS2_Ofg) = $XferFunction_Matrix_CLC_02_Ofg)
		Case = 4
			'Clutch C
			Excel (Range(XferFunction_VFS3_Ofg) = $XferFunction_Matrix_CLC_03_Ofg)
		Case = 5
			'Clutch D
			Select_Case $Trans_Select
				Case = 2
					'8F24
					Excel (Range(XferFunction_VFS4_Ofg) = $XferFunction_Matrix_CLC_04_Ofg)					
				Case = 3
					'10R140
					If $CurrentRunLine < 1400
						Excel (Range(XferFunction_VFS4_Ofg_Lo) = $XferFunction_Matrix_CLC_04_Ofg_Lo)
					Else
						Excel (Range(XferFunction_VFS4_Ofg_Hi) = $XferFunction_Matrix_CLC_04_Ofg_Hi)
					End
				Case = 4
					'8F57
					Excel (Range(XferFunction_VFS4_Ofg) = $XferFunction_Matrix_CLC_04_Ofg)						
				Case = 6
					'10R80E
					If $CurrentRunLine < 1400
						Excel (Range(XferFunction_VFS4_Ofg_Lo) = $XferFunction_Matrix_CLC_04_Ofg_Lo)
					Else
						Excel (Range(XferFunction_VFS4_Ofg_Hi) = $XferFunction_Matrix_CLC_04_Ofg_Hi)
					End
				Case = 7
					'8F35
					Excel (Range(XferFunction_VFS4_Ofg) = $XferFunction_Matrix_CLC_04_Ofg)
				Case = 8
					'6R80
					If $CurrentRunLine < 1400
						Excel (Range(XferFunction_VFS4_Ofg_Lo) = $XferFunction_Matrix_CLC_04_Ofg_Lo)
					Else
						Excel (Range(XferFunction_VFS4_Ofg_Hi) = $XferFunction_Matrix_CLC_04_Ofg_Hi)
					End
			End_Select		
		Case = 6
			'Clutch E
			Select_Case $Trans_Select 	
				Case = 2
					'8F24
					Excel (Range(XferFunction_VFS5_Ofg) = $XferFunction_Matrix_CLC_05_Ofg)			
				Case = 3
					'10R140
					If $CurrentRunLine < 1400
						'Low Gain
						Excel (Range(XferFunction_VFS5_Ofg_Lo) = $XferFunction_Matrix_CLC_05_Ofg_Lo)
					Else
						'High Gain
						Excel (Range(XferFunction_VFS5_Ofg_Hi) = $XferFunction_Matrix_CLC_05_Ofg_Hi)
					End
				Case = 4
					'8F57
					Excel (Range(XferFunction_VFS5_Ofg) = $XferFunction_Matrix_CLC_05_Ofg)					
				Case = 6
					'10R80E
					If $CurrentRunLine < 1400
						'Low Gain
						Excel (Range(XferFunction_VFS5_Ofg_Lo) = $XferFunction_Matrix_CLC_05_Ofg_Lo)
					Else
						'High Gain
						Excel (Range(XferFunction_VFS5_Ofg_Hi) = $XferFunction_Matrix_CLC_05_Ofg_Hi)
					End
				Case = 7
					'8F35
					Excel (Range(XferFunction_VFS5_Ofg) = $XferFunction_Matrix_CLC_05_Ofg)
				Case = 8
					'6R80
					If $CurrentRunLine < 1400
						'Low Gain
						Excel (Range(XferFunction_VFS5_Ofg_Lo) = $XferFunction_Matrix_CLC_05_Ofg_Lo)
					Else
						'High Gain
						Excel (Range(XferFunction_VFS5_Ofg_Hi) = $XferFunction_Matrix_CLC_05_Ofg_Hi)
					End
			End_Select	
		Case = 7
			'Clutch F
			Excel (Range(XferFunction_VFS6_Ofg) = $XferFunction_Matrix_CLC_06_Ofg)
	End_Select
End

'Save Test Setup and exit Excel
Excel (Save)
Excel (Quit)

End_Sub

'*******************************************************
Monitor Pressure_Settle
'*******************************************************

'Start pressure settle timer
Let $Elapsed_Pressure_Settle_Time = Timer - $Pressure_Settle_Start_Time
Select_Case $CurrentRunElement
	Case = 1
		'Line Pressure
		Let $MeasuredP = LPC_1sMAve
	Case = 2 
		'Clutch A
		Let $MeasuredP = ClA_1sMAve
	Case = 3 
		'Clutch B
		Let $MeasuredP = ClB_1sMAve
	Case = 4
		'Clutch C
		Let $MeasuredP = ClC_1sMAve
	Case = 5
		'Clutch D
		Let $MeasuredP = ClD_1sMAve
	Case = 6
		'Clutch E
		Let $MeasuredP = ClE_1sMAve
	Case = 7
		'Clutch F
		Let $MeasuredP = ClF_1sMAve
	Case = 8
		'TCC
		Let $MeasuredP = TCC_1sMAve
End_Select

'Subtract zero-level offset for pressure target of 0kpa
If $TargetP = 0
	Let $AdjustedMeasuredP = $MeasuredP - $XferZeroOffset
Else
	Let $AdjustedMeasuredP = $MeasuredP
End

'If measured pressure is below target, zero pressure-settled flag and restart timer
If $AdjustedMeasuredP < $TargetP_Low
	Let $Pressure_Settled_Flag = 0
	Log_Message (Pressure Settle timer reset. Low)
	Let $Elapsed_Pressure_Settle_Time = 0
	Let $Pressure_Settle_Start_Time = Timer
End	

'If measured pressure is above target threshold threshold, zero pressure-settled flag and restart timer
If $AdjustedMeasuredP > $TargetP_High
	Let $Pressure_Settled_Flag = 0
	Log_Message (Pressure Settle timer reset. High)
	Let $Elapsed_Pressure_Settle_Time = 0
	Let $Pressure_Settle_Start_Time = Timer
End	

'If Pressure is settled for more than 5 seconds, turn off monitor and set pressure-settled flag	
If $Elapsed_Pressure_Settle_Time > 5
	Let $Pressure_Settled_Flag = 1
	Monitor_Off Pressure_Settle
	Log_Message (Stopping Pressure_Settle monitor. Pressure_Settle.)
End	

End_Monitor
'*******************************************************
Sub Settle_Pressure
'*******************************************************
Log_Message (Running Settle_Pressure Subroutine)

'Initialize settle pressure timer
Let $Elapsed_Pressure_Settle_Time = 0
Let $Pressure_Settle_Start_Time = Timer

'Start Settle_Pressure control loop
Do
	'Update timer
	Let $Elapsed_Pressure_Settle_Time = Timer - $Pressure_Settle_Start_Time
	'Measure average pressure
	Select_Case $CurrentRunElement
		Case = 1
			'Line Pressure
			Let $MeasuredP = LPC_1sMAve
		Case = 2
			'Clutch A
			Let $MeasuredP = ClA_1sMAve
		Case = 3 
			'Clutch B
			Let $MeasuredP = ClB_1sMAve
		Case = 4
			'Clutch C
			Let $MeasuredP = ClC_1sMAve
		Case = 5
			'Clutch D
			Let $MeasuredP = ClD_1sMAve
		Case = 6
			'Clutch E
			Let $MeasuredP = ClE_1sMAve
		Case = 7
			'Clutch F
			Let $MeasuredP = ClF_1sMAve
		Case = 8
			'TCC
			Let $MeasuredP = TCC_1sMAve
	End_Select
	
	'If measured pressure is below low target threshold, zero pressure-settled flag
	If $AdjustedMeasuredP < $TargetP_Low
		Let $Pressure_Settled_Flag = 0
		Goto Pressure_Settled:
	End	
	
	'If measured pressure is above high target threshold, zero pressure-settled flag
	If $AdjustedMeasuredP > $TargetP_High
		Let $Pressure_Settled_Flag = 0
		Goto Pressure_Settled:
	End		
	
	'If measured pressure settle time exceeds 1 second, set pressure-settled flag
	If $Elapsed_Pressure_Settle_Time > 1
		Let $Pressure_Settled_Flag = 1
		Goto Pressure_Settled:
	End	
Loop	
Pressure_Settled:

'Copy current command for settled pressure to transfer function offset matrix
If $Pressure_Settled_Flag = 1		
	Log_Message (**********%%!Element%% current for %%$TargetP,0D%% kpa is %%$Current_Command,6D%%. AdjustedMeasuredP is %%$AdjustedMeasuredP,1D%%.*************)
	Log_Message (**********TargetP_Low is %%$TargetP_Low,2D%%. TargetP_High is %%$TargetP_High,2D%%***********)
	'For step-up, copy current command to oncoming current offset matrix
	If $Xfer_StepDirection = 1
		Select_Case $CurrentRunElement
			Case = 1
				'Line Pressure
				Let $XferFunction_Matrix_LNP ($Temp_Index , $TargetP_Index) = $Current_Command
			Case = 2 
				'Clutch A
				Let $XferFunction_Matrix_CLC_01_Onc ($Temp_Index , $TargetP_Index) = $Current_Command
			Case = 3
				'Clutch B
				Let $XferFunction_Matrix_CLC_02_Onc ($Temp_Index , $TargetP_Index) = $Current_Command
			Case = 4 
				'Clutch C
				Let $XferFunction_Matrix_CLC_03_Onc ($Temp_Index , $TargetP_Index) = $Current_Command
			Case = 5
				'Clutch D
				Select_Case $Trans_Select 
					Case = 2
						'8F24
						Let $XferFunction_Matrix_CLC_04_Onc ($Temp_Index , $TargetP_Index) = $Current_Command				
					Case = 3
						'10R140
						If $CurrentRunLine < 1400
							'Low Gain
							Let $XferFunction_Matrix_CLC_04_Onc_Lo ($Temp_Index , $TargetP_Index) = $Current_Command
						Else
							'High Gain
							Let $XferFunction_Matrix_CLC_04_Onc_Hi ($Temp_Index , $TargetP_Index) = $Current_Command
						End
					Case = 4
						'8F57
						Let $XferFunction_Matrix_CLC_04_Onc ($Temp_Index , $TargetP_Index) = $Current_Command						
					Case = 6
						'10R60/80
						If $CurrentRunLine < 1400
							'Low Gain
							Let $XferFunction_Matrix_CLC_04_Onc_Lo ($Temp_Index , $TargetP_Index) = $Current_Command
						Else
							'High Gain
							Let $XferFunction_Matrix_CLC_04_Onc_Hi ($Temp_Index , $TargetP_Index) = $Current_Command
						End
					Case = 7
						'8F35
						Let $XferFunction_Matrix_CLC_04_Onc ($Temp_Index , $TargetP_Index) = $Current_Command
					Case = 8
						'6R80
						If $CurrentRunLine < 1400
							'Low Gain
							Let $XferFunction_Matrix_CLC_04_Onc_Lo ($Temp_Index , $TargetP_Index) = $Current_Command
						Else
							'High Gain
							Let $XferFunction_Matrix_CLC_04_Onc_Hi ($Temp_Index , $TargetP_Index) = $Current_Command
						End
				End_Select
			Case = 6
				'Clutch E
				Select_Case $Trans_Select
					Case = 2
						'8F24
						Let $XferFunction_Matrix_CLC_05_Onc ($Temp_Index , $TargetP_Index) = $Current_Command				
					Case = 3
						'10R140
						If $CurrentRunLine < 1400
							'Low Gain
							Let $XferFunction_Matrix_CLC_05_Onc_Lo ($Temp_Index , $TargetP_Index) = $Current_Command
						Else
							'High Gain
							Let $XferFunction_Matrix_CLC_05_Onc_Hi ($Temp_Index , $TargetP_Index) = $Current_Command
						End	
					Case = 4
						'8F57
						Let $XferFunction_Matrix_CLC_05_Onc ($Temp_Index , $TargetP_Index) = $Current_Command						
					Case = 6
						'10R60/80
						If $CurrentRunLine < 1400
							Let $XferFunction_Matrix_CLC_05_Onc_Lo ($Temp_Index , $TargetP_Index) = $Current_Command
						Else
							Let $XferFunction_Matrix_CLC_05_Onc_Hi ($Temp_Index , $TargetP_Index) = $Current_Command
						End
					Case = 7
						'8F35
						Let $XferFunction_Matrix_CLC_05_Onc ($Temp_Index , $TargetP_Index) = $Current_Command
					Case = 8
						'6R80
						If $CurrentRunLine < 1400
							Let $XferFunction_Matrix_CLC_05_Onc_Lo ($Temp_Index , $TargetP_Index) = $Current_Command
						Else
							Let $XferFunction_Matrix_CLC_05_Onc_Hi ($Temp_Index , $TargetP_Index) = $Current_Command
						End				
				End_Select
			Case = 7
				'Clutch F
				Let $XferFunction_Matrix_CLC_06_Onc ($Temp_Index , $TargetP_Index) = $Current_Command
			Case = 8
				'TCC
				Let $XferFunction_Matrix_TCC ($Temp_Index , $TargetP_Index) = $Current_Command							
		End_Select
	End
	
	'For step-down, copy current command for settled pressure to oncoming current offset matrix
	If $Xfer_StepDirection = 2
		Select_Case $CurrentRunElement
			Case = 1
				'Line Pressure
				Let $XferFunction_Matrix_LNP ($Temp_Index , $TargetP_Index) = $Current_Command
			Case = 2
				'Clutch A
				Let $XferFunction_Matrix_CLC_01_Ofg ($Temp_Index , $TargetP_Index) = $Current_Command
			Case = 3 
				'Clutch B
				Let $XferFunction_Matrix_CLC_02_Ofg ($Temp_Index , $TargetP_Index) = $Current_Command
			Case = 4
				'Clutch C
				Let $XferFunction_Matrix_CLC_03_Ofg ($Temp_Index , $TargetP_Index) = $Current_Command
			Case = 5
				'Clutch D
				Select_Case $Trans_Select
					Case = 2
						'8F24
						Let $XferFunction_Matrix_CLC_04_Ofg ($Temp_Index , $TargetP_Index) = $Current_Command				
					Case = 3
						'10R140
						If $CurrentRunLine < 1200
							'Low Gain
							Let $XferFunction_Matrix_CLC_04_Ofg_Lo ($Temp_Index , $TargetP_Index) = $Current_Command
						Else
							'High Gain
							Let $XferFunction_Matrix_CLC_04_Ofg_Hi ($Temp_Index , $TargetP_Index) = $Current_Command
						End
					Case = 4
						'8F57
						Let $XferFunction_Matrix_CLC_04_Ofg ($Temp_Index , $TargetP_Index) = $Current_Command						
					Case = 6
						'10R60/80
						If $CurrentRunLine < 1200
							'Low Gain
							Let $XferFunction_Matrix_CLC_04_Ofg_Lo ($Temp_Index , $TargetP_Index) = $Current_Command
						Else
							'High Gain
							Let $XferFunction_Matrix_CLC_04_Ofg_Hi ($Temp_Index , $TargetP_Index) = $Current_Command
						End
					Case = 7
						'8F35
						Let $XferFunction_Matrix_CLC_04_Ofg ($Temp_Index , $TargetP_Index) = $Current_Command
					Case = 8
						'6R80
						If $CurrentRunLine < 1200
							'Low Gain
							Let $XferFunction_Matrix_CLC_04_Ofg_Lo ($Temp_Index , $TargetP_Index) = $Current_Command
						Else
							'High Gain
							Let $XferFunction_Matrix_CLC_04_Ofg_Hi ($Temp_Index , $TargetP_Index) = $Current_Command
						End
				End_Select
			Case = 6
				'Clutch E
				Select_Case $Trans_Select 
					Case = 2
						'8F24
						Let $XferFunction_Matrix_CLC_05_Ofg ($Temp_Index , $TargetP_Index) = $Current_Command				
					Case = 3
						'10R140
						If $CurrentRunLine < 1200
							Let $XferFunction_Matrix_CLC_05_Ofg_Lo ($Temp_Index , $TargetP_Index) = $Current_Command
						Else
							Let $XferFunction_Matrix_CLC_05_Ofg_Hi ($Temp_Index , $TargetP_Index) = $Current_Command
						End
					Case = 4
						'8F57
						Let $XferFunction_Matrix_CLC_05_Ofg ($Temp_Index , $TargetP_Index) = $Current_Command							
					Case = 6
						'10R60/80
						If $CurrentRunLine < 1200
							Let $XferFunction_Matrix_CLC_05_Ofg_Lo ($Temp_Index , $TargetP_Index) = $Current_Command
						Else
							Let $XferFunction_Matrix_CLC_05_Ofg_Hi ($Temp_Index , $TargetP_Index) = $Current_Command
						End
					Case = 7
						'8F35
						Let $XferFunction_Matrix_CLC_05_Ofg ($Temp_Index , $TargetP_Index) = $Current_Command
					Case = 8
						'6R80
						If $CurrentRunLine < 1200
							Let $XferFunction_Matrix_CLC_05_Ofg_Lo ($Temp_Index , $TargetP_Index) = $Current_Command
						Else
							Let $XferFunction_Matrix_CLC_05_Ofg_Hi ($Temp_Index , $TargetP_Index) = $Current_Command
						End
				End_Select
			Case = 7
				'Clutch F
				Let $XferFunction_Matrix_CLC_06_Ofg ($Temp_Index , $TargetP_Index) = $Current_Command
			Case = 8  
				'TCC
				Let $XferFunction_Matrix_TCC ($Temp_Index , $TargetP_Index) = $Current_Command
		End_Select
	End
End

End_Sub

'*******************************************************
Sub Xfer_KP
'*******************************************************
Log_Message (Running Xfer_KP Subroutine)

'Dimension transfer function gain matrix
Dim $XferFunctionGainMatrix (27 , 3)

'Initialize indices
Let $Xfer_KP_Index = 0
Let $XferFunctionGainMatrix_Index = 0

'Start KP PID tuning control loop
Do
	'Increment index
	Let $Xfer_KP_Index = $Xfer_KP_Index  + 1
	'Extract KP value from the gain setting matrix
	Let $Matrix_Xfer_KP = $XferKIKPKD ($Xfer_KP_Index , 2)
	Log_Message (Xfer_KP_Index is %%$Xfer_KP_Index%%. Matrix_Xfer_KP is %%$Matrix_Xfer_KP%%)
	'Navigate to KI PID tuning 
	Gosub Xfer_KI
	'Exit loop when all KP gain settings have been completed
	If $Xfer_KP_Index = 3 Then Goto Xfer_KP_Done:
Loop

Xfer_KP_Done:

End_Sub

'*******************************************************
Sub Xfer_KI
'*******************************************************
Log_Message (Running Xfer_KI Subroutine)

'Initialize index
Let $Xfer_KI_Index = 0

'Start KI PID tuning control loop
Do
	'Increment index
	Let $Xfer_KI_Index = $Xfer_KI_Index  + 1
	'Extract KI value from the gain setting matrix
	Let $Matrix_Xfer_KI = $XferKIKPKD ($Xfer_KI_Index , 1)
	Log_Message (Xfer_KI_Index is %%$Xfer_KI_Index%%. Matrix_Xfer_KI is %%$Matrix_Xfer_KI%%)
	'Create matrix of KP, KI, and KD combinations
	Gosub Xfer_KD
	'Exit loop when all KI indices have been completed
	If $Xfer_KI_Index = 3 Then Goto Xfer_KI_Done:
Loop

Xfer_KI_Done:

End_Sub

'*******************************************************
Sub Xfer_KD
'*******************************************************
Log_Message (Running Xfer_KD Subroutine)

'Initialize index
Let $Xfer_KD_Index = 0

'Start KD PID tuning control loop
Do
	'Increment index
	Let $Xfer_KD_Index = $Xfer_KD_Index  + 1
	'Extract KD value from gain setting matrix
	Let $Matrix_Xfer_KD = $XferKIKP ($Xfer_KD_Index , 3)
	Log_Message (Xfer_KD_Index is %%$Xfer_KD_Index%%. Matrix_Xfer_KD is %%$Matrix_Xfer_KI%%)
	'Create matrix of KP, KI, and KD combinations
	Gosub XferFunctionGainMatrix
	'Exit loop when all KD indices have been completed
	If $Xfer_KD_Index = 3 Then Goto Xfer_KD_Done:
Loop

Xfer_KD_Done:

End_Sub

'*******************************************************
Sub XferFunctionGainMatrix
'*******************************************************
Log_Message (Running XferFunctionGainMatrix Subroutine)

'Increment index
Let $XferFunctionGainMatrix_Index = $XferFunctionGainMatrix_Index + 1

'Populate transfer function gain matrix with KP, KI, and KD values
Let $XferFunctionGainMatrix ($XferFunctionGainMatrix_Index , 1) = $Matrix_Xfer_KP
Let $XferFunctionGainMatrix ($XferFunctionGainMatrix_Index , 2) = $Matrix_Xfer_KI
Let $XferFunctionGainMatrix ($XferFunctionGainMatrix_Index , 3) = $Matrix_Xfer_KD

End_Sub

'********************************************************************************************
Sub Run_Stiction
'********************************************************************************************
Log_Message (Running Run_Stiction Subroutine)

Screen_Message (Green,%%New_Line%%Running STICTION.	Test will begin momentarily...)

'Increase autotest loop speed to improve detection of slip
Let $PC_Realtime_Rate = 100
Realtime_Rate = $PC_Realtime_Rate

'Set Point_Running Flag if test shutdown occurs while testpoint is in progress
Let $Current_Point_Running = 1

'Start engine speed monitor
Monitor_On Engine_Running
Log_Message (Starting Engine_Running monitor. Run_Stiction.)

'Perform TFT check
Gosub Desired_TFT

'Check Engine speed. Start engine if not running
Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2
If $TCRPM_NE_BAR_AVE2 < 100
	If $Vehicle_Flag = 1
		'Prompt driver to start engine
		Screen_Message (Yellow,Please start engine and press 'Resume Test' when ready)
		Pause
	Else
		'Automatically start engine
		Gosub Start_Engine
	End	
End 

'Check PRNDL position
Let $THMI_ST_PRND_DES = THMI_ST_PRND_DES

'Apply PRNDL selection from test setup
If $PRNDL_Selection = 0
	'Neutral selection
	If $THMI_ST_PRND_DES ~= 3
		Let $Desired_PRNDL_Position = 2
		Gosub Set_PRNDL_Position
	End
Else
	'Overdrive selection
	If $PRNDL_Selection = 1
		If $THMI_ST_PRND_DES ~= 4
			Let $Desired_PRNDL_Position = 4
			Gosub Set_PRNDL_Position
			Wait (5)
		End
	End
End

'Establish slip soft limit, hard limit, and slip rate threshold
Let $Trans_Slip_Limit = 20
Let $Trans_Hard_Limit = 100
Let $Trans_Rate_Threshold = 10

'Initialize flags
Let $Ramp_Started = 0
Let $Clutch_Slipping_Flag = 0
Let $Slip_Detected_While_Ramping_Pressure = 0
Let $Min_Hold_PSI_Found = 0
Let $Low_Slip_Flag = 0

'Set TRAM_Set flag to reset PCM parameters if test shuts down
Let $TRAM_Set = 1
Log_Message (TRAM_Set set to 1)

'Disable OBDII
Set OBDII_TST_SW (0,0)

'Enable test mode
Set TVPSC_B_TST_ENBL_S (1,0)

'Set Line Pressure
Set TVPSC_P_CMD_TST_LNP_S ($CurrentRunLine,0)
Set TVPSC_D_OVRD_LNP_S (11,0)

'Select gear to apply clutch for stiction test
'Highest Available gear containing clutch element
Select_Case $Trans_Select 
	Case = 2
		'8F24
		Select_Case $CurrentRunElement
			Case = 2
				'Clutch A
				Let $CurrentRunGear = 5
			Case = 3
				'Clutch B
				Let $CurrentRunGear = 6
			Case = 4
				'Clutch C
				Let $CurrentRunGear = 7
			Case = 5
				'Clutch D
				Let $CurrentRunGear = 1
			Case = 6
				'Clutch E
				Let $CurrentRunGear = 8
			Case = 7
				'Clutch F
				Let $CurrentRunGear = 8	
		End_Select
	Case = 3
		'10R140
		Select_Case $CurrentRunElement
			Case = 2
				'Clutch A
				Let $CurrentRunGear = 6
			Case = 3
				'Clutch B
				Let $CurrentRunGear = 10
			Case = 4
				'Clutch C
				Let $CurrentRunGear = 10
			Case = 5
				'Clutch D
				Let $CurrentRunGear = 10
			Case = 6
				'Clutch E
				Let $CurrentRunGear = 9
			Case = 7
				'Clutch F
				Let $CurrentRunGear = 10
		End_Select
	Case = 4
		'8F57
		Select_Case $CurrentRunElement
			Case = 2
				'Clutch A
				Let $CurrentRunGear = 5
			Case = 3
				'Clutch B
				Let $CurrentRunGear = 6
			Case = 4
				'Clutch C
				Let $CurrentRunGear = 7
			Case = 5
				'Clutch D
				Let $CurrentRunGear = 1
			Case = 6
				'Clutch E
				Let $CurrentRunGear = 8
			Case = 7
				'Clutch F
				Let $CurrentRunGear = 8	
		End_Select
	Case = 6
		'10R80E
		Select_Case $CurrentRunElement
			Case = 2
				'Clutch A
				Let $CurrentRunGear = 6
			Case = 3
				'Clutch B
				Let $CurrentRunGear = 10
			Case = 4
				'Clutch C
				Let $CurrentRunGear = 10
			Case = 5
				'Clutch D
				Let $CurrentRunGear = 10
			Case = 6
				'Clutch E
				Let $CurrentRunGear = 9
			Case = 7
				'Clutch F
				Let $CurrentRunGear = 10
		End_Select
	Case = 7
		'8F35
		Select_Case $CurrentRunElement
			Case = 2
				'Clutch A
				Let $CurrentRunGear = 5
			Case = 3
				'Clutch B
				Let $CurrentRunGear = 6
			Case = 4
				'Clutch C
				Let $CurrentRunGear = 7
			Case = 5
				'Clutch D
				Let $CurrentRunGear = 1
			Case = 6
				'Clutch E
				Let $CurrentRunGear = 8
			Case = 7
				'Clutch F
				Let $CurrentRunGear = 8	
		End_Select
	Case = 8
		'6R80
		'Verify proper run gear
		Select_Case $CurrentRunElement
			Case = 2
				'Clutch A
				Let $CurrentRunGear = 4
			Case = 3
				'Clutch B
				Let $CurrentRunGear = 5
			Case = 4
				'Clutch C
				Let $CurrentRunGear = 6
			Case = 5
				'Clutch D
				Let $CurrentRunGear = 1
			Case = 6
				'Clutch E
				Let $CurrentRunGear = 6
		End_Select
End_Select

Log_Message (CurrentRunGear is %%$CurrentRunGear%%)

'Set gear and output speed
Gosub Set_Speed_Load

'Set File Name
' If $DitherType = 2
	' Let !File_Name = Stiction_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTorque,0D%%Nm_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec	
	' File_Name (Stiction_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTorque,0D%%Nm_%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)
' Else
	' Let !File_Name = Stiction_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTorque,0D%%Nm_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	' File_Name (Stiction_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTorque,0D%%Nm_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)
' End	

'Set File Name
If $DitherType = 2
	Let !File_Name = Hold_Near_Capactity_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTorque,0D%%Nm_Dither-%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec	
	File_Name (Hold_Near_Capactity_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTorque,0D%%Nm_Dither-%%$Dither_mA,0D%%mA_%%$CurrentRunDitF%%Hz_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)
Else
	Let !File_Name = Hold_Near_Capactity_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTorque,0D%%Nm_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec
	File_Name (Hold_Near_Capactity_%%!PT_Name%%_%%!Clutch_Name%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunLine,0D%%LINE_%%$CurrentRunTorque,0D%%Nm_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%)
End	

'Start Vision Recorder
Gosub Record_Start

Wait (2)

'*** Ramp pressure down to find incipient pressure...
Log_Message (Turning on Monitor for Detect_Slippage.)

'Measure Base Clutch slip
Select_Case $CurrentRunElement
	Case = 2
		'Clutch A
		Let $ClutchSlip_Base = SAUTL_N_CLC_SLP[1]_2AVE
	Case = 3
		'Clutch B
		Let $ClutchSlip_Base = SAUTL_N_CLC_SLP[2]_2AVE
	Case = 4
		'Clutch C
		Let $ClutchSlip_Base = SAUTL_N_CLC_SLP[3]_2AVE
	Case = 5
		'Clutch D
		Let $ClutchSlip_Base = SAUTL_N_CLC_SLP[6]_2AVE
	Case = 6
		'Clutch E
		Let $ClutchSlip_Base = SAUTL_N_CLC_SLP[5]_2AVE
	Case = 7
		'Clutch F
		Let $ClutchSlip_Base = SAUTL_N_CLC_SLP[6]_2AVE
End_Select

'Turn on trans slip monitor
Monitor_On Detect_Slippage	
Log_Message (Starting Detect_Slippage monitor. Run_Stiction.)

'Turn on Clutch Slip Monitor
Monitor_On Clutch_Slip
Log_Message (Starting Clutch_Slip monitor. Run_Stiction.)

'Start sustained slip monitor
'Monitor_On Detect_Sustained_Slip

'Hardcoded selection to step down clutch pressure to find incipient capacity or ramp down clutch pressure
Let $Pressure_Step = 1

'Begin ramping clutch pressure down while monitoring slip
Gosub Start_Pressure_Ramp_Down

If $Pressure_Step = 0
	'Ramp down clutch pressure control loop
	Do
		'Update timer
		Let $Ramp_Elapsed_Time = Timer - $Ramp_Start_Time
		'Exit loop if maximum ramp time has been exceeded
		If $Ramp_Elapsed_Time >= $Total_Ramp_Time
			Goto Done_Stiction_ramp:
		Else
			'If slip has been detected, exit control loop
			If $Clutch_Slipping_Flag = 1 Then Goto Done_Stiction_ramp:
			'Determine percentage of ramp time elapsed
			Let $Percent_Ramp_Done = $Ramp_Elapsed_Time / $Total_Ramp_Time
			'Calculate pressure reduction from starting pressure
			Let $Pressure_Reduced = $Pressure_Delta * $Percent_Ramp_Done
			'Determine Starting Pressure
			Select_Case $CurrentRunElement
				Case = 2
					'Clutch A
					Let $Starting_Pressure = $Starting_Pressure_Clutch_A
				Case = 3
					'Clutch B
					Let $Starting_Pressure = $Starting_Pressure_Clutch_B
				Case = 4
					'Clutch C
					Let $Starting_Pressure = $Starting_Pressure_Clutch_C
				Case = 5
					'Clutch D
					Let $Starting_Pressure = $Starting_Pressure_Clutch_D
				Case = 6
					'Clutch E
					Let $Starting_Pressure = $Starting_Pressure_Clutch_E		
				Case = 7
					'Clutch F
					Let $Starting_Pressure = $Starting_Pressure_Clutch_F
			End_Select
			Log_Message (Starting_Pressure for %%!Clutch_Name%% is %%$Starting_Pressure,0D%% kpa.)
			'Calculate pressure setpoint
			Let $Clutch_Pressure_Setpoint = $Starting_Pressure - $Pressure_Reduced
			'Exit loop if slip rate threshold has been exceeded
			If $Low_Slip_Flag = 1
				Goto Done_Stiction_ramp:
			End
			If $ClutchSlip_high_flag = 1
				Goto Done_Stiction_ramp:
			End
			'Apply calculated ramp pressure command
			Select_Case $CurrentRunElement
				Case = 2
					'Clutch A
					Set TVPSC_P_CMD_TST_CLC_01_S ($Clutch_Pressure_Setpoint,0)
				Case = 3
					'Clutch B
					Set TVPSC_P_CMD_TST_CLC_02_S ($Clutch_Pressure_Setpoint,0)
				Case = 4
					'Clutch C
					Set TVPSC_P_CMD_TST_CLC_03_S  ($Clutch_Pressure_Setpoint,0)
				Case = 5
					'Clutch D
					Set TVPSC_P_CMD_TST_CLC_04_S  ($Clutch_Pressure_Setpoint,0)
				Case = 6
					'Clutch E
					Set TVPSC_P_CMD_TST_CLC_05_S  ($Clutch_Pressure_Setpoint,0)	
				Case = 7
					'Clutch F
					Set TVPSC_P_CMD_TST_CLC_06_S  ($Clutch_Pressure_Setpoint,0)			
			End_Select
		End
	Loop
Else
	'Step down clutch pressure control loop
	Do
		'Update timer
		Let $Step_Elapsed_Time = Timer - $Step_Start_Time
		'Exit loop iClutch F slip threshold has been exceeded
		If $Clutch_Slipping_Flag = 1 Then Goto Done_Stiction_ramp:
		'Exit loop if calculated pressure command is negative
		If $Clutch_Pressure_Setpoint <= 0
			Goto Done_Stiction_ramp:
		Else
			'Reduce step-down pressure command by step size
			If $Step_Elapsed_Time >= $Step_Time
				Let $Clutch_Pressure_Setpoint = $Clutch_Pressure_Setpoint - $Step_Size
				
				'Apply step-down pressure command
				Select_Case $CurrentRunElement
					Case = 2
						'Clutch A
						Set TVPSC_P_CMD_TST_CLC_01_S ($Clutch_Pressure_Setpoint,0)
					Case = 3
						'Clutch B
						Set TVPSC_P_CMD_TST_CLC_02_S ($Clutch_Pressure_Setpoint,0)
					Case = 4
						'Clutch C
						Set TVPSC_P_CMD_TST_CLC_03_S  ($Clutch_Pressure_Setpoint,0)
					Case = 5
						'Clutch D
						Set TVPSC_P_CMD_TST_CLC_04_S  ($Clutch_Pressure_Setpoint,0)
					Case = 6
						'Clutch E
						Set TVPSC_P_CMD_TST_CLC_05_S  ($Clutch_Pressure_Setpoint,0)	
					Case = 7
						'Clutch F
						Set TVPSC_P_CMD_TST_CLC_06_S  ($Clutch_Pressure_Setpoint,0)					
				End_Select
				Log_Message (Stepping clutch pressure to %%$Clutch_Pressure_Setpoint,1D%%kpa.)
				Screen_Message (Green, Stepping clutch pressure to %%$Clutch_Pressure_Setpoint,1D%%kpa.)
				'Start step timer
				Let $Step_Start_Time = Timer
			End
		End
	Loop
End
Done_Stiction_ramp:

'Set step size and step time for step-up
Let $Up_Step_Size = $Step_Size / 2
Let $Up_Step_Time = $Step_Time / 2

'Turn off Clutch slip monitor
Monitor_Off Detect_Slippage
Log_Message (Stopping Detect_Slippage monitor. Run_Stiction.)

'Turn off Clutch slip monitor
Monitor_Off Clutch_Slip
Log_Message (Stopping Clutch_Slip monitor. Run_Stiction.)

'Start slip detection and remediation monitor
'Monitor_On Detect_Hold

''''''''''''''''''''''''''''''''''''''''''''''''''''
'For Special Test, hold pressure command for 5 seconds and skip up-step

'Hold Current Accelerator Pedal
' Let $Stiction_Pedal = Pedal_fbk
' Set DynSpd (Off) Using Pedal_Position_Cmd
' Set Pedal_Position_Cmd ($Stiction_Pedal,0)

'Initialize timer
Let $Pressure_Hold_Index = 0
Let $Pressure_Hold_Limit = 3
Hold_New_Pressure:

Let $Pressure_Hold_Index = $Pressure_Hold_Index + 1

If $Pressure_Hold_Index > 1
	Let $Clutch_Pressure_Setpoint = $Clutch_Pressure_Setpoint + 2
	Log_Message (Clutch_Pressure_Setpoint raised to %%$Clutch_Pressure_Setpoint,0D%% kpa.)
	'Apply step-down pressure command
	Select_Case $CurrentRunElement
		Case = 2
			'Clutch A
			Set TVPSC_P_CMD_TST_CLC_01_S ($Clutch_Pressure_Setpoint,0)
		Case = 3
			'Clutch B
			Set TVPSC_P_CMD_TST_CLC_02_S ($Clutch_Pressure_Setpoint,0)
		Case = 4
			'Clutch C
			Set TVPSC_P_CMD_TST_CLC_03_S  ($Clutch_Pressure_Setpoint,0)
		Case = 5
			'Clutch D
			Set TVPSC_P_CMD_TST_CLC_04_S  ($Clutch_Pressure_Setpoint,0)
		Case = 6
			'Clutch E
			Set TVPSC_P_CMD_TST_CLC_05_S  ($Clutch_Pressure_Setpoint,0)	
		Case = 7
			'Clutch F
			Set TVPSC_P_CMD_TST_CLC_06_S  ($Clutch_Pressure_Setpoint,0)					
	End_Select
End

Let $Elapsed_Pressure_Hold_Time = 0
Let $Pressure_Hold_Start_Time = Timer
Let $Pressure_Hold_Time_Limit = 5

'Start Pressure Hold control loop
Do
	'Update timer	
	Let $Elapsed_Pressure_Hold_Time = Timer - $Pressure_Hold_Start_Time
	'Exit loop when time limit is exceeded
	If $Elapsed_Pressure_Hold_Time > $Pressure_Hold_Time_Limit Then Goto Done_Pressure_Hold:
	'Calculate remaining time
	Let $Pressure_Hold_Time_Remaining = $Pressure_Hold_Time_Limit - $Elapsed_Pressure_Hold_Time
	Screen_Message (Green,%%New_Line%%%%New_Line%%Holding %%!Clutch_Name%% at %%$Clutch_Pressure_Setpoint,0D%% kpa for %%$Pressure_Hold_Time_Remaining,0D%% seconds.)
Loop

Done_Pressure_Hold:
If $Pressure_Hold_Index = $Pressure_Hold_Limit
	Goto Done_Stiction_up_ramp:
Else
	Goto Hold_New_Pressure:
End	

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Initialize timer
Let $Up_Step_Elapsed_Time = 0
Let $Up_Step_Start_Time = Timer

'Start step-up control loop
Do
	'Update timer
	Let $Up_Step_Elapsed_Time = Timer - $Up_Step_Start_Time
	'IClutch Fes are holding, exit control loop
	If $Clutch_Slipping_Flag = 0 Then Goto Done_Stiction_up_ramp:
	'Apply pressure command when step time has elapsed
	If $Up_Step_Elapsed_Time >= $Up_Step_Time
		'Calculate step-up pressure command
		Let $Clutch_Pressure_Setpoint = $Clutch_Pressure_Setpoint + $Up_Step_Size
		'Apply pressure command
		Select_Case $CurrentRunElement
			Case = 2
				'Clutch A 
				Set TVPSC_P_CMD_TST_CLC_01_S ($Clutch_Pressure_Setpoint,0)
			Case = 3
				'Clutch B
				Set TVPSC_P_CMD_TST_CLC_02_S ($Clutch_Pressure_Setpoint,0)
			Case = 4
				'Clutch C
				Set TVPSC_P_CMD_TST_CLC_03_S  ($Clutch_Pressure_Setpoint,0)
			Case = 5
				'Clutch D
				Set TVPSC_P_CMD_TST_CLC_04_S  ($Clutch_Pressure_Setpoint,0)
			Case = 6
				'Clutch E
				Set TVPSC_P_CMD_TST_CLC_05_S  ($Clutch_Pressure_Setpoint,0)	
			Case = 7
				'Clutch F
				Set TVPSC_P_CMD_TST_CLC_06_S  ($Clutch_Pressure_Setpoint,0)					
		End_Select
		'Restart loop timer
		Let $Up_Step_Start_Time = Timer
		Log_Message (Ramping clutch pressure plus to %%$Clutch_Pressure_Setpoint,1D%%.)
		Screen_Message (Green, Stepping clutch pressure to %%$Clutch_Pressure_Setpoint,1D%%psi.)
	End
Loop

Done_Stiction_up_ramp:

'Turn off sustained slip monitor
Monitor_Off Detect_Sustained_Slip
Log_Message (Stopping Detect_Sustained_Slip monitor. Run_Stiction.)

Return_Point:
Select_Case $CurrentRunElement
	Case = 2
		'Clutch A
		Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)
	Case = 3
		'Clutch B
		Set TVPSC_P_CMD_TST_CLC_02_S ($CurrentRunLine,0)
	Case = 4
		'Clutch C
		Set TVPSC_P_CMD_TST_CLC_03_S  ($CurrentRunLine,0)
	Case = 5
		'Clutch D
		Set TVPSC_P_CMD_TST_CLC_04_S  ($CurrentRunLine,0)
	Case = 6
		'Clutch E
		Set TVPSC_P_CMD_TST_CLC_05_S  ($CurrentRunLine,0)	
	Case = 7
		'Clutch F
		Set TVPSC_P_CMD_TST_CLC_06_S  ($CurrentRunLine,0)					
End_Select
Wait (5)

'End Vision Recorder
Gosub Record_End

'Close accelerator pedal
Set Pedal_Position_Cmd (0 , 0)

'Turn off PID controller
PIDs_Off

'Set gear back to stored base value
Set RMSC_GR_TYP_CMD_S ($RMSC_GR_TYP_CMD_S_Base,0)
Set RMSC_D_GR_TYP_SW_S ($RMSC_D_GR_TYP_SW_S_Base,0)

'Shift PRNDL back to Neutral
If $THMI_ST_PRND_DES ~= 3
	Let $Desired_PRNDL_Position = 2
	Gosub Set_PRNDL_Position
End

'Disable test mode and reset start switch
Set TVPSC_B_TST_STRT_ALL_S (0,0)
Set TVPSC_B_TST_ENBL_S (0,0)

'Turn off engine speed monitor
Monitor_Off Engine_Running
Log_Message (Stopping Engine_Running monitor. Run_Stiction.)

'Return Autotest loop rate to baseline
Let $PC_Realtime_Rate = 10
Realtime_Rate = $PC_Realtime_Rate

End_Sub
'********************************************************************************************
Sub Run_Balance_Dam
'********************************************************************************************
Log_Message (Running Run_Balance_Dam Subroutine)

'Set Point_Running Flag if test shutdown occurs while testpoint is in progress
Let $Current_Point_Running = 1

'Extract test factors from testmatrix
Let $CurrentRunTemp = $TestMatrix ($Current_Testpoint , 1)
Let $CurrentRunTurbine = $TestMatrix ($Current_Testpoint , 2)
Let $CurrentRunElement = $TestMatrix ($Current_Testpoint , 3)
Let $Balance_Clutch = $TestMatrix ($Current_Testpoint , 4)
Let $CurrentRunBoost = $TestMatrix ($Current_Testpoint , 5)

'Check TFT
Gosub Desired_TFT

'Check engine speed. Start engine if not running
Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2
If $TCRPM_NE_BAR_AVE2 < 100
	If $Vehicle_Flag = 1
		'Prompt driver to start engine
		Screen_Message (Yellow,Please start engine and press 'Resume Test' when ready)
		Pause
	Else
		'Start engine automatically
		Gosub Start_Engine
	End	
End 

Screen_Message (Green,%%New_Line%%Checking for proper PRNDL location.  Test will start momentarily)

'Check PRNDL position
Let $THMI_ST_PRND_DES = THMI_ST_PRND_DES

'Apply PRNDL selection
If $PRNDL_Selection = 0
	'Neutral selection
	If $THMI_ST_PRND_DES ~= 3
		Let $Desired_PRNDL_Position = 2
		Gosub Set_PRNDL_Position
	End
Else
	'Overdrive selection
	If $PRNDL_Selection = 1
		If $THMI_ST_PRND_DES ~= 4
			Let $Desired_PRNDL_Position = 4
			Gosub Set_PRNDL_Position
			
		End
	End
End

Wait (5)

'Apply balancClutch Ees
Select_Case $CurrentRunElement
	Case = 1
		'Clutch A
	   Goto BalanceDam_Return_Point:
	Case = 2
		'Clutch B
	   Goto BalanceDam_Return_Point:
	Case = 3
		'Clutch C
		Select_Case $Balance_Clutch 
			Case = 4
				'CD
				Let $Hold_Gear = 5
				Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_03_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_05_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_06_S ($CurrentRunLine,0)		 
				Let $Clutch_Ratio = 0.562
			Case = 5
				'CE
				Let $Hold_Gear = 4
				Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_03_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_04_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_06_S ($CurrentRunLine,0)	
				Let $Clutch_Ratio = 0.562
			Case = 6
				'CF
				Let $Hold_Gear = 3
				Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_03_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_04_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_05_S ($CurrentRunLine,0)		 
				Let $Clutch_Ratio = 0.723
		End_Select
	Case = 4
		'Clutch D
		Select_Case $Balance_Clutch 
			Case = 3
				'CD
				Let $Hold_Gear = 6
				Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_04_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_05_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_06_S ($CurrentRunLine,0)
				Let $Clutch_Ratio = 1.000
			Case = 5
				'DE
				Let $Hold_Gear = 4
				Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_03_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_04_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_06_S ($CurrentRunLine,0)		 
				Let $Clutch_Ratio = 0.562
			Case = 6
				'DF
				Let $Hold_Gear = 3
				Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_03_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_04_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_05_S ($CurrentRunLine,0)		 
				Let $Clutch_Ratio = 0.562
		End_Select	
	Case = 5
		'Clutch E
		Select_Case $Balance_Clutch 
			Case = 3
				'CE
				Let $Hold_Gear = 6
				Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_04_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_05_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_06_S ($CurrentRunLine,0)
				Let $Clutch_Ratio = 1.000
			Case = 4
				'DE
				Let $Hold_Gear = 5
				Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_03_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_05_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_06_S ($CurrentRunLine,0)	
				Let $Clutch_Ratio = 1.000
			Case = 6
				'EF
				Let $Hold_Gear = 3
				Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_03_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_04_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_05_S ($CurrentRunLine,0)
				Let $Clutch_Ratio = 1.000
		End_Select
	Case = 6
		'Clutch F
		Select_Case $Balance_Clutch 
			Case = 3
				'CF
				Let $Hold_Gear = 6
				Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_04_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_05_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_06_S ($CurrentRunLine,0)
				Let $Clutch_Ratio = 0.562
			Case = 4
				'DF
				Let $Hold_Gear = 5
				Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_03_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_05_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_06_S ($CurrentRunLine,0)		
				Let $Clutch_Ratio = 0.562
			Case = 5
				'EF
				Let $Hold_Gear = 4
				Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_03_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_04_S ($CurrentRunLine,0)
				Set TVPSC_P_CMD_TST_CLC_06_S ($CurrentRunLine,0)
				Let $Clutch_Ratio = 0.562
		End_Select
End_Select

'**************************
'Unused code to run balance dam test at turbine speed instead of engine speed
If $RunAtTurbine = 1
   Let $Clutch_Ratio = 1
End
'**************************

'Establish gear ratio for balance dam holding gear
Let $Gr_Ratio = $Gear_Ratios ($Hold_Gear,1)

'Calculate output speed command
Let $Input_Speed = $CurrentRunTurbine / $Clutch_Ratio
Let $Output_Speed_Setpoint = $Input_Speed / $Gr_Ratio

'Establish slip and flare limits
Let $Trans_Slip_Limit = 50
Let $Trans_Flare_Limit = 150

'Initialize flags
Let $Ramp_Started = 0
Let $Clutch_Slipping_Flag = 0
Let $Slip_Detected_While_Ramping_Pressure = 0
Let $Min_Hold_PSI_Found = 0

'Set File Name
Let !File_Name = BalanceDam_%%!PT_Name%%_%%!Element%%_%%$CurrentRunTurbine,0D%%NT_%%$CurrentRunTemp,0D%%TFT_%%Date%%_%%Time%%.rec

'Start Vision Recorder
Gosub Record_Start

'Set gear and output speed
Gosub Set_Speed_Load

'*** Ramp pressure down to find incipient pressure...
Log_Message (Turning on Monitor for Detect_Slippage.)

'Turn on slip monitor
Monitor_On Detect_Slippage
Log_Message (Starting Detect_Slippage monitor. Run_Balance_Dam.)

'Hardcoded selection to step down clutch pressure to find incipient capacity or ramp down clutch pressure
Let $Pressure_Step = 1

'Begin ramping clutch pressure down while monitoring slip
Gosub Start_Pressure_Ramp_Down

If $Pressure_Step = 0
	'Ramp down clutch pressure control loop
	Do
		'Update timer
		Let $Ramp_Elapsed_Time = Timer - $Ramp_Start_Time
		'Exit loop if total ramp time exceeded
		If $Ramp_Elapsed_Time >= $Total_Ramp_Time
			Goto Done_BalanceDam_ramp:
		Else
			'IClutch F is slipping, exit loop and proceed to step-up
			If $Clutch_Slipping_Flag = 1 Then Goto Done_BalanceDam_ramp:
			'Calculate percentage of ramp performed
			Let $Percent_Ramp_Done = $Ramp_Elapsed_Time / $Total_Ramp_Time
			'Calculate pressure reduction from starting pressure 
			Let $Pressure_Reduced = $Pressure_Delta * $Percent_Ramp_Done
			'Calculate ramp-down pressure command
			Let $Clutch_Pressure_Setpoint = $Starting_Pressure - $Pressure_Reduced
			'Apply ramp-down pressure command
			Select_Case $CurrentRunElement
				Case = 3
					'Clutch B
					Set TVPSC_P_CMD_TST_CLC_02_S ($Clutch_Pressure_Setpoint,0)
				Case = 4
					'Clutch C
					Set TVPSC_P_CMD_TST_CLC_03_S  ($Clutch_Pressure_Setpoint,0)
				Case = 5
					'Clutch D
					Set TVPSC_P_CMD_TST_CLC_04_S  ($Clutch_Pressure_Setpoint,0)
				Case = 6
					'Clutch E
					Set TVPSC_P_CMD_TST_CLC_05_S  ($Clutch_Pressure_Setpoint,0)				
			End_Select
		End
	Loop
Else
	'Step-Down clutch pressure control loop
	Do
		'Update timer
		Let $Step_Elapsed_Time = Timer - $Step_Start_Time
		'IClutch F is slipping, exit loop and proceed to step-up
		If $Clutch_Slipping_Flag = 1 Then Goto Done_BalanceDam_ramp:
		'If pressure command is negative, exit step-down
		If $Clutch_Pressure_Setpoint <= 0
			Goto Done_BalanceDam_ramp:
		Else
			'Apply pressure command when step has completed
			If $Step_Elapsed_Time >= $Step_Time
				'Calculate pressure command using step size
				Let $Clutch_Pressure_Setpoint = $Clutch_Pressure_Setpoint - $Step_Size
				'Apply pressure command via test function
				Select_Case $CurrentRunElement
					Case = 3
						'Clutch B
						Set TVPSC_P_CMD_TST_CLC_02_S ($Clutch_Pressure_Setpoint,0)
					Case = 4
						'Clutch C
						Set TVPSC_P_CMD_TST_CLC_03_S  ($Clutch_Pressure_Setpoint,0)
					Case = 5
						'Clutch D
						Set TVPSC_P_CMD_TST_CLC_04_S  ($Clutch_Pressure_Setpoint,0)
					Case = 6
						'Clutch E
						Set TVPSC_P_CMD_TST_CLC_05_S  ($Clutch_Pressure_Setpoint,0)				
				End_Select
				Screen_Message (Green, Stepping clutch pressure to %%$Clutch_Pressure_Setpoint%%psi.)
				'Restart loop timer
				Let $Step_Start_Time = Timer
			End
		End
	Loop
End
Done_BalanceDam_ramp:

'Return clutch pressure to Line Pressure
Select_Case $CurrentRunElement
	Case = 3
		'Clutch B
		Set TVPSC_P_CMD_TST_CLC_02_S ($CurrentRunLine,0)
	Case = 4
		'Clutch C
		Set TVPSC_P_CMD_TST_CLC_03_S  ($CurrentRunLine,0)
	Case = 5
		'Clutch D
		Set TVPSC_P_CMD_TST_CLC_04_S  ($CurrentRunLine,0)
	Case = 6
		'Clutch E
		Set TVPSC_P_CMD_TST_CLC_05_S  ($CurrentRunLine,0)				
End_Select

'Reset Clutch Slipping flag
Let $Clutch_Slipping_Flag = 0

'Turn ofClutch F slip monitor
Monitor_Off Detect_Slippage
Log_Message (Stopping Detect_Slippage monitor. Run_Balance_Dam.)

BalanceDam_Return_Point:

'Boost balance clutch
Gosub Balance_Clutch

'Turn off flare monitor
Monitor_Off Detect_Flare
Log_Message (Stopping Detect_Flare monitor. Run_Balance_Dam.)

Wait (3)

Gosub Record_End

End_Sub
'*******************************************************
Sub Balance_Clutch
'*******************************************************
Log_Message (Running Balance_Clutch Subroutine)

'Establish clutch holding pressure from incipient pressure determined from ramp/step down
Let $Clutch_Holding_Pressure = $Incipient_Pressure + 21

'Establish 90% of boost time for balancClutch E
Select_Case $Balance_Clutch
	Case = 3
		'Clutch C
		Let $Base_Boost_Time = $SACOR_TM_BST_BASE_HI_ELEC_M_Base (1,1)
		Let $Ninety_pct_bst_time = 0.9 * $Base_Boost_Time
	Case = 4
		'Clutch D
		Let $Base_Boost_Time = $SACOR_TM_BST_BASE_HI_ELED_M_Base (1,1)
		Let $Ninety_pct_bst_time = 0.9 * $Base_Boost_Time
	Case = 5
		'Clutch E
		Let $Base_Boost_Time = $SACOR_TM_BST_BASE_HI_ELEE_M_Base (1,1)
		Let $Ninety_pct_bst_time = 0.9 * $Base_Boost_Time
	Case = 6
		'Clutch F
		Let $Base_Boost_Time = $SACOR_TM_BST_BASE_HI_ELEF_M_Base (1,1)
		Let $Ninety_pct_bst_time = 0.9 * $Base_Boost_Time
End_Select

'Lower holding clutch pressure by 1kpa
Do
	'Calculate Clutch holding pressure
	Let $Clutch_Holding_Pressure = $Clutch_Holding_Pressure - 1
	'Apply holding pressure via test function
	Select_Case $CurrentRunElement
		Case = 3
			'Clutch B
			Set TVPSC_P_CMD_TST_CLC_02_S ($Clutch_Holding_Pressure,0)
		Case = 4
			'Clutch C
			Set TVPSC_P_CMD_TST_CLC_03_S ($Clutch_Holding_Pressure,0)
		Case = 5
			'Clutch D
			Set TVPSC_P_CMD_TST_CLC_04_S ($Clutch_Holding_Pressure,0)
		Case = 6
			'Clutch E
			Set TVPSC_P_CMD_TST_CLC_05_S ($Clutch_Holding_Pressure,0)				
	End_Select
	Screen_Message (Lowering clutch pressure to %%$Clutch_Holding_Pressure%%psi.)
	Wait (2)
	'Boost Extra Clutch
	Gosub Boost_Extra_Clutch
	'If Flare detected, exit control loop
	If $Min_Hold_PSI_Found = 1 Then Goto Balance_Clutch_Done:
	'In the event that holding pressure is less than incipient pressure, exit loop
	If $Clutch_Holding_Pressure <= $Incipient_Pressure Then Goto Balance_Clutch_Done:
Loop

Balance_Clutch_Done:
'Return clutch pressure to Line Pressure
Select_Case $CurrentRunElement
	Case = 3
		'Clutch B
		Set TVPSC_P_CMD_TST_CLC_02_S ($CurrentRunLine,0)
	Case = 4
		'Clutch C
		Set TVPSC_P_CMD_TST_CLC_03_S ($CurrentRunLine,0)
	Case = 5
		'Clutch D
		Set TVPSC_P_CMD_TST_CLC_04_S ($CurrentRunLine,0)
	Case = 6
		'Clutch E
		Set TVPSC_P_CMD_TST_CLC_05_S ($CurrentRunLine,0)				
End_Select

End_Sub

'*******************************************************
Sub Boost_Extra_Clutch
'*******************************************************
Log_Message (Starting Boost_Extra_Clutch subroutine)

'Start flare monitor
Monitor_On Detect_Flare
Log_Message (Stopping Detect_Flare monitor. Boost_Extra_Clutch.)

'Apply test pressure to extrClutch A
Select_Case $Balance_Clutch
	Case = 2
		'Clutch A
		Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunBoost,0)
	Case = 3
		'Clutch B
		Set TVPSC_P_CMD_TST_CLC_02_S ($CurrentRunBoost,0)
	Case = 4
		'Clutch C
		Set TVPSC_P_CMD_TST_CLC_03_S ($CurrentRunBoost,0)
	Case = 5
		'Clutch D
		Set TVPSC_P_CMD_TST_CLC_04_S ($CurrentRunBoost,0)
	Case = 6
		'Clutch E
		Set TVPSC_P_CMD_TST_CLC_05_S ($CurrentRunBoost,0)	
	Case = 7
		'Clutch F
		Set TVPSC_P_CMD_TST_CLC_06_S ($CurrentRunBoost,0)	
End_Select

'Initialize ExtrClutch A boost timer
Let $Elapsed_Balance_Dam_Time = 0
Let $Balance_Dam_Start_Time = Timer

Wait (0.25)

'Set balancClutch E to almost zero
Select_Case $Balance_Clutch
	Case = 2
		'Clutch A
		Set TVPSC_P_CMD_TST_CLC_01_S (0.02,0)
	Case = 3
		'Clutch B
		Set TVPSC_P_CMD_TST_CLC_02_S (0.02,0)
	Case = 4
		'Clutch C
		Set TVPSC_P_CMD_TST_CLC_03_S (0.02,0)
	Case = 5
		'Clutch D
		Set TVPSC_P_CMD_TST_CLC_04_S (0.02,0)
	Case = 6
		'Clutch E
		Set TVPSC_P_CMD_TST_CLC_05_S (0.02,0)	
	Case = 7
		'Clutch F
		Set TVPSC_P_CMD_TST_CLC_06_S (0.02,0)		
End_Select

Wait (1)

End_Sub

'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Monitor Detect_Slippage
'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

'Measure Transmission slip
Let $Stored_Trans_Slip = Trans_Slip

'If slip exceeds hard limit:
If $Stored_Trans_Slip > $Trans_Hard_Limit
	'Retard spark by 30deg
	'Set SPK_ADD (-30,0)
	'Log_Message (Spark set to -30)
	'Close accelerator pedal
	'Set Pedal_Position_Cmd (0,0)
	'Log_Message (Pedal_Position_Cmd set to 0)
	'Set clutch to Line Pressure
	Select_Case $CurrentRunElement
		Case = 2
			'Clutch A
			Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)
		Case = 3
			'Clutch B
			Set TVPSC_P_CMD_TST_CLC_02_S ($CurrentRunLine,0)
		Case = 4
			'Clutch C
			Set TVPSC_P_CMD_TST_CLC_03_S ($CurrentRunLine,0)
		Case = 5
			'Clutch D
			Set TVPSC_P_CMD_TST_CLC_04_S ($CurrentRunLine,0)
		Case = 6
			'Clutch E
			Set TVPSC_P_CMD_TST_CLC_05_S ($CurrentRunLine,0)
		Case = 7
			'Clutch F
			Set TVPSC_P_CMD_TST_CLC_06_S ($CurrentRunLine,0)			
	End_Select
	'Set clutch slipping flag
	Let $Clutch_Slipping_Flag = 1
	'Capture pressure command at start of slip as the incipient capacity
	Let $Incipient_Pressure = $Clutch_Pressure_Setpoint
	Screen_Message (Maximum slip detected.  Setting clutch pressure to maximum)
	Log_Message (Trans Slip Detected = %%$Stored_Trans_Slip,2D%%) RPM.)
	Log_Message (Incipient Pressure is %%$Incipient_Pressure%%.)
End

'If slip exceeds trans rate threshold, maintain pressure command, and set low slip flag
If $Stored_Trans_Slip > $Trans_Rate_Threshold
	'Maintain commanded pressure
	Select_Case $CurrentRunElement
		Case = 2
			'Clutch A
			Set TVPSC_P_CMD_TST_CLC_01_S ($Clutch_Pressure_Setpoint,0)
		Case = 3
			'Clutch B
			Set TVPSC_P_CMD_TST_CLC_02_S ($Clutch_Pressure_Setpoint,0)
		Case = 4
			'Clutch C
			Set TVPSC_P_CMD_TST_CLC_03_S ($Clutch_Pressure_Setpoint,0)
		Case = 5
			'Clutch D
			Set TVPSC_P_CMD_TST_CLC_04_S ($Clutch_Pressure_Setpoint,0)
		Case = 6
			'Clutch E
			Set TVPSC_P_CMD_TST_CLC_05_S ($Clutch_Pressure_Setpoint,0)	
		Case = 7
			'Clutch E
			Set TVPSC_P_CMD_TST_CLC_06_S ($Clutch_Pressure_Setpoint,0)			
	End_Select
	'Set low slip flag
    Let $Low_Slip_Flag = 1
    Log_Message (Transmission slip ratio of %%$Trans_Rate_Threshold%% crossed. Hold pressure of %%$Clutch_Pressure_Setpoint,1D%%.)
End

'Establish Pressure Buffer
Let $Pressure_Buffer_Command = 1

'If slip exceeds limit:
If $Stored_Trans_Slip > $Trans_Slip_Limit
	'Retard spark by 30 degrees
	'Set SPK_ADD (-30,0)
	'Log_Message (Spark set to -30)
	'Close accelerator pedal
	Set Pedal_Position_Cmd (0,0)
	Log_Message (Pedal_Position_Cmd set to 0)
	'Increase commanded clutch pressure to reduce slip
    Let $Clutch_Pressure_Setpoint = $Clutch_Pressure_Setpoint + $Pressure_Buffer_Command
	'Apply pressure command via test function
	Select_Case $CurrentRunElement
		Case = 2
			'Clutch A
			Set TVPSC_P_CMD_TST_CLC_01_S ($Clutch_Pressure_Setpoint,0)	
		Case = 3
			'Clutch B
			Set TVPSC_P_CMD_TST_CLC_02_S ($Clutch_Pressure_Setpoint,0)
		Case = 4
			'Clutch C
			Set TVPSC_P_CMD_TST_CLC_03_S ($Clutch_Pressure_Setpoint,0)
		Case = 5
			'Clutch D
			Set TVPSC_P_CMD_TST_CLC_04_S ($Clutch_Pressure_Setpoint,0)
		Case = 6
			'Clutch E
			Set TVPSC_P_CMD_TST_CLC_05_S ($Clutch_Pressure_Setpoint,0)
		Case = 7
			'Clutch F
			Set TVPSC_P_CMD_TST_CLC_06_S ($Clutch_Pressure_Setpoint,0)			
	End_Select
	'Set clutch slipping flag
    Let $Clutch_Slipping_Flag = 1
	'Capture pressure command at start of slip as the incipient capacity
    Let $Incipient_Pressure = $Clutch_Pressure_Setpoint
	Log_Message (Trans Slip Detected = %%$Stored_Trans_Slip,2D%%) rpm. Slip limit is %%$Trans_Slip_Limit,0D%% rpm.)
    Log_Message (Incipient Pressure is %%$Incipient_Pressure%%.)
End
 
'If slip limit is exceeded: 
If $Clutch_Slipping_Flag = 1
	'Reset ramp_started flag
	Let $Ramp_Started = 0
	'Turn off slip monitor
	Monitor_Off Detect_Slippage
	Log_Message (Stopping Detect_Slippage monitor. Detect_Slippage.)
	'Advance spark back to base
	'Set SPK_ADD (0,0)
	'Log_Message (Spark set to 0)
End

End_Monitor

'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Monitor Detect_Flare
'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

'Capture slip
Let $Stored_Trans_Slip = Trans_Slip

'Initialize slip timer
Let $Flare_Elapsed_Time = 0

'If torque converter slips for more than 1.5seconds, shut off injectors, close the pedal, retard spark
If $Stored_Trans_Slip > $Trans_Flare_Limit
	'Start Flare timer
	Let $Flare_Start_Time = Timer
	
	'Start flare monitor control loop
	Do
		'Update timer
		Let $Flare_Elapsed_Time = Timer - $Flare_Start_Time
		If $Flare_Elapsed_Time > 1.5
			'Set flare flag
			Let $Turbine_Flare = 1
			'Set clutch pressure to near-zero
			Select_Case $CurrentRunElement
				Case = 2
					'Clutch A
					Set TVPSC_P_CMD_TST_CLC_01_S (0.02,0)
				Case = 3
					'Clutch B
					Set TVPSC_P_CMD_TST_CLC_02_S (0.02,0)
				Case = 4
					'Clutch C
					Set TVPSC_P_CMD_TST_CLC_03_S (0.02,0)
				Case = 5
					'Clutch D
					Set TVPSC_P_CMD_TST_CLC_04_S (0.02,0)
				Case = 6
					'Clutch E
					Set TVPSC_P_CMD_TST_CLC_05_S (0.02,0)	
				Case = 7
					'Clutch F
					Set TVPSC_P_CMD_TST_CLC_06_S (0.02,0)					
			End_Select
			Log_Message (Trans Flare Detected = %%$Stored_Trans_Slip,2D%%) RPM.)
			'Exit loop
			Goto Exit_flare_loop:
		End
		'Capture trans slip
		Let $Stored_Trans_Slip = Trans_Slip
		'If slip drops below threshold, exit flare monitor control loop
		If $Stored_Trans_Slip < $Trans_Flare_Limit Then Goto Exit_flare_loop:
	Loop
End

Exit_flare_loop:

'If flare exceeds threshold:
If $Turbine_Flare = 1
	'Increase holding pressure by 1kpa
   Let $Min_Holding_Pressure = $Clutch_Holding_Pressure + 1
   'Set min pressure found flag
   Let $Min_Hold_PSI_Found = 1
   Log_Message (Minimum hold pressure is %%$Min_Holding_Pressure%%)
   'Reset flare flag
   Let $Turbine_Flare = 0
   'Turn off flare monitor if flare already detected
   Monitor_Off Detect_Flare
   Log_Message (Stopping Detect_Flare monitor. Detect_Flare.)
End

End_Monitor

'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Monitor Detect_Hold
'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
'Monitor clutch slip while stepping up clutch pressure after incipient pressure has been determined

'Capture slip
Let $Stored_Trans_Slip = Trans_Slip

'If slip exceeds hard slip limit:
If $Stored_Trans_Slip > $Trans_Hard_Limit
	'Retard spark by 30 degrees
	'Set SPK_ADD (-30,0)
	'Log_Message (Spark set to -30)
	'Close accelerator pedal
	Set Pedal_Position_Cmd (0,0)
	Log_Message (Pedal_Position_Cmd set to 0)
	'Set clutch to Line Pressure
	Select_Case $CurrentRunElement
		Case = 1
			'Line Pressure
			Set TVPSC_P_CMD_TST_LNP_S ($CurrentRunLine,0)
		Case = 2
			'Clutch A
			Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)
		Case = 3
			'Clutch B
			Set TVPSC_P_CMD_TST_CLC_02_S ($CurrentRunLine,0)
		Case = 4
			'Clutch C
			Set TVPSC_P_CMD_TST_CLC_03_S ($CurrentRunLine,0)
		Case = 5
			'Clutch D
			Set TVPSC_P_CMD_TST_CLC_04_S ($CurrentRunLine,0)
		Case = 6
			'Clutch E
			Set TVPSC_P_CMD_TST_CLC_05_S ($CurrentRunLine,0)
		Case = 7
			'Clutch F
			Set TVPSC_P_CMD_TST_CLC_06_S ($CurrentRunLine,0)
		Case = 8
			'TCC
			Set TVPSC_P_CMD_TST_TCC_S ($CurrentRunLine,0)
	End_Select
	'Reset clutch slipping flag
	Let $Clutch_Slipping_Flag = 0
  	Screen_Message (Maximum slip detected.  Setting clutch pressure to maximum)
End

'If slip falls below threshold, zero clutch slipping flag, and capture commanded pressure as incipient capacity                      
If $Stored_Trans_Slip < $Trans_Slip_Limit
	'Reset clutch slipping flag
	Let $Clutch_Slipping_Flag = 0
	'Capture pressure command as incipient capacity
	Let $Incipient_Pressure = $Clutch_Pressure_Setpoint
	Log_Message (Trans Hold Detected = %%$Stored_Trans_Slip,2D%%) RPM.)
	Log_Message (Incipient Pressure is %%$Incipient_Pressure%%.)
End

'If slip falls below threshold, reset ramp_started flag    
If $Clutch_Slipping_Flag = 0
   Let $Ramp_Started = 0
   'Turn off hold detection monitor
   Monitor_Off Detect_Hold
   Log_Message (Stopping Detect_Hold monitor. Detect_Hold.)
   'Set SPK_ADD (0,0)
End

End_Monitor

'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Monitor Detect_Sustained_Slip
'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
'Monitor slip above sustained slip threshold but below hard threshold

'Capture slip
Let $Stored_Trans_Slip = Trans_Slip
'Start sustained slip timer
Let $Trans_Slip_Start_Time = Timer

'If transmission slips
If $Stored_Trans_Slip > 0
	'Update slip timer
	Let $Elapsed_Trans_Slip_Time = Timer - $Trans_Slip_Start_Time
	'Capture slip
	Let $Stored_Trans_Slip = Trans_Slip
	'If slip is below 5rpm, reset slip timer
	If $Stored_Trans_Slip < 5
		Let $Elapsed_Trans_Slip_Time = 0
		Let $Trans_Slip_Start_Time = Timer
	End
	'If timer reaches 10seconds of slip without resetting, retard spark, close accelerator pedal, and set clutch to Line Pressure
	If $Elapsed_Trans_Slip_Time > 10
		'Retard spark by 30 degrees
		'Set SPK_ADD (-30,0)
		'Log_Message (Spark set to -30)
		'Close accelerator pedal
		Set Pedal_Position_Cmd (0,0)
		Log_Message (Pedal_Position_Cmd set to 0)
		'Set clutch to Line Pressure
		Select_Case $CurrentRunElement
			Case = 1
				'Line Pressure
				Set TVPSC_P_CMD_TST_LNP_S ($CurrentRunLine,0)
			Case = 2
				'Clutch A
				Set TVPSC_P_CMD_TST_CLC_01_S ($CurrentRunLine,0)
			Case = 3
				'Clutch B
				Set TVPSC_P_CMD_TST_CLC_02_S ($CurrentRunLine,0)
			Case = 4
				'Clutch C
				Set TVPSC_P_CMD_TST_CLC_03_S ($CurrentRunLine,0)
			Case = 5
				'Clutch D
				Set TVPSC_P_CMD_TST_CLC_04_S ($CurrentRunLine,0)
			Case = 6
				'Clutch E
				Set TVPSC_P_CMD_TST_CLC_05_S ($CurrentRunLine,0)
			Case = 7
				'Clutch F
				Set TVPSC_P_CMD_TST_CLC_06_S ($CurrentRunLine,0)
			Case = 8
				'TCC
				Set TVPSC_P_CMD_TST_TCC_S ($CurrentRunLine,0)
		End_Select
		'Turn off sustained slip monitor if 
		Monitor_Off Detect_Sustained_Slip
		Log_Message (Stopping Detect_Sustained_Slip monitor. Detect_Sustained_Slip.)
		Goto Sustained_Slip_Off:
	End
End

Sustained_Slip_Off:
Wait (1)

'Advance spark back to base
'Set SPK_ADD (0,0)
'Log_Message (Spark set to 0)

End_Monitor

'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Monitor Clutch_Slip
'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
'Monitors SAUTL_N_CLC_SLP during Pressure Step and Bar Graph tests

'Establish Clutch Slip Threshold
Let $ClutchSlip_Threshold_High = 50

'Measure Slip
Select_Case $CurrentRunElement
	Case = 2
		'Clutch A
		Let $ClutchSlip = SAUTL_N_CLC_SLP[1]
	Case = 3
		'Clutch B
		Let $ClutchSlip = SAUTL_N_CLC_SLP[2]
	Case = 4
		'Clutch C
		Let $ClutchSlip = SAUTL_N_CLC_SLP[3]
	Case = 5
		'Clutch D
		Let $ClutchSlip = SAUTL_N_CLC_SLP[6]
	Case = 6
		'Clutch E
		Let $ClutchSlip = SAUTL_N_CLC_SLP[5]
	Case = 7
		'Clutch F
		Let $ClutchSlip = SAUTL_N_CLC_SLP[6]
End_Select

'Monitor for slip exceeding low threshold below base slip		
If $ClutchSlip < $ClutchSlip_Threshold_Low
	'Retard spark by 30 degrees
	'Set SPK_ADD (-30,0)
	'Log_Message (Spark set to -30)
	'Close accelerator pedal
	'Set Pedal_Position_Cmd (0,0)
	'Log_Message (Pedal_Position_Cmd set to 0)
	'Zero clutch pressure
	' Select_Case $CurrentRunElement
		' Case = 2
			' 'Clutch A
			' Set TVPSC_P_CMD_TST_CLC_01_S (0,0)
		' Case = 3
			' 'Clutch B
			' Set TVPSC_P_CMD_TST_CLC_02_S (0,0)
		' Case = 4
			' 'Clutch C
			' Set TVPSC_P_CMD_TST_CLC_03_S (0,0)
		' Case = 5
			' 'Clutch D
			' Set TVPSC_P_CMD_TST_CLC_04_S (0,0)
		' Case = 6
			' 'Clutch E
			' Set TVPSC_P_CMD_TST_CLC_05_S (0,0)
		' Case = 7
			' 'Clutch F
			' Set TVPSC_P_CMD_TST_CLC_06_S (0,0)
	' End_Select
	Log_Message (ClutchSlip is %%$ClutchSlip,0D%%. ClutchSlip_Threshold_Low is %%$ClutchSlip_Threshold_Low,0D%% rpm.)
	'Set clutch slip flag
	Let $ClutchSlip_high_flag = 1
	Let $Incipient_Pressure = $Clutch_Pressure_Setpoint
	Log_Message (Trans Slip Detected = %%$Stored_Trans_Slip,2D%%) RPM.)
	Log_Message (Incipient Pressure is %%$Incipient_Pressure%%.)	
End

'If clutch slip exceeds high threshold, retard spark, close pedal, and zero clutch pressure
If $ClutchSlip > $ClutchSlip_Threshold_High
	'Retard spark by 30deg
	'Set SPK_ADD (-30,0)
	'Log_Message (Spark set to -30)
	'Close accelerator pedal
	'Set Pedal_Position_Cmd (0,0)
	'Log_Message (Pedal_Position_Cmd set to 0)
	'Zero clutch pressure
	' Select_Case $CurrentRunElement
		' Case = 2
			' 'Clutch A
			' Set TVPSC_P_CMD_TST_CLC_01_S (0,0)
		' Case = 3
			' 'Clutch B
			' Set TVPSC_P_CMD_TST_CLC_02_S (0,0)
		' Case = 4
			' 'Clutch C
			' Set TVPSC_P_CMD_TST_CLC_03_S (0,0)
		' Case = 5
			' 'Clutch D
			' Set TVPSC_P_CMD_TST_CLC_04_S (0,0)
		' Case = 6
			' 'Clutch E
			' Set TVPSC_P_CMD_TST_CLC_05_S (0,0)
		' Case = 7
			' 'Clutch F
			' Set TVPSC_P_CMD_TST_CLC_06_S (0,0)
	' End_Select
	Log_Message (ClutchSlip is %%$ClutchSlip,0D%%. ClutchSlip_Threshold_Low is %%$ClutchSlip_Threshold_Low,0D%% rpm.)
	'Set clutch slipping flag
	Let $ClutchSlip_high_flag = 1
	Let $Incipient_Pressure = $Clutch_Pressure_Setpoint
	Log_Message (Trans Slip Detected = %%$Stored_Trans_Slip,2D%%) RPM.)
	Log_Message (Incipient Pressure is %%$Incipient_Pressure%%.)
End

End_Monitor
'*******************************************************
Sub Start_Pressure_Ramp_Down
'*******************************************************
Log_Message (Start_Pressure_Ramp_Down subroutine started)
Let $Slip_Detected_While_Ramping_Pressure = 0
Let $Ramp_Terminated = 0

'Capture clutch pressures
Select_Case $Trans_Select
	Case = 2
		'8F24
		'Clutch A
		Let $Starting_Pressure_Clutch_A = tvpsc_p_trgt_cmd_fin_clca
		'Clutch B
		Let $Starting_Pressure_Clutch_B = tvpsc_p_trgt_cmd_fin_clcb
		'Clutch C
		Let $Starting_Pressure_Clutch_C = tvpsc_p_trgt_cmd_fin_clcc
		'Clutch D
		Let $Starting_Pressure_Clutch_D = tvpsc_p_trgt_cmd_fin_clcd
		'Clutch E
		Let $Starting_Pressure_Clutch_E = tvpsc_p_trgt_cmd_fin_clce
		'Clutch F
		Let $Starting_Pressure_Clutch_F = tvpsc_p_trgt_cmd_fin_clcf	  	
	Case = 3
		'10R140
		'Clutch A
		Let $Starting_Pressure_Clutch_A = tvpsc_p_trgt_cmd_fin_clca
		'Clutch B
		Let $Starting_Pressure_Clutch_B = tvpsc_p_trgt_cmd_fin_clcb
		'Clutch C
		Let $Starting_Pressure_Clutch_C = tvpsc_p_trgt_cmd_fin_clcc
		'Clutch D
		Let $Starting_Pressure_Clutch_D = tvpsc_p_trgt_cmd_fin_clcd
		'Clutch E
		Let $Starting_Pressure_Clutch_E = tvpsc_p_trgt_cmd_fin_clce
		'Clutch F
		Let $Starting_Pressure_Clutch_F = tvpsc_p_trgt_cmd_fin_clcf	  		
	Case = 4
		'8F24
		'Clutch A
		Let $Starting_Pressure_Clutch_A = tvpsc_p_trgt_cmd_fin_clca
		'Clutch B
		Let $Starting_Pressure_Clutch_B = tvpsc_p_trgt_cmd_fin_clcb
		'Clutch C
		Let $Starting_Pressure_Clutch_C = tvpsc_p_trgt_cmd_fin_clcc
		'Clutch D
		Let $Starting_Pressure_Clutch_D = tvpsc_p_trgt_cmd_fin_clcd
		'Clutch E
		Let $Starting_Pressure_Clutch_E = tvpsc_p_trgt_cmd_fin_clce
		'Clutch F
		Let $Starting_Pressure_Clutch_F = tvpsc_p_trgt_cmd_fin_clcf	  		
	Case = 6
		'10R60/80
		'Clutch A
		Let $Starting_Pressure_Clutch_A = tvpsc_p_trgt_cmd_fin_clca
		'Clutch B
		Let $Starting_Pressure_Clutch_B = tvpsc_p_trgt_cmd_fin_clcb
		'Clutch C
		Let $Starting_Pressure_Clutch_C = tvpsc_p_trgt_cmd_fin_clcc
		'Clutch D
		Let $Starting_Pressure_Clutch_D = tvpsc_p_trgt_cmd_fin_clcd
		'Clutch E
		Let $Starting_Pressure_Clutch_E = tvpsc_p_trgt_cmd_fin_clce
		'Clutch F
		Let $Starting_Pressure_Clutch_F = tvpsc_p_trgt_cmd_fin_clcf	  		
	Case = 7
		'8F35
		'Clutch A
		Let $Starting_Pressure_Clutch_A = tvpsc_p_trgt_cmd_fin_clca
		'Clutch B
		Let $Starting_Pressure_Clutch_B = tvpsc_p_trgt_cmd_fin_clcb
		'Clutch C
		Let $Starting_Pressure_Clutch_C = tvpsc_p_trgt_cmd_fin_clcc
		'Clutch D
		Let $Starting_Pressure_Clutch_D = tvpsc_p_trgt_cmd_fin_clcd
		'Clutch E
		Let $Starting_Pressure_Clutch_E = tvpsc_p_trgt_cmd_fin_clce
		'Clutch F
		Let $Starting_Pressure_Clutch_F = tvpsc_p_trgt_cmd_fin_clcf	  	
	Case = 8
		'6R80
		'Clutch A
		Let $Starting_Pressure_Clutch_A = tvpsc_p_trgt_cmd_fin_clca
		'Clutch B
		Let $Starting_Pressure_Clutch_B = tvpsc_p_trgt_cmd_fin_clcb
		'Clutch C
		Let $Starting_Pressure_Clutch_C = tvpsc_p_trgt_cmd_fin_clcc
		'Clutch D
		Let $Starting_Pressure_Clutch_D = tvpsc_p_trgt_cmd_fin_clcd
		'Clutch E
		Let $Starting_Pressure_Clutch_E = tvpsc_p_trgt_cmd_fin_clce
		'Clutch F
		Let $Starting_Pressure_Clutch_F = tvpsc_p_trgt_cmd_fin_clcf	  	
End_Select	
	
'Disable OBDII
Set OBDII_TST_SW (0,0)	
	
'Enable test mode
Set TVPSC_B_TST_ENBL_S (1,0)

'Set test override code to low gain oncoming scalar pressure
Select_Case $Trans_Select
	Case = 2
		'8F24
	Case = 3
		'10R140	
	Case = 4
		'8F24
	Case = 6
		'10R60/80
		'Clutch A
		Set TVPSC_D_OVRD_CLC_01_S (11,0)
		Set TVPSC_P_CMD_TST_CLC_01_S ($Starting_Pressure_Clutch_A,0)
		'Clutch B
		Set TVPSC_D_OVRD_CLC_02_S (11,0)
		Set TVPSC_P_CMD_TST_CLC_02_S ($Starting_Pressure_Clutch_B,0)
		'Clutch C
		Set TVPSC_D_OVRD_CLC_03_S (11,0)
		Set TVPSC_P_CMD_TST_CLC_03_S ($Starting_Pressure_Clutch_C,0)
		'Clutch D
		Set TVPSC_D_OVRD_CLC_04_S (11,0)
		Set TVPSC_P_CMD_TST_CLC_04_S ($Starting_Pressure_Clutch_D,0)
		'Clutch E
		Set TVPSC_D_OVRD_CLC_05_S (11,0)
		Set TVPSC_P_CMD_TST_CLC_05_S ($Starting_Pressure_Clutch_E,0)			
		'Clutch F
		Set TVPSC_D_OVRD_CLC_06_S (11,0)
		Set TVPSC_P_CMD_TST_CLC_06_S ($Starting_Pressure_Clutch_F,0)
	Case = 7
		'8F35
		
	Case = 8
		'6R80		
End_Select

'Determine Starting Pressure
' Select_Case $CurrentRunElement
	' Case = 2
		' 'Clutch A
		' Let $Starting_Pressure = $Starting_Pressure_Clutch_A
	' Case = 3
		' 'Clutch B
		' Let $Starting_Pressure = $Starting_Pressure_Clutch_B
	' Case = 4
		' 'Clutch C
		' Let $Starting_Pressure = $Starting_Pressure_Clutch_C
	' Case = 5
		' 'Clutch D
		' Let $Starting_Pressure = $Starting_Pressure_Clutch_D
	' Case = 6
		' 'Clutch E
		' Let $Starting_Pressure = $Starting_Pressure_Clutch_E		
	' Case = 7
		' 'Clutch F
		' Let $Starting_Pressure = $Starting_Pressure_Clutch_F
' End_Select
'Determine Starting Pressure
Select_Case $CurrentRunElement
	Case = 2
		'Clutch A
		Let $Starting_Pressure = 200
	Case = 3
		'Clutch B
		Let $Starting_Pressure = 200
	Case = 4
		'Clutch C
		Let $Starting_Pressure = 200
	Case = 5
		'Clutch D
		Let $Starting_Pressure = 200
	Case = 6
		'Clutch E
		Let $Starting_Pressure = 200		
	Case = 7
		'Clutch F
		Let $Starting_Pressure = 200
End_Select
'Calculate pressure range to be ramped/stepped down
Let $Pressure_Delta = $Starting_Pressure - 0

'Set ramp rates and step size/step time
Let $Ramp_Rate = 2
Let $Step_Size = 1
Let $Step_Time = 0.5

'Calculate ramp time
Let $Total_Ramp_Time = $Pressure_Delta / $Ramp_Rate

'Set pressure command to starting pressure
Let $Clutch_Pressure_Setpoint = $Starting_Pressure

'Set ramp started flag
Let $Ramp_Started = 1
Wait (4)

'Initialize ramp/step timers
Let $Step_Elapsed_Time = 0
Let $Ramp_Elapsed_Time = 0

'Start ramp/step timers
Let $Ramp_Start_Time = Timer
Let $Step_Start_Time = Timer
End_Sub

' '*******************************************************
' Sub Start_Pressure_Ramp_Down
' '*******************************************************
' Log_Message (Start_Pressure_Ramp_Down subroutine started)
' Let $Slip_Detected_While_Ramping_Pressure = 0
' Let $Ramp_Terminated = 0

' 'Measure actual clutch pressure at start of ramp
' Select_Case $CurrentRunElement
	' Case = 2
		' 'Clutch A
		' Let $Starting_Pressure = tvpsc_p_trgt_cmd_fin_clca
	' Case = 3
		' 'Clutch B
		' Let $Starting_Pressure = tvpsc_p_trgt_cmd_fin_clcb
	' Case = 4
		' 'Clutch C
		' Let $Starting_Pressure = tvpsc_p_trgt_cmd_fin_clcc
	' Case = 5
		' 'Clutch D
		' Let $Starting_Pressure = tvpsc_p_trgt_cmd_fin_clcd
	' Case = 6
		' 'Clutch E
		' Let $Starting_Pressure = tvpsc_p_trgt_cmd_fin_clce
	' Case = 7
		' 'Clutch F
		' Let $Starting_Pressure = tvpsc_p_trgt_cmd_fin_clcf	  
' End_Select

' 'Enable test mode
' Set TVPSC_B_TST_ENBL_S (1,0)

' 'Set test override code to low gain oncoming scalar pressure
' Select_Case $CurrentRunElement
	' Case = 2
		' 'Clutch A
		' Set TVPSC_D_OVRD_CLC_01_S (11,0)
		' Set TVPSC_P_CMD_TST_CLC_01_S ($Starting_Pressure,0)
	' Case = 3
		' 'Clutch B
		' Set TVPSC_D_OVRD_CLC_02_S (11,0)
		' Set TVPSC_P_CMD_TST_CLC_02_S ($Starting_Pressure,0)
	' Case = 4
		' 'Clutch C
		' Set TVPSC_D_OVRD_CLC_03_S (11,0)
		' Set TVPSC_P_CMD_TST_CLC_03_S ($Starting_Pressure,0)
	' Case = 5
		' 'Clutch D
		' Set TVPSC_D_OVRD_CLC_04_S (11,0)
		' Set TVPSC_P_CMD_TST_CLC_04_S ($Starting_Pressure,0)
	' Case = 6
		' 'Clutch E
		' Set TVPSC_D_OVRD_CLC_05_S (11,0)
		' Set TVPSC_P_CMD_TST_CLC_05_S ($Starting_Pressure,0)			
	' Case = 7
		' 'Clutch F
		' Set TVPSC_D_OVRD_CLC_06_S (11,0)
		' Set TVPSC_P_CMD_TST_CLC_06_S ($Starting_Pressure,0)
' End_Select

' 'Calculate pressure range to be ramped/stepped down
' Let $Pressure_Delta = $Starting_Pressure - 0

' 'Set ramp rates and step size/step time
' Let $Ramp_Rate = 2
' Let $Step_Size = 1
' Let $Step_Time = 0.5

' 'Calculate ramp time
' Let $Total_Ramp_Time = $Pressure_Delta / $Ramp_Rate

' 'Set pressure command to starting pressure
' Let $Clutch_Pressure_Setpoint = $Starting_Pressure

' 'Set ramp started flag
' Let $Ramp_Started = 1
' Wait (3)

' 'Initialize ramp/step timers
' Let $Step_Elapsed_Time = 0
' Let $Ramp_Elapsed_Time = 0

' 'Start ramp/step timers
' Let $Ramp_Start_Time = Timer
' Let $Step_Start_Time = Timer
' End_Sub
'*******************************************************
Sub Matrix_Setup
'*******************************************************
Log_Message (Starting Matrix_Setup subroutine)

'Set number of testpoints, import test matrix, label setpoint table column headers, set column widths, and label setpoint table settings
Log_Message (Total_Testpoints is %%$Total_Testpoints%%)

'Count number of testpoints in testmatrix
Let $Total_Testpoints = Variable_Rows $TestMatrix

'Capture number of columns for multi-select test
Let $Column_Count = Variable_Columns $TestMatrix

'Set autotest testpoints variable
Testpoints = $Total_Testpoints

'Reset setpoint table dimensions
Dim $Setpoint_Table (1,1)

'Populate Setpoint Table with values from the testmatrix 
Let $Setpoint_Table = $TestMatrix

'Determine number of clutches in Element matrix
Let $VFS_Length = Variable_Rows $Elements

'Count boost times and boost pressure combinations for Boost DOE test
If $RunType = 11
'Boost DOE
	Gosub BoostPress_Count
	Gosub BoostTime_Count
End

'''''''''''''''''''''''''''''''''''''''
'Temporary code

Save_Variables
Screen_Message (Yellow,Check Var file.)
Pause



'''''''''''''''''''''''''''''''''''''''

'Label column headers and set column widths
Select_Case $RunType
	Case = 1
		'Current Steps
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)		
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
		End
		'Set Justification And Column Width Of Testpoint Array On Screen
		Testpoint_Setting (Column_Width(2)=1300)
		Testpoint_Setting (Column_Width(3)=1000)
		Testpoint_Setting (Column_Width(4)=1500)
		Testpoint_Setting (Column_Width(5)=900)
		Testpoint_Setting (Column_Width(6)=1500)
		Testpoint_Setting (Column_Width(7)=900)
		Testpoint_Setting (Column_Width(8)=900)
		Testpoint_Setting (Column_Width(9)=1200)
	Case = 2
		'Current Sweeps	
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)		
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
		End	
		'Set Justification And Column Width Of Testpoint Array On Screen
		Testpoint_Setting (Column_Width(2)=1200)
		Testpoint_Setting (Column_Width(3)=900)
		Testpoint_Setting (Column_Width(4)=1300)
		Testpoint_Setting (Column_Width(5)=900)
		Testpoint_Setting (Column_Width(6)=1500)
		Testpoint_Setting (Column_Width(7)=900)
		Testpoint_Setting (Column_Width(8)=900)
		Testpoint_Setting (Column_Width(9)=1200)		
	Case = 3
		'Pressure Steps
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)		
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
		End
		'Set Justification And Column Width Of Testpoint Array On Screen
		Testpoint_Setting (Column_Width(2)=1200)
		Testpoint_Setting (Column_Width(3)=900)
		Testpoint_Setting (Column_Width(4)=1300)
		Testpoint_Setting (Column_Width(5)=900)
		Testpoint_Setting (Column_Width(6)=1500)
		Testpoint_Setting (Column_Width(7)=900)
		Testpoint_Setting (Column_Width(8)=900)
		Testpoint_Setting (Column_Width(9)=1200)		
	Case = 4
		'Pressure Sweeps
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)		
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
		End
		'Set Justification And Column Width Of Testpoint Array On Screen
		Testpoint_Setting (Column_Width(2)=1200)
		Testpoint_Setting (Column_Width(3)=900)
		Testpoint_Setting (Column_Width(4)=1300)
		Testpoint_Setting (Column_Width(5)=900)
		Testpoint_Setting (Column_Width(6)=1500)
		Testpoint_Setting (Column_Width(7)=900)
		Testpoint_Setting (Column_Width(8)=900)
		Testpoint_Setting (Column_Width(9)=1200)		
	Case = 5
		'Pressure Bar-Graph
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, Output Speed, DitA, DitF)		
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, Output Speed)				
		End
		'Set Justification And Column Width Of Testpoint Array On Screen
		Testpoint_Setting (Column_Width(2)=1200)
		Testpoint_Setting (Column_Width(3)=900)
		Testpoint_Setting (Column_Width(4)=1300)
		Testpoint_Setting (Column_Width(5)=900)
		Testpoint_Setting (Column_Width(6)=1500)
		Testpoint_Setting (Column_Width(7)=1300)
		Testpoint_Setting (Column_Width(8)=900)
		Testpoint_Setting (Column_Width(9)=1200)		
	Case = 6
		'Pressure Response Test
		If $TCC_VFS_PR_On = 1
			If $DitherType = 2
				Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, Engine Torque, DitA, DitF)		
			Else
				Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
			End		
		Else
			If $DitherType = 2
				Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)		
			Else
				Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
			End			
		End
		'Set Justification And Column Width Of Testpoint Array On Screen
		Testpoint_Setting (Column_Width(2)=1200)
		Testpoint_Setting (Column_Width(3)=900)
		Testpoint_Setting (Column_Width(4)=1300)
		Testpoint_Setting (Column_Width(5)=900)
		Testpoint_Setting (Column_Width(6)=1500)
		Testpoint_Setting (Column_Width(7)=900)
		Testpoint_Setting (Column_Width(8)=900)
		Testpoint_Setting (Column_Width(9)=1200)
	Case = 7
		'Line Pressure Gain Switching
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)		
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
		End		
	Case = 8
		'Preset Pressure Steps
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)		
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
		End
		'Set Justification And Column Width Of Testpoint Array On Screen
		Testpoint_Setting (Column_Width(2)=1200)
		Testpoint_Setting (Column_Width(3)=900)
		Testpoint_Setting (Column_Width(4)=1300)
		Testpoint_Setting (Column_Width(5)=900)
		Testpoint_Setting (Column_Width(6)=1500)
		Testpoint_Setting (Column_Width(7)=900)
		Testpoint_Setting (Column_Width(8)=900)
		Testpoint_Setting (Column_Width(9)=1200)			
	Case = 9
		'Multi-rate Triangle Wave
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)		
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
		End
		'Set Justification And Column Width Of Testpoint Array On Screen
		Testpoint_Setting (Column_Width(2)=1200)
		Testpoint_Setting (Column_Width(3)=900)
		Testpoint_Setting (Column_Width(4)=1300)
		Testpoint_Setting (Column_Width(5)=900)
		Testpoint_Setting (Column_Width(6)=1500)
		Testpoint_Setting (Column_Width(7)=900)
		Testpoint_Setting (Column_Width(8)=900)
		Testpoint_Setting (Column_Width(9)=1200)			
	Case = 10
		'Square Wave
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)		
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
		End
		'Set Justification And Column Width Of Testpoint Array On Screen
		Testpoint_Setting (Column_Width(2)=1200)
		Testpoint_Setting (Column_Width(3)=900)
		Testpoint_Setting (Column_Width(4)=1300)
		Testpoint_Setting (Column_Width(5)=900)
		Testpoint_Setting (Column_Width(6)=1500)
		Testpoint_Setting (Column_Width(7)=900)
		Testpoint_Setting (Column_Width(8)=900)
		Testpoint_Setting (Column_Width(9)=1200)			
	Case = 11
		'Boost DOE
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)		
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
		End
		'Set Justification And Column Width Of Testpoint Array On Screen
		Testpoint_Setting (Column_Width(2)=1200)
		Testpoint_Setting (Column_Width(3)=900)
		Testpoint_Setting (Column_Width(4)=1300)
		Testpoint_Setting (Column_Width(5)=900)
		Testpoint_Setting (Column_Width(6)=1500)
		Testpoint_Setting (Column_Width(7)=900)
		Testpoint_Setting (Column_Width(8)=900)
		Testpoint_Setting (Column_Width(9)=1200)			
	Case = 12
		'Dual Boost
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)		
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
		End
		'Set Justification And Column Width Of Testpoint Array On Screen
		Testpoint_Setting (Column_Width(2)=1200)
		Testpoint_Setting (Column_Width(3)=900)
		Testpoint_Setting (Column_Width(4)=1300)
		Testpoint_Setting (Column_Width(5)=900)
		Testpoint_Setting (Column_Width(6)=1500)
		Testpoint_Setting (Column_Width(7)=900)
		Testpoint_Setting (Column_Width(8)=900)
		Testpoint_Setting (Column_Width(9)=1200)			
	Case = 13
		'Custom Profile
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)		
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
		End
		'Set Justification And Column Width Of Testpoint Array On Screen
		Testpoint_Setting (Column_Width(2)=1200)
		Testpoint_Setting (Column_Width(3)=900)
		Testpoint_Setting (Column_Width(4)=1300)
		Testpoint_Setting (Column_Width(5)=900)
		Testpoint_Setting (Column_Width(6)=1500)
		Testpoint_Setting (Column_Width(7)=900)
		Testpoint_Setting (Column_Width(8)=900)
		Testpoint_Setting (Column_Width(9)=1200)		
	Case = 14
		'Transfer Function Development
		If $DitherType = 2
			If $XferFunction_Type = 0
				Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, KP, KI, KD, DitA, DitF)
			Else
				Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)
			End
		Else
			If $XferFunction_Type = 0
				Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, KP, KI, KD)				
			Else
				Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)
			End	
		End
		'Set Justification And Column Width Of Testpoint Array On Screen
		Testpoint_Setting (Column_Width(2)=1200)
		Testpoint_Setting (Column_Width(3)=900)
		Testpoint_Setting (Column_Width(4)=1300)
		Testpoint_Setting (Column_Width(5)=900)
		Testpoint_Setting (Column_Width(6)=1500)
		Testpoint_Setting (Column_Width(7)=900)
		Testpoint_Setting (Column_Width(8)=900)
		Testpoint_Setting (Column_Width(9)=1200)			
	Case = 15
		'Stiction
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, Torque, DitA, DitF)		
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, Torque)				
		End
		'Set Justification And Column Width Of Testpoint Array On Screen
		Testpoint_Setting (Column_Width(2)=1200)
		Testpoint_Setting (Column_Width(3)=900)
		Testpoint_Setting (Column_Width(4)=1300)
		Testpoint_Setting (Column_Width(5)=900)
		Testpoint_Setting (Column_Width(6)=1500)
		Testpoint_Setting (Column_Width(7)=900)
		Testpoint_Setting (Column_Width(8)=900)
		Testpoint_Setting (Column_Width(9)=1200)		
	Case = 16
		'Balance Dam
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, Torque, DitA, DitF)		
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, Torque)				
		End
		'Set Justification And Column Width Of Testpoint Array On Screen
		Testpoint_Setting (Column_Width(2)=1200)
		Testpoint_Setting (Column_Width(3)=900)
		Testpoint_Setting (Column_Width(4)=1300)
		Testpoint_Setting (Column_Width(5)=900)
		Testpoint_Setting (Column_Width(6)=1500)
		Testpoint_Setting (Column_Width(7)=900)
		Testpoint_Setting (Column_Width(8)=900)
		Testpoint_Setting (Column_Width(9)=1200)
	Case = 17
		'Preset Current Steps
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)		
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
		End
		'Set Justification And Column Width Of Testpoint Array On Screen
		Testpoint_Setting (Column_Width(2)=1200)
		Testpoint_Setting (Column_Width(3)=900)
		Testpoint_Setting (Column_Width(4)=1300)
		Testpoint_Setting (Column_Width(5)=900)
		Testpoint_Setting (Column_Width(6)=1500)
		Testpoint_Setting (Column_Width(7)=900)
		Testpoint_Setting (Column_Width(8)=900)
		Testpoint_Setting (Column_Width(9)=1200)
	Case = 18
		'Multi-Select
		Select_Case $Column_Count	
			Case = 5
				Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)
				Testpoint_Setting (Column_Width(2)=800)
				Testpoint_Setting (Column_Width(3)=700)
				Testpoint_Setting (Column_Width(4)=700)
				Testpoint_Setting (Column_Width(5)=500)	
				Testpoint_Setting (Column_Width(6)=1300)
			Case = 6
				Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)
				Testpoint_Setting (Column_Width(2)=800)
				Testpoint_Setting (Column_Width(3)=700)
				Testpoint_Setting (Column_Width(4)=700)
				Testpoint_Setting (Column_Width(5)=500)	
				Testpoint_Setting (Column_Width(6)=1300)
			Case = 7
				Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, Column7)
				Testpoint_Setting (Column_Width(2)=800)
				Testpoint_Setting (Column_Width(3)=700)
				Testpoint_Setting (Column_Width(4)=700)
				Testpoint_Setting (Column_Width(5)=500)	
				Testpoint_Setting (Column_Width(6)=1300)
				Testpoint_Setting (Column_Width(7)=600)				
			Case = 8
				Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, Column7, Column8)
				Testpoint_Setting (Column_Width(2)=800)
				Testpoint_Setting (Column_Width(3)=700)
				Testpoint_Setting (Column_Width(4)=700)
				Testpoint_Setting (Column_Width(5)=500)	
				Testpoint_Setting (Column_Width(6)=1300)
				Testpoint_Setting (Column_Width(7)=600)
				Testpoint_Setting (Column_Width(8)=600)			
			Case = 9
				Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, Column7, Column8, Column9)
				Testpoint_Setting (Column_Width(2)=800)
				Testpoint_Setting (Column_Width(3)=700)
				Testpoint_Setting (Column_Width(4)=700)
				Testpoint_Setting (Column_Width(5)=500)	
				Testpoint_Setting (Column_Width(6)=1300)
				Testpoint_Setting (Column_Width(7)=600)
				Testpoint_Setting (Column_Width(8)=600)	
				Testpoint_Setting (Column_Width(9)=600)					
		End_Select			
End_Select

'If running multi-select test, label tests in setpoint table
Let $Multi_Select_On = 0
Gosub RunType_Labels

'Label clutch name for all tests except Dual Boost test
If $RunType ~= 12
	Select_Case $Trans_Select
		Case = 2
			'8F24
			Gosub 8F_VFS_Labels
		Case = 3
			'10R140
			Gosub 10R_VFS_Labels			
		Case = 4
			'8F57
			Gosub 8F_VFS_Labels
		Case = 6
			'10R60/80
			Gosub 10R_VFS_Labels
		Case = 7
			'8F35
			Gosub 8F_VFS_Labels
		Case = 8
			'6R80
			Gosub 6R_VFS_Labels
	End_Select
End

'Set Justification And Column Width Of Testpoint Array On Screen
Testpoint_Setting (Justify (2) = Center)

'Save Variables to Var file
Save_Variables
' Screen_Message (Yellow,%%New_Line%%%%New_Line%%Check Var file)
' Pause

End_Sub  

'*******************************************************
Sub Multi_Select_Matrix_Setup
'*******************************************************
Log_Message (Starting Multi_Select_Matrix_Setup subroutine)

'Reset dimensions for setpoint table
Dim $Setpoint_Table (1,1)

'Set setpoint table to individual test matrix, set number of testpoints, label setpoint table column headers and set column widths.
Select_Case $Multi_Select_RunType
	Case = 1
		'Current_Steps
		'Set setpoint table to test-specific testmatrix
		'Let $Setpoint_Table = $Runtype_1_Matrix
		'Count number of testpoints
		'Let $Individual_Testpoints = Variable_Rows $Runtype_1_Matrix
		'Set autotest testpoint variable to number of testpoints
		'Testpoints = $Individual_Testpoints
		'Label column headers
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)	
			Testpoint_Setting (Column_Width(7)=600)	
			Testpoint_Setting (Column_Width(8)=600)
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
		End
		'Set column widths
		Testpoint_Setting (Column_Width(2)=1300)
		Testpoint_Setting (Column_Width(3)=1000)
		Testpoint_Setting (Column_Width(4)=1500)
		Testpoint_Setting (Column_Width(5)=900)
		Testpoint_Setting (Column_Width(6)=1500)
	Case = 2
		'Current_Sweep
		'Set setpoint table to test-specific testmatrix
		'Let $Setpoint_Table = $Runtype_2_Matrix
		'Count number of testpoints
		'Let $Individual_Testpoints = Variable_Rows $Runtype_2_Matrix
		'Set autotest testpoint variable to number of testpoints
		'Testpoints = $Individual_Testpoints
		'Label column headers
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)	
			Testpoint_Setting (Column_Width(7)=600)	
			Testpoint_Setting (Column_Width(8)=600)			
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
		End	
		'Set column widths		
		Testpoint_Setting (Column_Width(2)=800)
		Testpoint_Setting (Column_Width(3)=700)
		Testpoint_Setting (Column_Width(4)=700)
		Testpoint_Setting (Column_Width(5)=500)	
		Testpoint_Setting (Column_Width(6)=1300)		
	Case = 3
		'Pressure_Step
		'Set setpoint table to test-specific testmatrix
		'Let $Setpoint_Table = $Runtype_3_Matrix
		'Count number of testpoints
		'Let $Individual_Testpoints = Variable_Rows $Runtype_3_Matrix
		'Set autotest testpoint variable to number of testpoints
		'Testpoints = $Individual_Testpoints
		'Label column headers
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)
			Testpoint_Setting (Column_Width(7)=600)	
			Testpoint_Setting (Column_Width(8)=600)				
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
		End
		'Set column widths
		Testpoint_Setting (Column_Width(2)=800)
		Testpoint_Setting (Column_Width(3)=700)
		Testpoint_Setting (Column_Width(4)=700)
		Testpoint_Setting (Column_Width(5)=500)	
		Testpoint_Setting (Column_Width(6)=1300)			
	Case = 4
		'Pressure_Sweep
		'Set setpoint table to test-specific testmatrix
		'Let $Setpoint_Table = $Runtype_4_Matrix
		'Count number of testpoints
		'Let $Individual_Testpoints = Variable_Rows $Runtype_4_Matrix
		'Set autotest testpoint variable to number of testpoints
		'Testpoints = $Individual_Testpoints
		'Label column headers
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)
			'Set column widths
			Testpoint_Setting (Column_Width(7)=600)	
			Testpoint_Setting (Column_Width(8)=600)				
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
		End
		'Set column widths
		Testpoint_Setting (Column_Width(2)=800)
		Testpoint_Setting (Column_Width(3)=700)
		Testpoint_Setting (Column_Width(4)=700)
		Testpoint_Setting (Column_Width(5)=500)	
		Testpoint_Setting (Column_Width(6)=1300)			
	Case = 5
		'Bar_Graph
		'Set setpoint table to test-specific testmatrix
		'Let $Setpoint_Table = $Runtype_5_Matrix
		'Count number of testpoints
		'Let $Individual_Testpoints = Variable_Rows $Runtype_5_Matrix
		'Set autotest testpoint variable to number of testpoints
		'Testpoints = $Individual_Testpoints
		'Label column headers
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, Output Speed, DitA, DitF)
			'Set column widths
			Testpoint_Setting (Column_Width(8)=600)	
			Testpoint_Setting (Column_Width(9)=600)				
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, Output Speed)				
		End
		'Set column widths
		Testpoint_Setting (Column_Width(2)=800)
		Testpoint_Setting (Column_Width(3)=700)
		Testpoint_Setting (Column_Width(4)=700)
		Testpoint_Setting (Column_Width(5)=500)	
		Testpoint_Setting (Column_Width(6)=1300)
		Testpoint_Setting (Column_Width(7)=1300)			
	Case = 6
		'Pressure_Response
		'Set setpoint table to test-specific testmatrix
		'Let $Setpoint_Table = $Runtype_6_Matrix
		'Count number of testpoints
		'Let $Individual_Testpoints = Variable_Rows $Runtype_6_Matrix
		'Set autotest testpoint variable to number of testpoints
		'Testpoints = $Individual_Testpoints
		'Label column headers
		If $TCC_VFS_PR_On = 1
			'Include engine torque column header for Torque Converter Pressure Response test
			If $DitherType = 2
				Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, Engine Torque, DitA, DitF)
				'Set column widths
				Testpoint_Setting (Column_Width(7)=600)	
				Testpoint_Setting (Column_Width(8)=600)	
				Testpoint_Setting (Column_Width(9)=600)
			Else
				Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, Engine Torque)
				'Set column widths
				Testpoint_Setting (Column_Width(7)=600)
			End		
		Else
			If $DitherType = 2
				Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)
				'Set column widths
				Testpoint_Setting (Column_Width(7)=600)	
				Testpoint_Setting (Column_Width(8)=600)					
			Else
				Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
			End			
		End
		'Set column widths
		Testpoint_Setting (Column_Width(2)=800)
		Testpoint_Setting (Column_Width(3)=700)
		Testpoint_Setting (Column_Width(4)=700)
		Testpoint_Setting (Column_Width(5)=500)	
		Testpoint_Setting (Column_Width(6)=1300)			
	' Case = 7
		'Gain_Switch
		'Set setpoint table to test-specific testmatrix
		' Let $Setpoint_Table = $Runtype_7_Matrix
		'Count number of testpoints
		' Let $Individual_Testpoints = Variable_Rows $Runtype_7_Matrix
		'Set autotest testpoint variable to number of testpoints
		' Testpoints = $Individual_Testpoints
		'Label column headers
		' Setpoints ($Setpoint_Table, Temperature, RunType, Set_No., Pedal %)
		'Set column widths		
		' Testpoint_Setting (Column_Width(2)=800)
		' Testpoint_Setting (Column_Width(3)=900)
		' Testpoint_Setting (Column_Width(4)=500)	
		' Testpoint_Setting (Column_Width(5)=500)			
	Case = 8
		'Preset_Pressure_Step
		'Set setpoint table to test-specific testmatrix
		'Let $Setpoint_Table = $Runtype_8_Matrix
		'Count number of testpoints
		'Let $Individual_Testpoints = Variable_Rows $Runtype_8_Matrix
		'Set autotest testpoint variable to number of testpoints
		'Testpoints = $Individual_Testpoints
		'Label column headers
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)
			'Set column widths
			Testpoint_Setting (Column_Width(7)=600)	
			Testpoint_Setting (Column_Width(8)=600)				
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
		End
		'Set column widths
		Testpoint_Setting (Column_Width(2)=800)
		Testpoint_Setting (Column_Width(3)=700)
		Testpoint_Setting (Column_Width(4)=700)
		Testpoint_Setting (Column_Width(5)=500)	
		Testpoint_Setting (Column_Width(6)=1300)	
	Case = 9
		'Triangle_Wave
		'Set setpoint table to test-specific testmatrix
		'Let $Setpoint_Table = $Runtype_9_Matrix
		'Count number of testpoints
		'Let $Individual_Testpoints = Variable_Rows $Runtype_9_Matrix
		'Set autotest testpoint variable to number of testpoints
		'Testpoints = $Individual_Testpoints
		'Label column headers
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)
			'Set column widths
			Testpoint_Setting (Column_Width(7)=600)	
			Testpoint_Setting (Column_Width(8)=600)				
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
		End
		'Set column widths
		Testpoint_Setting (Column_Width(2)=800)
		Testpoint_Setting (Column_Width(3)=700)
		Testpoint_Setting (Column_Width(4)=700)
		Testpoint_Setting (Column_Width(5)=500)	
		Testpoint_Setting (Column_Width(6)=1300)		
	Case = 10
		'SquareWave
		'Set setpoint table to test-specific testmatrix
		'Let $Setpoint_Table = $Runtype_10_Matrix
		'Count number of testpoints
		'Let $Individual_Testpoints = Variable_Rows $Runtype_10_Matrix
		'Set autotest testpoint variable to number of testpoints
		'Testpoints = $Individual_Testpoints
		'Label column headers
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)
			'Set column widths
			Testpoint_Setting (Column_Width(7)=600)	
			Testpoint_Setting (Column_Width(8)=600)				
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
		End	
		'Set column widths
		Testpoint_Setting (Column_Width(2)=800)
		Testpoint_Setting (Column_Width(3)=700)
		Testpoint_Setting (Column_Width(4)=700)
		Testpoint_Setting (Column_Width(5)=500)	
		Testpoint_Setting (Column_Width(6)=1300)			
	Case = 11
		'BoostDOE
		'Set setpoint table to test-specific testmatrix
		'Let $Setpoint_Table = $Runtype_11_Matrix
		'Count number of testpoints
		'Let $Individual_Testpoints = Variable_Rows $Runtype_11_Matrix
		'Set autotest testpoint variable to number of testpoints
		'Testpoints = $Individual_Testpoints
		'Label column headers
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)
			'Set column widths
			Testpoint_Setting (Column_Width(7)=600)	
			Testpoint_Setting (Column_Width(8)=600)				
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
		End
		'Set column widths
		Testpoint_Setting (Column_Width(2)=800)
		Testpoint_Setting (Column_Width(3)=700)
		Testpoint_Setting (Column_Width(4)=700)
		Testpoint_Setting (Column_Width(5)=500)	
		Testpoint_Setting (Column_Width(6)=1300)			
	Case = 12
		'DualBoost
		'Set setpoint table to test-specific testmatrix
		'Let $Setpoint_Table = $Runtype_12_Matrix
		'Count number of testpoints
		'Let $Individual_Testpoints = Variable_Rows $Runtype_12_Matrix
		'Set autotest testpoint variable to number of testpoints
		'Testpoints = $Individual_Testpoints
		'Label column headers
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Gear, Line, RunType, DitA, DitF)
			'Set column widths
			Testpoint_Setting (Column_Width(7)=600)	
			Testpoint_Setting (Column_Width(8)=600)				
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Gear, Line, RunType)				
		End
		'Set column widths
		Testpoint_Setting (Column_Width(2)=800)
		Testpoint_Setting (Column_Width(3)=700)
		Testpoint_Setting (Column_Width(4)=700)
		Testpoint_Setting (Column_Width(5)=500)	
		Testpoint_Setting (Column_Width(6)=1300)		
	Case = 13
		'Custom_Profile
		'Set setpoint table to test-specific testmatrix
		'Let $Setpoint_Table = $Runtype_13_Matrix
		'Count number of testpoints
		'Let $Individual_Testpoints = Variable_Rows $Runtype_13_Matrix
		'Set autotest testpoint variable to number of testpoints
		'Testpoints = $Individual_Testpoints
		'Label column headers
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)
			'Set column widths
			Testpoint_Setting (Column_Width(7)=600)	
			Testpoint_Setting (Column_Width(8)=600)				
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
		End
		'Set column widths
		Testpoint_Setting (Column_Width(2)=800)
		Testpoint_Setting (Column_Width(3)=700)
		Testpoint_Setting (Column_Width(4)=700)
		Testpoint_Setting (Column_Width(5)=500)	
		Testpoint_Setting (Column_Width(6)=1300)			
	Case = 14
		'Transfer_Function
		'Set setpoint table to test-specific testmatrix
		'Let $Setpoint_Table = $Runtype_14_Matrix
		'Count number of testpoints
		'Let $Individual_Testpoints = Variable_Rows $Runtype_14_Matrix
		'Set autotest testpoint variable to number of testpoints
		'Testpoints = $Individual_Testpoints
		'Label column headers
		If $DitherType = 2
			If $XferFunction_Type = 0
				'PID Gain Tuning
				Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, KP, KI, KD, DitA, DitF)
				'Set column widths
				Testpoint_Setting (Column_Width(7)=700)	
				Testpoint_Setting (Column_Width(8)=700)
				Testpoint_Setting (Column_Width(9)=700)
				Testpoint_Setting (Column_Width(10)=600)
				Testpoint_Setting (Column_Width(11)=600)				
			Else
				'Temperature compensation
				Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)
				'Set column widths
				Testpoint_Setting (Column_Width(7)=600)	
				Testpoint_Setting (Column_Width(8)=600)	
			End
		Else
			If $XferFunction_Type = 0
				'PID Gain Tuning
				Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, KP, KI, KD)
				'Set column widths
				Testpoint_Setting (Column_Width(7)=700)	
				Testpoint_Setting (Column_Width(8)=700)
				Testpoint_Setting (Column_Width(9)=700)				
			Else
				'Temperature compensation
				Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)
			End	
		End	
		'Set column widths
		Testpoint_Setting (Column_Width(2)=800)
		Testpoint_Setting (Column_Width(3)=700)
		Testpoint_Setting (Column_Width(4)=700)
		Testpoint_Setting (Column_Width(5)=500)	
		Testpoint_Setting (Column_Width(6)=1300)		
	Case = 15
		'Stiction
		'Set setpoint table to test-specific testmatrix
		'Let $Setpoint_Table = $Runtype_15_Matrix
		'Count number of testpoints
		'Let $Individual_Testpoints = Variable_Rows $Runtype_15_Matrix
		'Set autotest testpoint variable to number of testpoints
		'Testpoints = $Individual_Testpoints
		'Label column headers
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, Torque, DitA, DitF)
			'Set column widths
			Testpoint_Setting (Column_Width(7)=600)	
			Testpoint_Setting (Column_Width(8)=600)				
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, Torque)				
		End
		'Set column widths
		Testpoint_Setting (Column_Width(2)=800)
		Testpoint_Setting (Column_Width(3)=700)
		Testpoint_Setting (Column_Width(4)=700)
		Testpoint_Setting (Column_Width(5)=500)	
		Testpoint_Setting (Column_Width(6)=1300)	
	Case = 16
		'Balance_Dam
		'Set setpoint table to test-specific testmatrix
		'Let $Setpoint_Table = $Runtype_16_Matrix
		'Count number of testpoints
		'Let $Individual_Testpoints = Variable_Rows $Runtype_16_Matrix
		'Set autotest testpoint variable to number of testpoints
		'Testpoints = $Individual_Testpoints
		'Label column headers
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)
			'Set column widths
			Testpoint_Setting (Column_Width(7)=600)	
			Testpoint_Setting (Column_Width(8)=600)				
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
		End
		'Set column widths
		Testpoint_Setting (Column_Width(2)=800)
		Testpoint_Setting (Column_Width(3)=700)
		Testpoint_Setting (Column_Width(4)=700)
		Testpoint_Setting (Column_Width(5)=500)	
		Testpoint_Setting (Column_Width(6)=1300)
	Case = 17
		'Preset_Current_Steps
		'Set setpoint table to test-specific testmatrix
		'Let $Setpoint_Table = $Runtype_17_Matrix
		'Count number of testpoints
		'Let $Individual_Testpoints = Variable_Rows $Runtype_17_Matrix
		'Set autotest testpoint variable to number of testpoints
		'Testpoints = $Individual_Testpoints
		'Label column headers
		If $DitherType = 2
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType, DitA, DitF)
			'Set column widths
			Testpoint_Setting (Column_Width(7)=600)	
			Testpoint_Setting (Column_Width(8)=600)				
		Else
			Setpoints ($Setpoint_Table, Temperature, Turbine, Solenoid, Line, RunType)				
		End
		'Set column widths
		Testpoint_Setting (Column_Width(2)=800)
		Testpoint_Setting (Column_Width(3)=700)
		Testpoint_Setting (Column_Width(4)=700)
		Testpoint_Setting (Column_Width(5)=500)	
		Testpoint_Setting (Column_Width(6)=1300)				
End_Select

'Set flag to determine number of rows in labeling subroutines
'Let $Multi_Select_On = 1

'Add VFS labels to setpoint table for all tests except dual boost
If $Multi_Select_RunType ~= 12
	Select_Case $Trans_Select
		Case = 2
			'8F24
			Gosub 8F_VFS_Labels
		Case = 3
			'10R140
			Gosub 10R_VFS_Labels			
		Case = 4
			'8F57
			Gosub 8F_VFS_Labels
		Case = 6
			'10R60/80
			Gosub 10R_VFS_Labels
		Case = 7
			'8F35
			Gosub 8F_VFS_Labels
		Case = 8
			'6R80
			Gosub 6R_VFS_Labels
	End_Select
End

'Label test name in setpoint table	
Gosub RunType_Labels

'Save variables to variable
Save_Variables

End_Sub                                    

'*******************************************************
Sub RunType_Labels
'*******************************************************
Log_Message (Starting RunType_Labels subroutine)

'Initialize label counter index
Let $LabelCounter = 0

'Start label counting control loop
Do
	'Increment label counter index
	Let $LabelCounter = $LabelCounter + 1
	'Set index endpoint for multi-select or individual tests
	'If $Multi_Select_On = 0
		If $LabelCounter > $Total_Testpoints Then Goto Finished_RunType_Labels:
	'Else
	'	If $LabelCounter > $Individual_Testpoints Then Goto Finished_RunType_Labels:
	'End
	'Extract RunType from setpoint table
	Let $Labeldummy = $Setpoint_Table ($LabelCounter , 5)
	'Label test description based on RunType
	Select_Case $Labeldummy
		Case = 1
			'Current Steps
			Let !RunType = Current_Steps
		Case = 2
			'Current Sweeps
			Let !RunType = Current_Sweeps
		Case = 3
			'Pressure Steps
			Let !RunType = Pressure_Steps
		Case = 4
			'Pressure Sweeps
			Let !RunType = Pressure_Sweeps
		Case = 5
			'Pressure Bar-Graph
			Let !RunType = Bar_Graph
		Case = 6
			'Pressure Response Test
			Let !RunType = Pressure_Response
		Case = 7
			'Line Pressure Gain Switching
			Let !RunType = Gain_Switching
		Case = 8
			'Preset Pressure Steps
			Let !RunType = Preset_Pressure
		Case = 9
			'Multi-rate Triangle Wave
			Let !RunType = Triangle_Wave
		Case = 10
			'Square Wave
			Let !RunType = Square_Wave
		Case = 11
			'Boost DOE
			Let !RunType = Boost_DOE
		Case = 12
			'Dual Boost
			Let !RunType = Dual_Boost
		Case = 13
			'Custom Profile
			Let !RunType = Custom_Profile
		Case = 14
			'Custom Profile
			Let !RunType = Transfer_Function
		Case = 15
			'Stiction
			Let !RunType = Stiction
		Case = 16
			'Balance Dam
			Let !RunType = Balance_Dam		
		Case = 17
			'Preset Current Steps
			Let !RunType = Preset_Current_Steps			 
	End_Select
	'Label Testpoint one extra column from setpoint table
	Testpoint_Setting ($LabelCounter,6) = !RunType
Loop
Finished_RunType_Labels:
Log_Message (RunType is %%!RunType%%.)
End_Sub

'*******************************************************
Sub Set_Pressure_Setpoints
'*******************************************************
Log_Message (Running Set_Pressure_Setpoints Subroutine)

'Initialize index
Let $Press_Set_Dummy = 0
Let $Press_Index = 0

'Start pressure setpoint control loop
Do
	'Increment index
	Let $Press_Index = $Press_Index + 1
	'Preset Pressure Steps
	If $RunType = 8
		'Dimension Preset Pressure setpoint matrix
		Dim $PressureSetpoints (16,1)
		Let $Press_Set_Dummy = $PresetPressureSetpoints ($Press_Index,$CurrentRunElement)
	End
	'Transfer Function
	If $RunType = 14
		'Dimension transfer function pressure setpoint matrix
		Dim $PressureSetpoints (12,1)
		Let $Press_Set_Dummy = $Xfer_PressureMatrix ($Press_Index,$CurrentRunElement)
	End
	'Populate generic pressure setpoint matrix with value extracted from individual clutch setpoint matrix
	Let $PressureSetpoints ($Press_Index,1) = $Press_Set_Dummy
	'Establish number of indices from pressure setpoint matrix
	Let $PressureSetpoint_Length = Variable_Rows $PressureSetpoints
	'Exit loop when all pressure setpoints have been completed
	If $Press_Index = $PressureSetpoint_Length Then Goto Done_Press_Matrix:
Loop

Done_Press_Matrix:
End_Sub
'*******************************************************
Sub Set_Current_Setpoints
'*******************************************************
Log_Message (Running Set_Current_Setpoints Subroutine)

'Initialize index
Let $Preset_Current_Dummy = 0
Let $Preset_Current_Index = 0

'Start current setpoint control loop
Do
	'Increment index
	Let $Preset_Current_Index = $Preset_Current_Index + 1
	'Dimension current setpoint matrix
	Dim $Preset_Current_Setpoints (16,1)
	'Extract preset current from individual current setpoint matrix
	Let $Preset_Current_Dummy = $Preset_Current_Matrix ($Preset_Current_Index,$CurrentRunElement)
	'Copy extracted current setpoint from individual current setpoint matrix to generic current setpoint matrix
	Let $Preset_Current_Setpoints ($PCurrent_Index,1) = $Preset_Current_Dummy
	'Determine number of indices
	Let $Preset_Current_Setpoints_Length = Variable_Rows $Preset_Current_Setpoints
	'Exit loop when all preset current indices have been completed
	If $Preset_Current_Index = $Preset_Current_Setpoints_Length Then Goto Done_Preset_Current_Matrix:
Loop

Done_Preset_Current_Matrix:

End_Sub

'*******************************************************
Sub Import_Test_Variables_From_Excel
'*******************************************************
Log_Message (Running Import_Test_Variables_From_Excel)

'Open Excel Test Setup Workbook
Excel (Workbook = Test_Setup)

'Hide Excel while test is running
Excel (Visible = False)
'Import Setup Version
Excel (Worksheet = Front)
Let !SetupVer = 0
Excel (!SetupVer = Range (SetupVer))

'Compare setup version in autotest script to setup version in Excel test setup workbook. Terminate test if no match
If !SetupVer ~= !LatestSetupVer
	Log_Message (Please update test setup to the latest version: %%!LatestSetupVer%%.)
	Log_Message (******************************************************)
	Log_Message (Terminating test.)
	Log_Message (******************************************************)
	Screen_Message (Red, Please update test setup to the latest version: %%!LatestSetupVer%%. Terminating Test.)
	Wait (3)
	Let !Text_Message = "Incorrect Test Setup Version. Terminating Test."
	Gosub Send_Text_Message
	Gosub Terminate_Test	
End

'Change worksheet to Matrix to import testmatrix
Excel (Worksheet = Matrix)

'Reset testmatrix dimensions
Dim $TestMatrix (1,1)
Let $TestMatrix = 0
Excel ($TestMatrix = Range (TestMatrix))

'Change worksheet to individual_tests to import individual test matrices
Excel (Worksheet = Individual_Tests)

'Matrix 1
Dim $Runtype_1_Matrix (1,1)
Let $Runtype_1_Matrix = 0
Excel ($Runtype_1_Matrix = Range (Runtype_1_Matrix))
'Matrix 2
Dim $Runtype_2_Matrix (1,1)
Let $Runtype_2_Matrix = 0
Excel ($Runtype_2_Matrix = Range (Runtype_2_Matrix))
'Matrix 3
Dim $Runtype_3_Matrix (1,1)
Let $Runtype_3_Matrix = 0
Excel ($Runtype_3_Matrix = Range (Runtype_3_Matrix))
'Matrix 4
Dim $Runtype_4_Matrix (1,1)
Let $Runtype_4_Matrix = 0
Excel ($Runtype_4_Matrix = Range (Runtype_4_Matrix))
'Matrix 5
Dim $Runtype_5_Matrix (1,1)
Let $Runtype_5_Matrix = 0
Excel ($Runtype_5_Matrix = Range (Runtype_5_Matrix))
'Matrix 6
Dim $Runtype_6_Matrix (1,1)
Let $Runtype_6_Matrix = 0
Excel ($Runtype_6_Matrix = Range (Runtype_6_Matrix))
'Matrix 7
Dim $Runtype_7_Matrix (1,1)
Let $Runtype_7_Matrix = 0
Excel ($Runtype_7_Matrix = Range (Runtype_7_Matrix))
'Matrix 8
Dim $Runtype_8_Matrix (1,1)
Let $Runtype_8_Matrix = 0
Excel ($Runtype_8_Matrix = Range (Runtype_8_Matrix))
'Matrix 9
Dim $Runtype_9_Matrix (1,1)
Let $Runtype_9_Matrix = 0
Excel ($Runtype_9_Matrix = Range (Runtype_9_Matrix))
'Matrix 10
Dim $Runtype_10_Matrix (1,1)
Let $Runtype_10_Matrix = 0
Excel ($Runtype_10_Matrix = Range (Runtype_10_Matrix))
'Matrix 11
Dim $Runtype_11_Matrix (1,1)
Let $Runtype_11_Matrix = 0
Excel ($Runtype_11_Matrix = Range (Runtype_11_Matrix))
'Matrix 12
Dim $Runtype_12_Matrix (1,1)
Let $Runtype_12_Matrix = 0
Excel ($Runtype_12_Matrix = Range (Runtype_12_Matrix))
'Matrix 13
Dim $Runtype_13_Matrix (1,1)
Let $Runtype_13_Matrix = 0
Excel ($Runtype_13_Matrix = Range (Runtype_13_Matrix))
'Matrix 14
Dim $Runtype_14_Matrix (1,1)
Let $Runtype_14_Matrix = 0
Excel ($Runtype_14_Matrix = Range (Runtype_14_Matrix))
'Matrix 15
Dim $Runtype_15_Matrix (1,1)
Let $Runtype_15_Matrix = 0
Excel ($Runtype_15_Matrix = Range (Runtype_15_Matrix))
'Matrix 16
Dim $Runtype_16_Matrix (1,1)
Let $Runtype_16_Matrix = 0
Excel ($Runtype_16_Matrix = Range (Runtype_16_Matrix))
'Matrix 17
Dim $Runtype_17_Matrix (1,1)
Let $Runtype_17_Matrix = 0
Excel ($Runtype_17_Matrix = Range (Runtype_17_Matrix))

'Change worksheet to Master
Excel (Worksheet = Master)

'Import Transmission Selection
Excel ($Trans_Select = Range (Trans_Select))
'Set Gear Ratio matrix
Gosub Trans_Select

'Import Test Location
Dim $Test_Location (1,1)
Let $Test_Location = 0
Excel ($Test_Location = Range (Test_Location))
Select_Case $Test_Location
	Case = 1
	'M3/M4
		Let $HIL_Flag = 1
        Let $Standard_Cell = 0
        Let $Vehicle_Flag = 0
	Case = 2
	'Standard Dyno
		Let $HIL_Flag = 0
        Let $Standard_Cell = 1
        Let $Vehicle_Flag = 0	
	Case = 3
	'Vehicle
		Let $HIL_Flag = 0
        Let $Standard_Cell = 0
        Let $Vehicle_Flag = 1	
End_Select	

'Import TFT_Test Selection
Let $TFT_Test = 0
Excel ($TFT_Test = Range (TFT_Test))

'Import TFT Test Selection
Let $TFT_Upper_Limit = 0
Excel ($TFT_Upper_Limit = Range (TFT_Upper_Limit))

'Import PRNDL Position
Dim $PRNDL_Selection (1,1)
Let $PRNDL_Selection = 0
Excel ($PRNDL_Selection = Range (PRNDL_Selection))

'Import Powertrain Name
Let !PT_Name = 0
Excel (!PT_Name = Range (PT_Identifier))

'Import Text Message Settings
Let $Text_On = 0
Excel ($Text_On = Range (Text_On))

'Import Dither Type
Excel ($DitherType = Range (DitherType))

'Import Dither Amplitude
Dim $DitA_Matrix (1,1)
Let $DitA_Matrix = 0
Excel ($DitA_Matrix = Range (DitA_Matrix))

'Import Dither Frequency
Dim $DitF_Matrix (1,1)
Let $DitF_Matrix = 0
Excel ($DitF_Matrix = Range (DitF_Matrix))

'Import Engine Shutdown Selection
Let $Engine_Shutdown = 0
Excel ($Engine_Shutdown = Range (Engine_Shutdown))

'Import Run Type
Dim $RunType (1,1)
Let $RunType = 0
Excel ($RunType = Range (RunType))

'Import Temperatures to test...
Dim $Temps (1,1)
Let $Temps = 0
Excel ($Temps = Range (Temps))
Dim $TempIO (1,1)
Let $TempIO = 0
Excel ($TempIO = Range (TempIO))
Gosub TempQuickMatrix

'Import Turbine Speed Setpoints
Dim $TurbineSetpoints (1,1)
Let $TurbineSetpoints = 0
Excel ($TurbineSetpoints = Range (TurbineSetpoints))
Dim $NT_IO (1,1)
Let $NT_IO = 0
Excel ($NT_IO = Range (NT_IO))

'Import Line Pressure Settings
Dim $LinePressureSetpoints (1,1)
Let $LinePressureSetpoints = 0
Excel ($LinePressureSetpoints = Range (LinePressureSetpoints))
Dim $LinePressureIO (1,1)
Let $LinePressureIO = 0
Excel ($LinePressureIO = Range (LinePressureIO))

'Import Bar Graph Settings
Dim $BarGraphMatrix (1,1)
Let $BarGraphMatrix = 0
Excel ($BarGraphMatrix = Range (BarGraphMatrix))
Let $BarGraphDirection = 0
Excel ($BarGraphDirection = Range (BarGraphDirection))
Let $BarGraphStepSize = 0
Excel ($BarGraphStepSize = Range (BarGraphStepSize))
Let $BarGraphStepTime = 0
Excel ($BarGraphStepTime = Range (BarGraphStepTime))
Let $BarGraph_HoldClutch = 0
Excel ($BarGraph_HoldClutch = Range (BarGraph_HoldClutch)) 
Let $BarGraph_OSIO = 0
Excel ($BarGraph_OSIO = Range (BarGraph_OSIO))
Let $BarGraphOS = 0
Excel ($BarGraphOS = Range (BarGraphOS))
Let $BarGraph_TCC_On = 0
Excel ($BarGraph_TCC_On = Range (BarGraph_TCC_On))

'Import Pressure Response Settings
Dim $PressureResponseMatrix (1,1)
Let $PressureResponseMatrix = 0
Excel ($PressureResponseMatrix = Range (PressureResponseMatrix))
Let $PRStepTime = 0
Excel ($PRStepTime = Range (PRStepTime))
Let $PR_hold = 0
Excel ($PR_hold = Range (PR_hold))
Let $PRStepSize = 0
Excel ($PRStepSize = Range (PRStepSize))
Let $PR_direction = 0
Excel ($PR_direction = Range (PR_direction))
Let $PR_InterruptStepSize = 0
Excel ($PR_InterruptStepSize = Range (PR_InterruptStepSize))
Let $PR_Interrupt_On = 0
Excel ($PR_Interrupt_On = Range (PR_Interrupt_On))
Let $PR_Interrupt_Wait_Time = 0
Excel ($PR_Interrupt_Wait_Time = Range (PR_Interrupt_Wait_Time))
Let $PR_Interrupt_Type = 0
Excel ($PR_Interrupt_Type = Range (PR_Interrupt_Type))
Let $PR_Interrupt_VFSPress = 0
Excel ($PR_Interrupt_VFSPress = Range (PR_Interrupt_VFSPress))
Let $PR_Interrupt_LinePress = 0
Excel ($PR_Interrupt_LinePress = Range (PR_Interrupt_LinePress))
Let $PR_Interrupt_Turbine = 0
Excel ($PR_Interrupt_Turbine = Range (PR_Interrupt_Turbine))
Let $PR_Interrupt_Pedal = 0
Excel ($PR_Interrupt_Pedal = Range (PR_Interrupt_Pedal))
Let $PR_Preboost_On = 0
Excel ($PR_Preboost_On = Range (PR_Preboost_On))
Let $PR_Preboost_Setpoint = 0
Excel ($PR_Preboost_Setpoint = Range (PR_Preboost_Setpoint))

'Import Engine Torque to test
Dim $TorqueSetpoints (1,1)
Let $TorqueSetpoints = 0
Excel ($TorqueSetpoints = Range (TorqueSetpoints))
Dim $TQ_IO (1,1)
Let $TQ_IO = 0
Excel ($TQ_IO = Range (TQ_IO))

'Import Solenoid IO Matrix
Dim $Elements (1,1)
Let $Elements = 0
Excel ($Elements = Range (Elements))

'Import Pressure Sweep Settings
Let $PSweepTime = 0
Excel ($PSweepTime = Range (PSweepTime))
Let $PSweepDirection = 0
Excel ($PSweepDirection = Range (PSweepDirection))
Let $PSweepHold = 0
Excel ($PSweepHold = Range (PSweepHold))

'Import Gain Switching Settings
' Let $GainSwStartPressure = 0
' Excel ($GainSwStartPressure = Range (GainSwStartPressure))
' Let $GainSwStartTime = 0
' Excel ($GainSwStartTime = Range (GainSwStartTime))
' Let $GainSwLoPressure = 0
' Excel ($GainSwLoPressure = Range (GainSwLoPressure))
' Let $GainSwHiPressure = 0
' Excel ($GainSwHiPressure = Range (GainSwHiPressure))
' Let $GainSwDHoldCurrent = 0
' Excel ($GainSwDHoldCurrent = Range (GainSwDHoldCurrent))
' Let $GainSwEHoldCurrent = 0
' Excel ($GainSwEHoldCurrent = Range (GainSwEHoldCurrent))
' Let $GainSwStepSize = 0
' Excel ($GainSwStepSize = Range (GainSwStepSize))
' Let $GainSwStepTime = 0
' Excel ($GainSwStepTime = Range (GainSwStepTime))
' Let $GainSwType = 0
' Excel ($GainSwType = Range (GainSwType))
' Let $GainSwSweepTime = 0
' Excel ($GainSwSweepTime = Range (GainSwSweepTime))
' Let $GainSwHoldTime = 0
' Excel ($GainSwHoldTime = Range (GainSwHoldTime))
' Let $GainSwSweepStartPressure = 0
' Excel ($GainSwSweepStartPressure = Range (GainSwSweepStartPressure))
' Let $GainSwSweepEndPressure = 0
' Excel ($GainSwSweepEndPressure = Range (GainSwSweepEndPressure))

' Import Square Wave Settings
Let $SquareWaveStepSize = 0
Excel ($SquareWaveStepSize = Range (SquareWaveStepSize))
Let $SquareWaveStepTime = 0
Excel ($SquareWaveStepTime = Range (SquareWaveStepTime))
Let $SquareWaveCycles = 0
Excel ($SquareWaveCycles = Range (SquareWaveCycles))
Let $SquareWaveStartPressures = 0
Excel ($SquareWaveStartPressures = Range (SquareWaveStartPressures))
Let $SquareWaveBoostFlag = 0
Excel ($SquareWaveBoostFlag = Range (SquareWaveBoost))
Let $SquareWaveVariableOffFlag = 0
Excel ($SquareWaveVariableOffFlag = Range (SquareWaveVariableOff))
Let $SquareWaveOffMin = 0
Excel ($SquareWaveOffMin = Range (SquareWaveOffMin))
Let $SquareWaveOffInc = 0
Excel ($SquareWaveOffInc = Range (SquareWaveOffInc))
Let $SquareWaveOffMax = 0
Excel ($SquareWaveOffMax = Range (SquareWaveOffMax))

'Import Current Step Settings
Let $CurrentStepSize = 0
Excel ($CurrentStepSize = Range (CurrentStepSize))
Let $CurrentStepTime = 0
Excel ($CurrentStepTime = Range (CurrentStepTime))
Let $CurrentStepDirection = 0
Excel ($CurrentStepDirection = Range (CurrentStepDirection))
Let $CurrentStepHold = 0
Excel ($CurrentStepHold = Range (CurrentStepHold))
Let $Current_Step_Cold_Temp_Time_Comp = 0
Excel ($Current_Step_Cold_Temp_Time_Comp = Range (Current_Step_Cold_Temp_Time_Comp))

'Import Preset Current Step Settings
Dim $Preset_Current_Matrix (1,1)
Let $Preset_Current_Matrix = 0
Excel ($Preset_Current_Matrix = Range (Preset_Current_Matrix))
Let $Preset_Current_Step_Time = 0
Excel ($Preset_Current_Step_Time = Range (Preset_Current_Step_Time))
Let $Preset_Current_Direction = 0
Excel ($Preset_Current_Direction = Range (Preset_Current_Direction))
Let $Preset_Current_Hold = 0
Excel ($Preset_Current_Hold = Range (Preset_Current_Hold))

'Import Pressure Step Settings
Let $PStepSize = 0
Excel ($PStepSize = Range (PStepSize))
Let $PStepTime = 0
Excel ($PStepTime = Range (PStepTime))
Let $PStepDirection = 0
Excel ($PStepDirection = Range (PStepDirection))
Let $PStepHold = 0
Excel ($PStepHold = Range (PStepHold))
Let $PStepHoldClutch = 0
Excel ($PStepHoldClutch = Range (PStepHoldClutch))
Let $PStepTCC_On = 0
Excel ($PStepTCC_On = Range (PStepTCC_On))
Let $Pressure_Step_Cold_Temp_Time_Comp = 0
Excel ($Pressure_Step_Cold_Temp_Time_Comp = Range (Pressure_Step_Cold_Temp_Time_Comp))

'Import Current Sweep Settings
Let $CurrentSweepTime = 0
Excel ($CurrentSweepTime = Range (CurrentSweepTime))
Let $CurrentSweepDirection = 0
Excel ($CurrentSweepDirection = Range (CurrentSweepDirection))
Let $CurrentSweepHold = 0
Excel ($CurrentSweepHold = Range (CurrentSweepHold))

'Import Preset Pressure Settings
Dim $PresetPressureSetpoints (1,1)
Let $PresetPressureSetpoints = 0
Excel ($PresetPressureSetpoints = Range (PresetPressureSetpoints))
Let $PSetStepTime = 0
Excel ($PSetStepTime = Range (PSetStepTime))
Let $PSetHold = 0
Excel ($PSetHold = Range (PSetHold))
Let $PSetDirection = 0
Excel ($PSetDirection = Range (PSetDirection))

'Import Triangle Wave Settings
Let $TriangleWaveHold = 0
Excel ($TriangleWaveHold = Range (TriangleWaveHold))
Dim $TriangleWaveMatrix (1,1)
Let $TriangleWaveMatrix = 0
Excel ($TriangleWaveMatrix = Range (TriangleWaveMatrix))

'Import Boost DOE Settings
Let $BoostDOE_OutputSpeed = 0
Excel ($BoostDOE_OutputSpeed = Range (BoostDOE_OutputSpeed))
Let $BoostDOEMatrix = 0
Excel ($BoostDOEMatrix = Range (BoostDOEMatrix))

'Import Dual Boost Settings
Let $DualBoost_Gear_IO = 0
Excel ($DualBoost_Gear_IO = Range (DualBoost_Gear_IO))
Let $DualBoost_Matrix = 0
Excel ($DualBoost_Matrix = Range (DualBoost_Matrix))
Let $DualBoost_StepTime = 0
Excel ($DualBoost_StepTime = Range (DualBoost_StepTime))

'Import Custom Pressure Profile Settings
Let $CP_PreBoost = 0
Excel ($CP_PreBoost = Range (CP_PreBoost))
Let $CP_ProfileType = 0
Excel ($CP_ProfileType = Range (CP_ProfileType))
Let $CP_Press_Matrix_0 = 0
Excel ($CP_Press_Matrix_0 = Range (CP_Press_Matrix_0))
Let $CP_Press_Matrix_1 = 0
Excel ($CP_Press_Matrix_1 = Range (CP_Press_Matrix_1))
Let $CP_Press_Matrix_2 = 0
Excel ($CP_Press_Matrix_2 = Range (CP_Press_Matrix_2))
Let $CP_Press_Matrix_3 = 0
Excel ($CP_Press_Matrix_3 = Range (CP_Press_Matrix_3))
Let $CP_Press_Matrix_4 = 0
Excel ($CP_Press_Matrix_4 = Range (CP_Press_Matrix_4))
Let $CP_Press_Matrix_5 = 0
Excel ($CP_Press_Matrix_5 = Range (CP_Press_Matrix_5))
Let $CP_Press_Matrix_6 = 0
Excel ($CP_Press_Matrix_6 = Range (CP_Press_Matrix_6))
Let $CP_Press_Matrix_7 = 0
Excel ($CP_Press_Matrix_7 = Range (CP_Press_Matrix_7))

'Import Custom Current Profile Settings
Let $CP_Current_Matrix_0 = 0
Excel ($CP_Current_Matrix_0 = Range (CP_Current_Matrix_0))
Let $CP_Current_Matrix_1 = 0
Excel ($CP_Current_Matrix_1 = Range (CP_Current_Matrix_1))
Let $CP_Current_Matrix_2 = 0
Excel ($CP_Current_Matrix_2 = Range (CP_Current_Matrix_2))
Let $CP_Current_Matrix_3 = 0
Excel ($CP_Current_Matrix_3 = Range (CP_Current_Matrix_3))
Let $CP_Current_Matrix_4 = 0
Excel ($CP_Current_Matrix_4 = Range (CP_Current_Matrix_4))
Let $CP_Current_Matrix_5 = 0
Excel ($CP_Current_Matrix_5 = Range (CP_Current_Matrix_5))
Let $CP_Current_Matrix_6 = 0
Excel ($CP_Current_Matrix_6 = Range (CP_Current_Matrix_6))
Let $CP_Current_Matrix_7 = 0
Excel ($CP_Current_Matrix_7 = Range (CP_Current_Matrix_7))

'Import Transfer Function Settings
Dim $Xfer_PressureMatrix (1,1)
Let $Xfer_PressureMatrix = 0
Excel ($Xfer_PressureMatrix = Range (Xfer_PressureMatrix))
Let $XferStepTime = 0
Excel ($XferStepTime = Range (XferStepTime))
Let $XferHold = 0
Excel ($XferHold = Range (XferHold))
Let $XferDirection = 0
Excel ($XferDirection = Range (XferDirection))
'Let $XferKIKP = 0
' Excel ($XferKIKP = Range (XferKIKP))
Let $XferKIKPKD = 0
Excel ($XferKIKPKD = Range (XferKIKPKD))
Let $XferFunction_Type = 0
Excel ($XferFunction_Type = Range (XferFunction_Type))

'*******************************************************
'Keep Section for later development

' Excel (Workbook = Cell_Summary)
' Excel (Visible = False)

' 'Export TestMatrix to Cell_Summary
' Excel (Worksheet = Matrix)

' Let $TestMatrix_Row_Count = 1

' Do
	' Let $TestMatrix_Row_Count = $TestMatrix_Row_Count + 1
	' Excel ($TestMatrix_Row_Dummy = Cells ($TestMatrix_Row_Count , 1))
	' If $TestMatrix_Row_Dummy = 0
		' Goto Done_Matrix_Transfer:
	' End
' Loop
' Done_Matrix_Transfer:
' ' Save_Variables
' ' Pause
' Excel (Range ($TestMatrix_Row_Count) = $TestMatrix_Row_Count)
' Excel (Macro = Redimension_Summary_Testmatrix)
'*********************************************************

'Save Excel Workbook and Exit Excel
Excel (Save)
Excel (Quit)

Save_Variables

End_Sub

'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*
'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*
'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*
'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*
'AutoTEST TRAM Core copy-and-paste point.
'Last Core Update 06-29-2021
'*******************************************************
Sub Set_PID_Gains
'*******************************************************
Log_Message (Running Set_PID_Gains Subroutine)

'104-Vehicle Speed Pedal Control
If $Drive_Cycle_Gain_Tune = 1		
	Let $Vehicle_Speed_Pedal_Control_KP = $CurrentRunKP
	Let $Vehicle_Speed_Pedal_Control_KI = $CurrentRunKI
	Let $Vehicle_Speed_Pedal_Control_KD = $CurrentRunKD
Else
	'Gains tuned by MDD 10/18/2019
	Let $Vehicle_Speed_Pedal_Control_KP = 4
	Let $Vehicle_Speed_Pedal_Control_KI = 0.06
	Let $Vehicle_Speed_Pedal_Control_KD = 0.01
End
Tune_PID Vehicle_Speed_Feedback (P_Gain = $Vehicle_Speed_Pedal_Control_KP, I_Gain = $Vehicle_Speed_Pedal_Control_KI, D_Gain = $Vehicle_Speed_Pedal_Control_KD, Deadband = 0, Offset = 0, Error_Limit = 100, Max_Cmd = 100, Min_Cmd = 0, Acq_Item_Bumpless = Pedal_fbk, Windup_Protection_Disable = 0) Using Pedal_Position_Cmd
Log_Message (Vehicle_Speed_Feedback using Pedal_Position_Cmd PID gains set.)
Log_Message (Vehicle_Speed_Pedal_Control_KP is %%$Vehicle_Speed_Pedal_Control_KP%%.)
Log_Message (Vehicle_Speed_Pedal_Control_KI is %%$Vehicle_Speed_Pedal_Control_KI%%.)
Log_Message (Vehicle_Speed_Pedal_Control_KD is %%$Vehicle_Speed_Pedal_Control_KD%%.)	

'105-Vehicle Speed Grade Control
If $Drive_Cycle_Gain_Tune = 2
	Let $Vehicle_Speed_Grade_Control_KP = $CurrentRunKP
	Let $Vehicle_Speed_Grade_Control_KI = $CurrentRunKI
	Let $Vehicle_Speed_Grade_Control_KD = $CurrentRunKD
Else
	If $Trans_Select = 6
		'10R60/80
		'Gains tuned my MDD 12/11/2020
		Let $Vehicle_Speed_Grade_Control_KP = -2
		Let $Vehicle_Speed_Grade_Control_KI = -0.25
		Let $Vehicle_Speed_Grade_Control_KD = 0	
	Else
		'Gains tuned by MDD 11/06/2019
		Let $Vehicle_Speed_Grade_Control_KP = -3
		Let $Vehicle_Speed_Grade_Control_KI = -0.75
		Let $Vehicle_Speed_Grade_Control_KD = 0
	End
End	
Tune_PID Vehicle_Speed_Feedback (P_Gain = $Vehicle_Speed_Grade_Control_KP, I_Gain = $Vehicle_Speed_Grade_Control_KI, D_Gain = $Vehicle_Speed_Grade_Control_KD, Deadband = 0, Offset = 0, Error_Limit = 100, Max_Cmd = 30, Min_Cmd = -30, Acq_Item_Bumpless = RoadGrade_fbk, Windup_Protection_Disable = 0) Using RoadGrade_Set
Log_Message (Vehicle Speed Feedback using RoadGrade PID gains set.)
Log_Message (Vehicle_Speed_Grade_Control_KP is %%$Vehicle_Speed_Grade_Control_KP%%.)
Log_Message (Vehicle_Speed_Grade_Control_KI is %%$Vehicle_Speed_Grade_Control_KI%%.)
Log_Message (Vehicle_Speed_Grade_Control_KD is %%$Vehicle_Speed_Grade_Control_KD%%.)

'106-Output Speed Pedal Control
If $Drive_Cycle_Gain_Tune = 3
	Let $Output_Speed_Pedal_Control_KP = $CurrentRunKP
	Let $Output_Speed_Pedal_Control_KI = $CurrentRunKI
	Let $Output_Speed_Pedal_Control_KD = $CurrentRunKD
Else
	'Gains tuned by MDD 10/18/2019
	Let $Output_Speed_Pedal_Control_KP = 0.75
	Let $Output_Speed_Pedal_Control_KI = 0.02
	Let $Output_Speed_Pedal_Control_KD = 0
End	
Tune_PID DynSpd (P_Gain = $Output_Speed_Pedal_Control_KP, I_Gain = $Output_Speed_Pedal_Control_KI, D_Gain = $Output_Speed_Pedal_Control_KD, Deadband = 0, Offset = 0, Error_Limit = 100, Max_Cmd = 100, Min_Cmd = 0, Acq_Item_Bumpless = Pedal_fbk, Windup_Protection_Disable = 0) Using Pedal_Position_Cmd
Log_Message (Dyn Spd using Pedal Position Cmd PID gains set.)
Log_Message (Output_Speed_Pedal_Control_KP is %%$Output_Speed_Pedal_Control_KP%%.)
Log_Message (Output_Speed_Pedal_Control_KI is %%$Output_Speed_Pedal_Control_KI%%.)
Log_Message (Output_Speed_Pedal_Control_KD is %%$Output_Speed_Pedal_Control_KD%%.)

'107-Output Speed Grade Control 
If $Drive_Cycle_Gain_Tune = 4
	Let $Output_Speed_Grade_Control_KP = $CurrentRunKP
	Let $Output_Speed_Grade_Control_KI = $CurrentRunKI
	Let $Output_Speed_Grade_Control_KD = $CurrentRunKD
Else
	'Gains tuned by MDD 10/30/2019
	' Let $Output_Speed_Grade_Control_KP = -1.0
	' Let $Output_Speed_Grade_Control_KI = -0.001
	' Let $Output_Speed_Grade_Control_KD = 0	
	'Gains tuned by MDD 08/10/2020
	' Let $Output_Speed_Grade_Control_KP = -1.25
	' Let $Output_Speed_Grade_Control_KI = -0.075
	' Let $Output_Speed_Grade_Control_KD = 0
	'Gains tuned by MDD 10/22/2020
	' Let $Output_Speed_Grade_Control_KP = -0.75
	' Let $Output_Speed_Grade_Control_KI = -0.25
	' Let $Output_Speed_Grade_Control_KD = 0
	'Gains tuned by MDD 12/14/2020
	Let $Output_Speed_Grade_Control_KP = -0.5
	Let $Output_Speed_Grade_Control_KI = -0.1
	Let $Output_Speed_Grade_Control_KD = 0
	'Gains tuned by MDD 04/20/2020 on 3.0L Lion V6 Diesel/ 10R80
	Let $Output_Speed_Grade_Control_KP = -0.25
	Let $Output_Speed_Grade_Control_KI = -0.001
	Let $Output_Speed_Grade_Control_KD = 0	
End	
Tune_PID DynSpd (P_Gain = $Output_Speed_Grade_Control_KP, I_Gain = $Output_Speed_Grade_Control_KI, D_Gain = $Output_Speed_Grade_Control_KD, Deadband = 0, Offset = 0, Error_Limit = 100, Max_Cmd = 30, Min_Cmd = -30, Acq_Item_Bumpless = RoadGrade_fbk, Windup_Protection_Disable = 0) Using RoadGrade_Set	
Log_Message (Dyn Spd using RoadGrade PID gains set.)
Log_Message (Output_Speed_Grade_Control_KP is %%$Output_Speed_Grade_Control_KP%%.)
Log_Message (Output_Speed_Grade_Control_KI is %%$Output_Speed_Grade_Control_KI%%.)
Log_Message (Output_Speed_Grade_Control_KD is %%$Output_Speed_Grade_Control_KD%%.)	
	
'108-Vehicle Speed Torque Control
'Gains tuned in 105 - Vehicle Speed Grade Control
	If $Trans_Select = 6
		'10R60/80
		'Gains tuned my MDD 12/11/2020
		Let $Vehicle_Speed_Grade_Control_KP = -2
		Let $Vehicle_Speed_Grade_Control_KI = -0.25
		Let $Vehicle_Speed_Grade_Control_KD = 0	
	Else
		'Gains tuned by MDD 11/06/2019
		Let $Vehicle_Speed_Grade_Control_KP = -3
		Let $Vehicle_Speed_Grade_Control_KI = -0.75
		Let $Vehicle_Speed_Grade_Control_KD = 0
	End
Tune_PID Vehicle_Speed_Feedback (P_Gain = $Vehicle_Speed_Grade_Control_KP, I_Gain = $Vehicle_Speed_Grade_Control_KI, D_Gain = $Vehicle_Speed_Grade_Control_KD, Deadband = 0, Offset = 0, Error_Limit = 100, Max_Cmd = 30, Min_Cmd = -30, Acq_Item_Bumpless = RoadGrade_fbk, Windup_Protection_Disable = 0) Using RoadGrade_Set
Log_Message (Vehicle Speed Feedback using roadgrade PID gains set)
Log_Message (Vehicle_Speed_Grade_Control_KP is %%$Vehicle_Speed_Grade_Control_KP%%.)
Log_Message (Vehicle_Speed_Grade_Control_KI is %%$Vehicle_Speed_Grade_Control_KI%%.)
Log_Message (Vehicle_Speed_Grade_Control_KD is %%$Vehicle_Speed_Grade_Control_KD%%.)	

If $Drive_Cycle_Gain_Tune = 5
	Let $Torque_Control_KP = $CurrentRunKP
	Let $Torque_Control_KI = $CurrentRunKI
	Let $Torque_Control_KD = $CurrentRunKD
Else	
	'Gains tuned by MDD 10/28/2019
	Let $Torque_Control_KP = 0.1
	Let $Torque_Control_KI = 0.075
	Let $Torque_Control_KD = 0
	'Gains tuned by MDD 12/14/2020
	Let $Torque_Control_KP = 0.0075
	Let $Torque_Control_KI = 0.05
	Let $Torque_Control_KD = 0	
End		
Tune_PID SATQ_TQ_IMP_BASE_TRNS (P_Gain = $Torque_Control_KP, I_Gain = $Torque_Control_KI, D_Gain = $Torque_Control_KD, Deadband = 3, Offset = 0, Error_Limit = 200, Max_Cmd = 200, Min_Cmd = 0, Acq_Item_Bumpless = Pedal_fbk, Windup_Protection_Disable = 0) Using Pedal_Position_Cmd			
Log_Message (SATQ_TQ_IMP_BASE_TRNS using Pedal Position Cmd PID gains set)
Log_Message (Torque_Control_KP is %%$Torque_Control_KP%%.)
Log_Message (Torque_Control_KI is %%$Torque_Control_KI%%.)
Log_Message (Torque_Control_KD is %%$Torque_Control_KD%%.)	

'104-Vehicle Speed Pedal Brake Control
If $Drive_Cycle_Gain_Tune = 6
	Let $Brake_Control_KP = 0 - $CurrentRunKP
	Let $Brake_Control_KI = 0 - $CurrentRunKI
	Let $Brake_Control_KD = 0 - $CurrentRunKD
Else	
	'Gains tuned by MDD 11/05/2019
	Let $Brake_Control_KP = -0.75
	Let $Brake_Control_KI = -0.005
	Let $Brake_Control_KD = 0
End
Tune_PID Vehicle_Speed_Feedback (P_Gain = $Brake_Control_KP, I_Gain = $Brake_Control_KI, D_Gain = $Brake_Control_KD, Deadband = 0, Offset = 0, Error_Limit = 200, Max_Cmd = 100, Min_Cmd = 0, Acq_Item_Bumpless = AT_Brake, Windup_Protection_Disable = 0) Using DynoBrake_Set			
Log_Message (Vehicle Speed Feedback using DynoBrake PID gains set.)
Log_Message (Brake_Control_KP is %%$Brake_Control_KP%%.)
Log_Message (Brake_Control_KI is %%$Brake_Control_KI%%.)
Log_Message (Brake_Control_KD is %%$Brake_Control_KD%%.)

'112-TCRPM_NO_BAR Pedal Control
If $Drive_Cycle_Gain_Tune = 7
	Let $TCRPM_NO_BAR_Control_KP = $CurrentRunKP
	Let $TCRPM_NO_BAR_Control_KI = $CurrentRunKI
	Let $TCRPM_NO_BAR_Control_KD = $CurrentRunKD
Else	
	'Gains tuned by MDD 08/15/2020
	Let $TCRPM_NO_BAR_Control_KP = 0.08
	Let $TCRPM_NO_BAR_Control_KI = 0.005
	Let $TCRPM_NO_BAR_Control_KD = 0
End

Tune_PID TCRPM_NO_BAR (P_Gain = $TCRPM_NO_BAR_Control_KP, I_Gain = $TCRPM_NO_BAR_Control_KI, D_Gain = $TCRPM_NO_BAR_Control_KD, Deadband = 0, Offset = 0, Error_Limit = 100, Max_Cmd = 100, Min_Cmd = 0, Acq_Item_Bumpless = Pedal_fbk, Windup_Protection_Disable = 0) Using Pedal_Position_Cmd			
Log_Message (TCRPM_NO_BAR using Pedal PID gains set.)
Log_Message (TCRPM_NO_BAR_Control_KP is %%$TCRPM_NO_BAR_Control_KP%%.)
Log_Message (TCRPM_NO_BAR_Control_KI is %%$TCRPM_NO_BAR_Control_KI%%.)
Log_Message (TCRPM_NO_BAR_Control_KD is %%$TCRPM_NO_BAR_Control_KD%%.)	

'113-TCRPM_NO_BAR Grade Control
If $Drive_Cycle_Gain_Tune = 8
	Let $TCRPM_NO_BAR_Control_KP = $CurrentRunKP
	Let $TCRPM_NO_BAR_Control_KI = $CurrentRunKI
	Let $TCRPM_NO_BAR_Control_KD = $CurrentRunKD
Else	
	'Gains tuned by MDD 08/15/2020
	Let $TCRPM_NO_BAR_Control_KP = -0.75
	Let $TCRPM_NO_BAR_Control_KI = -0.005
	Let $TCRPM_NO_BAR_Control_KD = 0
End

Tune_PID TCRPM_NO_BAR (P_Gain = $TCRPM_NO_BAR_Control_KP, I_Gain = $TCRPM_NO_BAR_Control_KI, D_Gain = $TCRPM_NO_BAR_Control_KD, Deadband = 0, Offset = 0, Error_Limit = 100, Max_Cmd = 30, Min_Cmd = -30, Acq_Item_Bumpless = RoadGrade_fbk, Windup_Protection_Disable = 0) Using RoadGrade_Set			
Log_Message (TCRPM_NO_BAR using RoadGrade PID gains set.)
Log_Message (TCRPM_NO_BAR_Control_KP is %%$TCRPM_NO_BAR_Control_KP%%.)
Log_Message (TCRPM_NO_BAR_Control_KI is %%$TCRPM_NO_BAR_Control_KI%%.)
Log_Message (TCRPM_NO_BAR_Control_KD is %%$TCRPM_NO_BAR_Control_KD%%.)	
Save_Debug_Files
Log_Message (Debug File Saved)
							
End_Sub

'********************************************************************************************
Sub Get_Strategy_Info
'********************************************************************************************
Log_Message (Running Get_Strategy_Info Subroutine)

Let !CommandString = Get_Active_Strategy ,
Screen_Message (Green,Executing %%!CommandString%%...%%New_Line%%%%New_Line%%Getting Strategy Info.)

Set_PCM_Interface (!CommandString,!Status)

Log_Message (PCM get strategy info status is %%!Status%%.)

Let !CommandString = Get_Active_Calibration ,
Screen_Message (Green,Executing %%!CommandString%%...%%New_Line%%%%New_Line%%Getting Calibration Info.)

Set_PCM_Interface (!CommandString,!Status)

Log_Message (PCM get cal info status is %%!Status%%.)

End_Sub
'********************************************************************************************
Sub Test_PCM_Interface_For_Connectivity
'********************************************************************************************
Log_Message (Running Test_PCM_Interface_For_Connectivity Subroutine)

Screen_Message (Green,Executing %%!Test_Message_Header%%...%%New_Line%%%%New_Line%%Testing PCM_Interface {Vision Service} for Connectivity...)
Let !PCM_Interface_CommandString = Ping ,
Let !PCM_Interface_CommandString_For_Messaging = Ping ,
Gosub Send_PCM_Interface_Command

End_Sub

'********************************************************************************************
Sub Send_PCM_Interface_Command
'********************************************************************************************
Log_Message (Running Send_PCM_Interface_Command Subroutine)

Log_Message (Sending PCM_Interface {Vision Service}  Command: %%!PCM_Interface_CommandString_For_Messaging%%...)
Let !PCM_Interface_ErrorString = PCM_Interface {Vision Service} Has Not Responded To Last Command Yet...
If $Desktop_Mode ~= 1
	'Not in desk top mode - send command
	Set_PCM_Interface (!PCM_Interface_CommandString,!PCM_Interface_ErrorString)
Else
	'Desktop mode active - don't send command and set error string to null
	Let !PCM_Interface_ErrorString =
End

'Check For Error...
Select_Case !PCM_Interface_ErrorString
'No Error - Do nothing
	Case =
		Log_Message (PCM_Interface Command Executed Successfully!)
	'Error - Terminate Test
	Case ~=
		Save_Flight_Recorder
		Save_Debug_Files
		Log_Message (Debug File Saved)
		Pause_Off
		'Only terminate test if not already terminating...
		If $Terminate_Test_Flag = 0
			Log_Message (!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!)
			Log_Message (!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!)
			Log_Message (THIS TEST WAS TERMINATED!!!)
			Log_Message (PCM_Interface {Vision Service} Command Failed!!!!!!)
			Log_Message (Failure Details: %%!PCM_Interface_ErrorString%%))
			Log_Message (Please Ensure Vision Service Application Is Running Without Error On Vision PC)
			Log_Message (Please Correct This Issue And Then Restart The Test)
			Log_Message (!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!)
			Log_Message (!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!)
			Let !Failure_Cause = PCM_Interface {Vision Service} Command Failed!
			Gosub Terminate_Test
		Else
			Log_Message (!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!)
			Log_Message (PCM_Interface {Vision Service} Command Failed!!!!!!)
			Log_Message (Failure Details: %%!PCM_Interface_ErrorString%%))
			Log_Message (Please Ensure Vision Service Application Is Running Without Error On Vision PC)
			Log_Message (!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!)
		End
End_Select

End_Sub
'*******************************************************
Sub Create_Recorder
'*******************************************************
Log_Message (Running Create_Recorder Subroutine)

'Count number of channels
Gosub Count_Recorder_Channels

'Send Add_Recorder command to Vision Service
Let !ReturnString =
Let !CommandString = Add_Recorder , !Recorder_Name
Set_PCM_Interface (!CommandString,!ReturnString)

'Initialize index
Let $RecorderIndex = 0

'Start Create_Recorder control loop
Do
	'Increment index
	Let $RecorderIndex = $RecorderIndex + 1
	
	'Set Cell Index from Cell_Offset from Count_Recorder_Channels subroutine
	Let $Cell_Index = $RecorderIndex + $Cell_Offset
	
	'Exit loop when all indices have been completed
	If $RecorderIndex > $RecorderChannelCount Then Goto Done_Adding_Channels:
	
	'Import Channel Name from Test Setup
	Let !Channel_Name =
	Excel (!Channel_Name = Cells ($Cell_Index , 2))
	
	'Import update rate from Test Setup
    Let !Rate =
	Excel (!Rate = Cells ($Cell_Index , 3))
	
	'Set recorder channel name and rate
	Let !RecorderChannels ($RecorderIndex , 1) = %%!Channel_Name%%
    Let !RecorderChannels ($RecorderIndex , 2) = %%!Rate%%

	'Initialize command and return string
	Let !CommandString =
	Let !ReturnString =

	'Set command string and send command to Vision Service
	Let !CommandString = Add_Recorder_Channel , !Recorder_Name , !Channel_Name , !Rate
    Set_PCM_Interface (!CommandString,!ReturnString)
Loop

Done_Adding_Channels:

End_Sub
'*******************************************************
Sub Count_Recorder_Channels
'*******************************************************
Log_Message (Running Count_Recorder_Channels Subroutine)

'Open Excel Test Setup to Recorder worksheet
Excel (Workbook = Test_Setup)
Excel (Worksheet = Recorder)
Excel (Visible = False)

'Set cell offset from channel name to update rate column
Let $Cell_Offset = 3

'Initialize recorder index
Let $RecorderIndex = 0

'Set maximum number of channels to 100
Let $RecorderLength = 100

'Initialize recorder channel count
Let $RecorderChannelCount = 0

'Start recorder count control loop
Do
	'Increment recorder index
	Let $RecorderIndex = $RecorderIndex + 1
	'Calculate cell index
	Let $Cell_Index = $RecorderIndex + $Cell_Offset
	'Exit loop when all indices have been completed
	If $RecorderIndex > $RecorderLength Then Goto Done_Counting_Channels:
	'Import recorder channel name from Test Setup
	Excel (!RecorderChannelName = Cells ($Cell_Index , 2))
	'If cell is not empty, increment channel count
	If !RecorderChannelName ~=
		Let $RecorderChannelCount = $RecorderChannelCount + 1
	End
Loop

Done_Counting_Channels:

'Dimension recorder channel matrix
Let !RecorderChannels =
Dim !RecorderChannels ($RecorderChannelCount,2)

Save_Variables

End_Sub

'******************************************************
Sub Restart_Check
'******************************************************
Log_Message (Checking Restart Status)

'If Test Is New (Not A Continuation Of A Test Then Do The Following:)

'Determine restart status
Let $Test_Restart_Status = Restart_Flag

'Delete if test-restart doesn't require this piece of code
'If current testpoint is calculated as negative, set current testpoint to zero
' If $Current_Testpoint < 0
	' Let $Current_Testpoint = 0
' End

'If brand-new test, initialize testpoints and flags
If $Test_Restart_Status = 0
	Let $Current_Testpoint = 0
	Let $Skipped_Point_Flag = 0
	Let $TFT_Data_Index = 2
	Let $Error_Summary_Index = 1
Else
	'If test is a continuation, decrement the testpoint by one (testpoint index will be re-incremented in the main loop)
	If $Current_Point_Running = 1
		Let $Current_Testpoint = $Current_Testpoint - 2
	Else
		Let $Current_Testpoint = $Current_Testpoint - 1
	End
	Log_Message (Restart Check. Current_Testpoint is %%$Current_Testpoint,0D%% of %%$Total_Testpoints%%.)
End

'If current testpoint is calculated as negative, set current testpoint to zero
If $Current_Testpoint < 0
	Let $Current_Testpoint = 0
End

'Initialize test flags
Let $Warmup_Flag = 0
Let $Warmed_Up_Flag = 0
Let $Warmup_Failed_Flag = 0
Let $Cooldown_Flag = 0
Let $Cooldown_Fail_Flag = 0
Let $Stop_And_Soak_Flag = 0
Let $PCM_Sync_Failed_Flag = 0
Let $ECM_Sync_Failed_Flag = 0
Let $TransCase_Out_High_Flag = 0

'Update temperature setpoint matrix for completed testpoints
'Initialize index
Let $TFT_Matrix_Restart_Index = 0

'Start temp matrix restart control loop
Do
	'Increment index
	Let $TFT_Matrix_Restart_Index = $TFT_Matrix_Restart_Index + 1
	'Extract TFT setpoint from TestMatrix
	Let $TestMatrix_TFT = $TestMatrix ($TFT_Matrix_Restart_Index , 1)
	'Navigate to temp restart subroutine
	Gosub TFT_Matrix_Restart
	'Exit loop when all testpoint indices have been completed
	If $TFT_Matrix_Restart_Index = $Total_Testpoints Then Goto TRAM_Set:
Loop

TRAM_Set:

'If test was shut down prematurely, check TRAM_Set flag, and reset PCM parameters if flag has been set
If $TRAM_Set = 1
	Log_Message (TRAM variables from a previous test may not have been returned to base. Resetting variables.)
	Select_Case $Trans_Select
		Case = 2
			'8F24
			Gosub TRAM_Reset_8F
		Case = 3
			'10R140
			Gosub TRAM_Reset_10R	
		Case = 4
			'8F57
			Gosub TRAM_Reset_8F
		Case = 6
			'10R60/80
			Gosub TRAM_Reset_10R
		Case = 7
			'8F35
	 		Gosub TRAM_Reset_8F
		Case = 8
			'6R80
	 		Gosub TRAM_Reset_6R
	End_Select
End

End_Sub

'*******************************************************
Sub TFT_Matrix_Restart
'*******************************************************
'Log_Message (Running TFT_Matrix_Restart Subroutine)

'Check point status of TestMatrix index
If Point_Status ($TFT_Matrix_Restart_Index) = Done
	'If testpoint is "Done", update TempQuickMatrix
	Goto TFT_Matrix_Update:
Else
	If Point_Status ($TFT_Matrix_Restart_Index) = Failed
		'If point status of TestMatrix index is "Failed", update TempQuickMatrix
		Goto TFT_Matrix_Update:
	Else
		'If testpoint is not Done or Failed, skip TempQuickMatrix update
		Goto Done_TFT_Matrix_Restart:
	End
End

TFT_Matrix_Update:

'Initialize index
Let $TempQuickMatrix_Index = 0

'Start TempQuickMatrix restart control loop
Do
	'Increment index
	Let $TempQuickMatrix_Index = $TempQuickMatrix_Index + 1
	'Exit loop when all TFT setpoints in TempQuickMatrix have been completed
	If $TempQuickMatrix_Index > $TempQuickMatrix_Rows Then Goto Done_TFT_Matrix_Restart:
	'Extract TFT setpoint from TempQuickMatrix
	Let $QuickMatrix_TFT = $TempQuickMatrix ($TempQuickMatrix_Index , 1)
	'Compare TFT setpoint from TestMatrix to TempQuickMatrix
	If $QuickMatrix_TFT = $TestMatrix_TFT
		'If setpoints match, extract the setpoint count from TempQuickMatrix
		Let $TFTs_Remaining = $TempQuickMatrix ($TempQuickMatrix_Index , 2)
		'Decrement setpoint count
		Let $TFTs_Remaining = $TFTs_Remaining - 1
		'Replace setpoint count with updated count
		Let $TempQuickMatrix ($TempQuickMatrix_Index , 2) = $TFTs_Remaining
		Log_Message (TempQuickMatrix %%$QuickMatrix_TFT%%degC points remaining is %%$TFTs_Remaining%%.)
	End
Loop

Done_TFT_Matrix_Restart:
End_Sub

'******************************************************
Sub Clutch_Labels
'******************************************************
Log_Message (Running Clutch_Labels Subroutine)
'Create labels in the Setpoint Table to assign Element Name based on the Element Number

'Initialize label counter index
Let $Label_Index = 0

Do
	'Increment index
	Let $Label_Index = $Label_Index + 1
	If $Label_Index > $Total_Testpoints Then Goto Finished_Clutch_Labels:
	'Extract Element from setpoint table
	Let $PointDummy = $Setpoint_Table ($Label_Index , 3)
	'Determine element string from Element Number
	Select_Case $PointDummy
		Case = 1
			'Clutch A
			Let !Clutch = ELE_A
		Case = 2
			'Clutch B
			Let !Clutch = ELE_B
		Case = 3
			'Clutch C
			Let !Clutch = ELE_C
		Case = 4
			'Clutch D
			Let !Clutch = ELE_D
		Case = 5
			'Clutch E
			Let !Clutch = ELE_E
		Case = 6
			'Clutch F
			Let !Clutch = ELE_F
	End_Select
	'Apply Element string name to setpoint table
	Testpoint_Setting ($Label_Index,4) = !Clutch
Loop
Finished_Clutch_Labels:

End_Sub

'******************************************************
Sub 6R_VFS_Labels
'******************************************************
Log_Message (Running 6R_VFS_Labels Subroutine)
'Creates labels in the Setpoint Table to assign VFS Name based on the VFS Number

'Initialize index
Let $Label_Index = 0

'Start 6R VFS label control loop
Do
	'Increment index
	Let $Label_Index = $Label_Index + 1
	'Exit loop when all indices have been completed
	If $Label_Index > $Total_Testpoints Then Goto Finished_6R_VFS_Labels:
	'Extract Element number from setpoint table
	Let $PointDummy = $Setpoint_Table ($Label_Index , 3)
	'Determine solenoid string name
	Select_Case $PointDummy
		Case = 1
			'Line Pressure
			Let !VFS = VFS0-LPC
		Case = 2
			'Clutch A - VFS1
			Let !VFS = VFS1
		Case = 3
			'Clutch B - VFS2
			Let !VFS = VFS2
		Case = 4
			'Clutch C - VFS3
			Let !VFS = VFS3
		Case = 5
			'Clutch D - VFS4
			Let !VFS = VFS4
		Case = 6
			'Clutch E - VFS5
			Let !VFS = VFS5
		Case = 8
			'Torque Converter Clutch - CPC
			Let !VFS = VFS7-CPC
	End_Select
	'Apply VFS string label to setpoint table
	Testpoint_Setting ($Label_Index,4) = !VFS
Loop

Finished_6R_VFS_Labels:
End_Sub

'******************************************************
Sub 8F_VFS_Labels
'******************************************************
Log_Message (Running 8F_VFS_Labels Subroutine)
'Creates labels in the Setpoint Table to assign VFS Name based on the VFS Number

'Initialize index
Let $Label_Index = 0

'Start 8F VFS label control loop
Do
	'Increment index
	Let $Label_Index = $Label_Index + 1
	'Exit loop when all indices have been completed
	If $Label_Index > $Total_Testpoints Then Goto Finished_8F_VFS_Labels:
	'Extract Element number from setpoint table
	Let $PointDummy = $Setpoint_Table ($Label_Index , 3)
	'Determine solenoid string name
	Select_Case $PointDummy
		Case = 1
			'Line Pressure
			Let !VFS = VFS0-LPC
		Case = 2
			'Clutch A - VFS1
			Let !VFS = VFS1
		Case = 3
			'Clutch B - VFS2
			Let !VFS = VFS2
		Case = 4
			'Clutch C - VFS3
			Let !VFS = VFS3
		Case = 5
			'Clutch D - VFS4
			Let !VFS = VFS4
		Case = 6
			'Clutch E - VFS5
			Let !VFS = VFS5
		Case = 7
			'Clutch F - VFS6
			Let !VFS = VFS6
		Case = 8
			'Torque Converter Clutch - CPC
			Let !VFS = VFS7-CPC
	End_Select
	'Apply VFS string label to setpoint table
	Testpoint_Setting ($Label_Index,4) = !VFS
Loop

Finished_8F_VFS_Labels:
End_Sub
'******************************************************
Sub 10R_VFS_Labels
'******************************************************
Log_Message (Running 10R_VFS_Labels Subroutine)

'Creates labels in the Setpoint Table to assign VFS Name based on the VFS Number

'Initialize index
Let $Label_Index = 0

'Start 10R vfs label control loop
Do
	'Increment index
	Let $Label_Index = $Label_Index + 1
	'Exit loop when all indices have been completed
	If $Label_Index > $Total_Testpoints Then Goto Finished_10R_VFS_Labels:
	'Extract element number from setpoint table
	Let $PointDummy = $Setpoint_Table ($Label_Index , 3)
	'Determine solenoid string name based on element number
	Select_Case $PointDummy
		Case = 1
			'Line Pressure - LPC
			Let !VFS = VFS0-LPC
		Case = 2
			'Clutch A - VFS1
			Let !VFS = VFS1
		Case = 3
			'Clutch B - VFS2
			Let !VFS = VFS2
		Case = 4
			'Clutcn C - VFS3
			Let !VFS = VFS3
		Case = 5
			'Clutch D - VFS4
			Let !VFS = VFS4
		Case = 6
			'Clutch E - VFS5
			Let !VFS = VFS5
		Case = 7
			'Clutch F - VFS6
			Let !VFS = VFS6
		Case = 8
			'Torque Converter Clutch - CPC
			Let !VFS = VFS7-CPC
	End_Select
	'Apply element string to setpoint table
	Testpoint_Setting ($Label_Index,4) = !VFS
		
Loop
Finished_10R_VFS_Labels:
End_Sub

'*******************************************************
Sub Max_Pressure_Finder
'*******************************************************
Log_Message (Running Max_Pressure_Finder Subroutine)
'Common subroutine to set maximum pressure command 

Let $MaxPressure = 2000

End_Sub
'*******************************************************
Sub Record_Start
'*******************************************************
Log_Message (Running Record_Start Subroutine)
'This subroutine will start the recorder

'Log File Name
Log_Message (Starting recorder for file %%!File_Name%%)

'Establish Vision Service command string
Let !CommandString = Start_Recorder , !Recorder_Name , !File_Name

'Send command to Vision Service
Set_PCM_Interface (!CommandString,!ReturnString)

'Set sampling started flag
Let $Sampling_Started = 1

End_Sub

'*******************************************************
Sub Record_End
'*******************************************************
Log_Message (Running Record_End Subroutine)
'This subroutine will end the recorder

'Log end of recording for File Name
Log_Message (Ending Recording for %%!File_Name%%.)

'Establish command string for Vision Service
Let !CommandString = Stop_Recorder , !Recorder_Name , !File_Name

'Send command to Vision Service
Set_PCM_Interface (!CommandString,!ReturnString)

Screen_Message (Green, %%New_Line%%Recording Ended.  Preparing for next testpoint.)

'Reset sampling started flag
Let $Sampling_Started = 0
Save_Variables

'End of Record_End subroutine
End_Sub

'*******************************************************
Sub Start_Next_Point
'*******************************************************

'Establish testpoint start time
Let $Testpoint_Start_Time = Timer
Let !Testpoint_Start_Time = %%Time%%
Log_Message (*** Start Test Point %%$Current_Testpoint%% of %%$Total_Testpoints%% at %%!Testpoint_Start_Time%%.)
	
'End of Start_Next_Point subroutine	
End_Sub

'*******************************************************
Sub End_Test_Point
'*******************************************************

'Record point status
Gosub Record_Point_Status

'Establish testpoint end time
Let $Testpoint_End_Time = Timer
Let !End_Time = %%Time%%

'Calculate elapsed testpoint time
Let $Elapsed_Testpoint_Time = $Testpoint_End_Time - $Testpoint_Start_Time
Log_Message (*** End Test Point %%$Current_Testpoint%% of %%$Total_Testpoints%% at %%!End_Time%%.)
Log_Message (Total testpoint time is %%$Elapsed_Testpoint_Time,0D%% seconds.)
	
'End of End_Test_Point subroutine		
End_Sub

'*******************************************************
Sub Record_Point_Status
'*******************************************************

'Log point status

'Ignore
If Point_Status (Testpoint) = Ignore
	Log_Message ( Point Status = Ignore.)
	Goto Exit_Record_Point_Status:
End
'Done
If Point_Status (Testpoint) = Done
	Log_Message ( Point Status = Done.)
	Goto Exit_Record_Point_Status:
End
'Failed
If Point_Status (Testpoint) = Failed
	Log_Message ( Point Status = Failed.)
	Goto Exit_Record_Point_Status:
End
'Run
If Point_Status (Testpoint) = Run
	Log_Message ( Point Status = Run.)
End
Exit_Record_Point_Status:

End_Sub

'*******************************************************
Sub Capture_Transducer_Zero
'*******************************************************
'This subroutine turns off monitors, shuts off the engine, records a 2 second data file, and restarts the engine.

'Turn off engine speed monitor
Monitor_Off Engine_Running
Log_Message (Stopping Engine_Running monitor. Capture_Transducer_Zero.)

Screen_Message (Green,%%New_Line%%Momentarily shutting down engine to record zero-level of pressure transducers.)
Log_Message (Capturing Transducer Values with Engine Not Started)

'Turn off ignition
Set IGNITION_CMD (0,0)
Log_Message (Ignition turned off. CaptureZero)

'Wait
Wait (20)

'Turn on ignition
Set IGNITION_CMD (1,0)
Log_Message (Ignition On. CaptureZero)

'Turn on injectors in non-HIL dynos
If $Standard_Cell = 1
	Set EMCON_INJECTOR_CMD (1,0)
	Log_Message (Injector On. CaptureZero)
End

'Set File Name
Let !File_Name = %%!PT_Name%%_RecordZeros_Start_%%$CurrentRunTemp,0D%%C_%%Date%%_%%Time%%.rec

'Start Vision Recorder
Gosub Record_Start
Wait (3)

'Start Engine
Gosub Start_Engine

'Wait 10 seconds
Wait (10)

'End Vision Recorder
Gosub Record_End

End_Sub

'*******************************************************
Sub Set_Speed_Load
'*******************************************************
Log_Message (Starting Set_Speed_Load subroutine)

'Hardcoded switch to record set speed load file
Let $Record_Set_Speed_Load_On = 0

If $Record_Set_Speed_Load_On = 1
	'Set File Name
	Let !File_Name = %%!PT_Name%%_Set_Speed_Load_%%Date%%_%%Time%%.rec

	'Start Vision Recorder
	Gosub Record_Start
	
	Wait (3)
End	

'Set EMCON mode in non-HIL dyno	
If $Standard_Cell = 1
	'Speed/Throttle
	Let $Desired_Emcon_Mode = 1
	Gosub Set_Emcon_Mode
End

Wait (2)

'Set torque, turbine, and holding for active cooling
If $Cooldown_Flag = 1
	'Set input torque setpoint
	Let $Torque_Setpoint = 20
	'Set turbine speed setpoint
	Let $Turbine_Setpoint = 1200
	'Set holding gear
	Select_Case $Trans_Select 
		Case = 1
			'6F35
			Let $Hold_Gear = 4
		Case = 2
			'8F24
			Let $Hold_Gear = 7
		Case = 3
			'10R140
			Let $Hold_Gear = 7
		Case = 4
			'8F57
			Let $Hold_Gear = 7
		Case = 5
			'DPS6
			Let $Hold_Gear = 4
		Case = 6
			'10R60/80
			Let $Hold_Gear = 7
		Case = 7
			'8F35
			Let $Hold_Gear = 7
		Case = 8
			'6R80
			Let $Hold_Gear = 4
	End_Select
Else
	'All other Speed/Load procedures
	'Set torque setpoint
	Let $Torque_Setpoint = $CurrentRunTorque
	'Set turbine speed setpoint
	Let $Turbine_Setpoint = $CurrentRunTurbine
	'Set holding gear
	Let $Hold_Gear = $CurrentRunGear
End

'Set torque, turbine speed, and holding gear for active warm-up
If $Warmup_Flag = 1
	'Set torque setpoint
	Select_Case $CurrentRunTemp
		Case < 70
			Let $Torque_Setpoint = 50
		Case > 70
			If $CurrentRunTemp < 60
				Let $Torque_Setpoint = 115
			Else
				Let $Torque_Setpoint = 140
			End
	End_Select		
	'Set turbine setpoint
	Let $Turbine_Setpoint = 2500
	'Set holding gear
	Let $Hold_Gear = 3
End

'Set torque, turbine speed, and holding gear for catalyst cooldown procedure	
If $Cat_Temp_High_Flag = 1
	'Set torque setpoint
	Let $Torque_Setpoint = 20
	'Set turbine speeds
	Let $Turbine_Setpoint = 1200
	'Set holding gear
	Select_Case $Trans_Select 
		Case = 1
			'6F35
			Let $Hold_Gear = 4
		Case = 2
			'8F24
			Let $Hold_Gear = 6
		Case = 3
			'10R60/80
			Let $Hold_Gear = 7
		Case = 4
			'6R140
			Let $Hold_Gear = 4
		Case = 5
			'DPS6
			Let $Hold_Gear = 4
		Case = 6
			'10R60/80
			Let $Hold_Gear = 7
		Case = 7
			'8F35
			Let $Hold_Gear = 7
		Case = 8
			'6R80
			Let $Hold_Gear = 4
	End_Select
End

'Set torque, turbine speed, and holding gear for TransCase_Out cooldown procedure	
If $TransCase_Out_High_Flag = 1
	'Set torque setpoint
	Let $Torque_Setpoint = 20
	'Set turbine speeds
	Let $CurrentRunTurbine = 1200
	'Set holding gear
	Select_Case $Trans_Select 
		Case = 1
			'6F35
			Let $Hold_Gear = 4
		Case = 2
			'8F24
			Let $Hold_Gear = 6
		Case = 3
			'10R60/80
			Let $Hold_Gear = 7
		Case = 4
			'6R140
			Let $Hold_Gear = 4
		Case = 5
			'DPS6
			Let $Hold_Gear = 4
		Case = 6
			'10R60/80
			Let $Hold_Gear = 7
		Case = 7
			'8F35
			Let $Hold_Gear = 7
		Case = 8
			'6R80
			Let $Hold_Gear = 4
	End_Select
End
'Determine gear ratio of holding gear	
Let $Gr_Ratio = $Gear_Ratios ($Hold_Gear,1)

'Determine final drive ratio
Select_Case $Trans_Select
	Case = 1
		'6F35/6F55
		Let $Final_Drive = AXLE_RATIO
	Case = 2
		'8F24
		Let $Final_Drive = AXLE_RATIO
	Case = 3
		'10R140
		Let $Final_Drive = 1
	Case = 4
		'8F57
		Let $Final_Drive = AXLE_RATIO
	Case = 5
		'DPS6
		Let $Final_Drive = 1
	Case = 6
		'10R80E
		Let $Final_Drive = 1
	Case = 7
		'8F35
		Let $Final_Drive = AXLE_RATIO
	Case = 8
		'6R80
		Let $Final_Drive = 1
End_Select  
Log_Message (Final_Drive is %%$Final_Drive,2D%%)
'Calculate input/output ratio    
Let $Final_Ratio = $Gr_Ratio * $Final_Drive
Log_Message (Final_Ratio is %%$Final_Ratio,2D%%)
'Calculate output speed setpoint
Let $Output_Speed_Setpoint = $Turbine_Setpoint / $Final_Ratio
Log_Message (Output_Speed_Setpoint is %%$Output_Speed_Setpoint,0D%% rpm in gear %%$Hold_Gear%%.)

Screen_Message (Green, %%New_Line%%%%New_Line%%Setting Gear to %%$Hold_Gear%%.)

'Set TRAM_Set flag to reset PCM parameters if test shuts down
Let $TRAM_Set = 1
Log_Message (TRAM_Set set to 1)

'Release Brake if applied
Set DynoBrake_Set (0,0)

'Apply holding gear and turn on gear switch
Set RMSC_GR_TYP_CMD_S ($Hold_Gear,0)
Set RMSC_D_GR_TYP_SW_S (1,0)

Wait (3)

'Apply output speed setpoint for standard cell
If $Standard_Cell = 1	
	Set DynoSpeed_set (50 , 10)
End

'Set output speed torque PID control, apply speed and torque setpoints for HIL dyno
If $HIL_Flag = 1
	'Apply output speed and impeller torque setpoints
	If $Torque_Setpoint > 0
		Set DynSpd ($Output_Speed_Setpoint , 10) Using RoadGrade_Set
		Set SATQ_TQ_IMP_BASE_TRNS ($Torque_Setpoint,10) Using Pedal_Position_Cmd
	Else
		Set DynSpd ($Output_Speed_Setpoint , 10) Using Pedal_Position_Cmd
	End	
	'Apply Wait
	Wait (10)
End	

'Initialize timer
Let $Elapsed_GearChange_Time = 0
Let $GearChange_StartTime = Timer
Let $GearChange_Time_Limit = 10

'Start gear change control loop
Do
	'Update timer
	Let $Elapsed_GearChange_Time = Timer - $GearChange_StartTime
	'Capture gear command
	Let $RMIP_GR_CMD = RMIP_GR_CMD
	'Exit loop when holding gear is reached
	If $RMIP_GR_CMD = $Hold_Gear Then Goto Set_Torque:
	'Set flag and exit gear change loop if time out occurs
	If $Elapsed_GearChange_Time > $GearChange_Time_Limit
		'Set Flag
		Let $Incorrect_Gear_Flag = 1
		'Skip torque setting
		Goto End_Engine_Torque_Set:
	End
Loop

Set_Torque:	
Log_Message (Set_Speed_Load. Gear set to %%$RMIP_GR_CMD%%.  Gear should be %%$Hold_Gear%%. Final_Drive is %%$Final_Drive,2D%%. Output_Speed_Setpoint is %%$Output_Speed_Setpoint,0D%%.)	

If $HIL_Flag = 1 Then Goto End_Engine_Torque_Set:

'Close accelerator pedal
Set Pedal_Position_Cmd (0 , 0)
Log_Message (Pedal_Position_Cmd set to 0%.)

If $Standard_Cell = 1
	'Apply output speed setpoint
	Set DynoSpeed_set ($Output_Speed_Setpoint , 5)
	Wait (10)
End

'Lock torque converter for active cooling procedure
If $Cooldown_Flag = 1
	Gosub Lock_Converter
End

'Unlock torque converter for active warm-up procedure	
If $Warmup_Flag = 1
	Gosub Open_Converter
End

'Initialize pedal setpoint
Let $Pedal_Setpoint = 0

'Close pedal for negative torque setpoints
If $Torque_Setpoint < 0
	'Close accelerator pedal
	Set Pedal_Position_Cmd (0 , 0)
	Log_Message (Pedal_Position_Cmd set to 0%.)
	Goto Engine_Torque_Set:
End

Check_Torque:

'Calculate torque acceptance threshold
Let $Low_Torque_Threshold = $Torque_Setpoint - 5
Let $High_Torque_Threshold = $Torque_Setpoint + 5

'Start torque setting control loop
Do
	'Apply accelerator pedal setpoint
	Set Pedal_Position_Cmd ($Pedal_Setpoint , 0)
	Log_Message (Pedal_Position_Cmd set to %%$Pedal_Setpoint%%%.)
	Wait (1)
	'Capture engine speed
	Let $TCRPM_NE_BAR = TCRPM_NE_BAR
	'Capture output speed
	Let $TCRPM_NO_BAR = TCRPM_NO_BAR
	'If engine stalls, set flag and exit loop
	If $TCRPM_NE_BAR < 100
		Let $Engine_Stalled_Flag = 1
		Goto End_Engine_Torque_Set:
	End
	'Capture gear command
	Let $RMIP_GR_CMD = RMIP_GR_CMD
	'Capture impeller torque
	Let $SATQ_TQ_IMP_BASE_TRNS = SATQ_TQ_IMP_BASE_TRNS
	'Increase proportional accelerator pedal setpoint
	If $SATQ_TQ_IMP_BASE_TRNS < $Low_Torque_Threshold
		'Increase pedal if below threshold
		Let $Pedal_Setpoint = $Pedal_Setpoint + 0.5
	Else
		If $SATQ_TQ_IMP_BASE_TRN > $High_Torque_Threshold
			'Decrease pedal if above threshold
			Let $Pedal_Setpoint = $Pedal_Setpoint - 0.5
		Else
			'If within range, exit torque setting control loop
			Goto Engine_Torque_Set:
		End
	End
	Screen_Message (Green,%%New_Line%%%%New_Line%%Setting engine torque to %%$Torque_Setpoint%% Nm.)
	'If calculated accelerator pedal setpoint reaches maximum limit, set flag and exit torque setting control loop
	If $Pedal_Setpoint > 100
		'Set pedal maxed flag
		Let $Pedal_Maxed_Flag = 1
		Goto End_Engine_Torque_Set:
	End
Loop

Log_Message (Set_Speed_Load. Pedal set to %%$Pedal_Setpoint%% for torque setting of %%$Torque_Setpoint,0D%% Nm.)

Engine_Torque_Set:

Wait (2)

' Screen_Message (Yellow,Check speed and torque settings. Torque_Setpoint is %%$Torque_Setpoint,0D%% Nm at %%$Output_Speed_Setpoint,0D%%rpm output/ CurrentRunTurbine %%$CurrentRunTurbine,0D%% rpm.)
' Pause

'Check that average turbine speed is within 5% of setpoint
'Calculate turbine speed check threshold
Let $High_Turbine_Check_Threshold = $Turbine_Setpoint * 1.05
Let $Low_Turbine_Check_Threshold = $Turbine_Setpoint * .95

'Calculate turbine speed threshold for turbine speed monitor
Let $Turbine_Threshold = $Turbine_Setpoint - 20

'Capture average turbine speeds
Let $TCRPM_NT_BAR_AVE2 = TCRPM_NT_BAR_AVE2

'If turbine speed is above high threshold, terminate test
If $TCRPM_NT_BAR_AVE2 > $High_Turbine_Check_Threshold
	Log_Message (Turbine Speed above high threshold. Turbine Speed setpoint = %%$Turbine_Setpoint%%. Measured Turbine Speed was %%$TCRPM_NT_BAR_AVE2,0D%%.)
	Log_Message (******************************************************)
	Log_Message (Terminating test.)
	Log_Message (******************************************************)
	'Send text message
	Let !Text_Message = Turbine Speed above high threshold. Turbine Speed setpoint = %%$Turbine_Setpoint%%. Measured Turbine Speed was %%$TCRPM_NT_BAR_AVE2,0D%%. Terminating Test.
	Gosub Send_Text_Message
	'Terminate test
	Gosub Terminate_Test
End

'If turbine speed is below low threshold, terminate test
If $TCRPM_NT_BAR_AVE2 < $Low_Turbine_Check_Threshold
	Log_Message (Turbine Speed below low threshold. Turbine Speed setpoint = %%$Turbine_Setpoint%%. Measured Turbine Speed was %%$TCRPM_NT_BAR_AVE2,0D%%.)
	Log_Message (******************************************************)
	Log_Message (Terminating test.)
	Log_Message (******************************************************)
	'Send text message
	Let !Text_Message = Turbine Speed below low threshold. Turbine Speed setpoint = %%$Turbine_Setpoint%%. Measured Turbine Speed was %%$TCRPM_NT_BAR_AVE2,0D%%. Terminating Test.
	Gosub Send_Text_Message	
	'Terminate test
	Gosub Terminate_Test
End

If $Record_Set_Speed_Load_On = 1
	Gosub Record_End
End

End_Engine_Torque_Set:

'If flags have been set, take actions:

'If gear setting times out:
If $Incorrect_Gear_Flag = 1
	'Reset flag
	Let $Incorrect_Gear_Flag = 0
	'End Vision Recorder if enabled
	If $Record_Set_Speed_Load_On = 1
		Gosub Record_End
	End
	'Save Flight Recorder File
	Save_Flight_Recorder
	Log_Message (Gear not correctly set.  RMIP_GR_CMD is %%$RMIP_GR_CMD%%.  Gear should be %%$Hold_Gear%%)
	Log_Message (******************************************************)
	Log_Message (Terminating test.)
	Log_Message (******************************************************)
	Screen_Message (Red, Gear not correctly set.  Terminating Test.)
	'Send text message
	Let !Text_Message = Set.Speed.Load. Gear not correctly set.  RMIP_GR_CMD is %%$RMIP_GR_CMD%%.  Gear should be %%$Hold_Gear%%. Terminating test.
	Gosub Send_Text_Message
	'Terminate test
	Gosub Terminate_Test
End

'If engine stalls during torque setting:
If $Engine_Stalled_Flag = 1
	'Reset flag
	Let $Engine_Stalled_Flag = 0
	'End Vision recorder if enabled
	If $Record_Set_Speed_Load_On = 1
		Gosub Record_End
	End	
	Log_Message (Engine stalled setting torque. Terminating test.)
	Log_Message (******************************************************)
	Log_Message (Terminating test.)
	Log_Message (******************************************************)
	Screen_Message (Red, Engine stalled setting torque. Terminating test.)
	'Send text message
	Let !Text_Message = Engine Stalled setting torque. Terminating Test.
	Gosub Send_Text_Message
	'Terminate test
	Gosub Terminate_Test
End

'If calculated pedal setpoint reaches maximum limit without achieving torque setpoint:
If $Pedal_Maxed_Flag = 1
	'Reset Flag
	Let $Pedal_Maxed_Flag = 0
	'End Vision recorder if enabled
	If $Record_Set_Speed_Load_On = 1
		Gosub Record_End
	End	
	Log_Message (Maximum Pedal reached. SATQ_TQ_IMP_BASE_TRNS is %%$SATQ_TQ_IMP_BASE_TRNS,0D%% Nm. TCRPM_NE_BAR is %%$TCRPM_NE_BAR%% rpm. TCRPM_NO_BAR is %%$TCRPM_NO_BAR%% rpm)
	Log_Message (Low_Torque_Threshold is %%$Low_Torque_Threshold%% Nm. High_Torque_Threshold is %%$High_Torque_Threshold%% Nm for a Torque_Setpoint of %%$Torque_Setpoint%%Nm. RMIP_GR_CMD is %%$RMIP_GR_CMD%%.)
	Screen_Message (Red, Maximum Pedal reached.  Terminating test.)
	Log_Message (******************************************************)
	Log_Message (Terminating test.)
	Log_Message (******************************************************)
	'Send text message
	Let !Text_Message = Maximum Pedal Reached. Terminating Test.
	Gosub Send_Text_Message
	'Terminate test
	Gosub Terminate_Test	
End
	
End_Sub
'*******************************************************
Sub Set_Engine_Speed
'*******************************************************
Log_Message (Starting set_engine_speed subroutine)
Screen_Message (Attempting to set engine speed to %%$Desired_RPM%% rpm.)

Goto Skip_Engine_Speed_Set:

'Initialize wait counter
Let $DSDRPM_Wait_Counter = 0

Reset_Engine_Speed:

'Based on hardcoded Engine_Strategy from Pretest routine, apply desired engine speed setpoint
Select_Case $Engine_Strategy
	Case = 1
		'New Gas
		Set DSDN_NE_TST ($Desired_RPM,0)
		Set DSDN_SW_TST (1,0)
		Set_Function_Table FNDSDN_NE_MAX_DRV = 2040
		Set_Activate
	Case = 2
		'Old Gas
		Set DSDRPM_TST_SW (1,0)
		Set DSDRPM_TST_RPM ($Desired_RPM,0)	
	Case = 3
		'Diesel
		'Set HLSDem_nSetPLoGear_MAP higher than desired engine speed
		Let $HLSDem_nSetPLoGear_MAP_Speed_Setting = $Desired_RPM + 100
		' Set_Function_Table HLSDem_nSetPLoGear_MAP = $HLSDem_nSetPLoGear_MAP_Speed_Setting
		' Set_Activate
		'Set HLSDem_nSetPLoDia_C at desired engine speed
		Set HLSDem_nSetPLoDia_C ($Desired_RPM,0)
		'Set HLSDem_nSetPLoGearClnt_MAP at desired engine speed
		' Set_Function_Table HLSDem_nSetPLoGearClnt_MAP = $Desired_RPM
		' Set_Activate
End_Select

Continue_DSDRPM_Wait:

'Initialize set engine speed timer
Let $Elapsed_Set_Engine_Speed_Time = 0

'Start set engine speed timer
Let $Start_Set_Engine_Speed_Time = Timer

'Start set engine speed control loop
Do
	'Update timer
	Let $Elapsed_Set_Engine_Speed_Time = Timer - $Start_Set_Engine_Speed_Time
	'Capture Desired RPM value
	Let $DSDRPM = DSDRPM
	'If Desired RPM value matches setpoint, exit loop
	If $DSDRPM = $Desired_RPM Then Goto Engine_Speed_Set:
	'If timer times out, set flag and exit loop if wait counter exceeds limit
	If $Elapsed_Set_Engine_Speed_Time > 10
		Log_Message (DSDRPM does not match Desired Engine Speed. Desired_RPM is %%$Desired_RPM%%.  DSDRPM is %%$DSDRPM,0D%%.  Check ECM connection)
		'Increment counter
		Let $DSDRPM_Wait_Counter = $DSDRPM_Wait_Counter + 1
		'Set flag if wait counter exceeds limit
		If $DSDRPM_Wait_Counter > 2
			Let $Engine_Speed_Not_Matched_Flag = 1
			Goto End_Engine_Speed_Set:
		Else
			'Set engine speed setpoint again
			Goto Reset_Engine_Speed:
		End
		Goto Continue_DSDRPM_Wait:
	End
	Wait (1)
Loop

Engine_Speed_Set:

Log_Message (Engine speed target of %%$Desired_RPM%% rpm is at %%$TCRPM_NE_BAR_AVE2,2D%%.)

End_Engine_Speed_Set:

'If engine speed not matched flag is set, reset flag, and terminate test
If $Engine_Speed_Not_Matched_Flag = 1
	Let $Engine_Speed_Not_Matched_Flag = 0
	Log_Message (Set.Engine.Speed. DSDRPM does not match Desired Engine Speed. Desired_RPM is %%$Desired_RPM%%.  DSDRPM is %%$DSDRPM,0D%%.  DSDRPM_Wait_Counter is %%$DSDRPM_Wait_Counter,0D%%.  Terminating Test)
	'Send text message
	Let !Text_Message = Set.Engine.Speed. DSDRPM does not match Desired Engine Speed. Desired_RPM is %%$Desired_RPM%%.  DSDRPM is %%$DSDRPM,0D%%. Terminating test.
	Gosub Send_Text_Message
	'Terminate test
	Gosub Terminate_Test
End	

Skip_Engine_Speed_Set:

End_Sub
'*******************************************************
Sub Ramp_Engine_Speed
'*******************************************************
Log_Message (Running Ramp_Engine_Speed subroutine)

'Set engine speed clip to maximum allowable speed
Set_Function_Table FNDSDN_NE_MAX_DRV = 2040
Set_Activate

'Apply test engine speed
Set DSDN_NE_TST ($Desired_RPM , 0)

'Apply test switch 
Set DSDN_SW_TST (1,0)

'Set engine speed high threshold
Let $NE_Low_Threshold = 2000

'set spark adder to +10deg
Set SPKSAF_SA_ADD_S (10 , 0)

'Set throttle adder to +3deg
Set ETC_TA_ADDER (3 , 0)
Wait (1)

'Zero throttle angle multiplier
Set ETC_TA_MULT (0,0)

'Set base throttle angle to +3deg
Let $T_Angle = 3

'Start ramp engine speed control loop
Do
	'Apply throttle angle adder
	Set ETC_TA_ADDER ($T_Angle , 0)
	'Capture average engine speed
	Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2
	'Capture average throttle angle
	Let $ETC_TA_CMD_AVE2 = ETC_TA_CMD_AVE2
	'Exit loop when desired engine speed has been achieved 
	If $TCRPM_NE_BAR_AVE2 > $NE_Low_Threshold Then Goto Engine_Speed_Target_Reached:
	'If engine speed threshold has not been 
	Let $T_Angle = $T_Angle + 0.01
	Wait (1)
Loop

Engine_Speed_Target_Reached:

Log_Message (T_Angle is %%$T_Angle,3D%%.)

End_Sub
'*******************************************************
Sub Reset_Pedal
'*******************************************************
Log_Message (Running Reset_Pedal Subroutine)

Select_Case $Engine_Strategy 
	Case = 1
		'New Gas
		Set_Function_Table PEDAP_AN_MUL_V = 1
		Set_Function_Table PEDAP_AN_ADD_V = 0
		Set_Activate
		Set PEDAP_D_CFG_DEVO_S (0,0)
	Case = 2
		'Old Gas
		Set_Function_Table APP_THETA_ADD = $APP_THETA_ADD_Base
		Set_Function_Table APP_THETA_MUL = $APP_THETA_MUL_Base
		Set_Activate
	Case = 3
		'Diesel
		' Set_Function_Table APP_rLinAPPLeft_CUR = $APP_rLinAPPLeft_CUR_Base
		' Set_Function_Table APP_rLinAPPRht_CUR = $APP_rLinAPPRht_CUR_Base
		' Set_Activate
	Case = 4
		'Closes accelerator pedal
		Set Pedal_Position_Cmd (0,0)
		Log_Message (Pedal_Position_Cmd set to 0%.)
End_Select

'Close Accelerator Pedal
If $Vehicle_Flag ~= 1
	Set Pedal_Position_Cmd (0,0)
	Log_Message (Pedal_Position_Cmd set to 0%.)
End

End_Sub
'*******************************************************
Sub Reset_Engine_Speed
'*******************************************************
Log_Message (Running Reset_Engine_Speed Subroutine)

'Capture Ignition Voltage
Let $IGNITION_VLT = IGNITION_VLT

'If ignition is off, synchronize PCM and ECM
If $IGNITION_VLT < 1
	Gosub PCM_Synchronize
	Gosub ECM_Synchronize
End

'Close accelerator pedal prior to resetting engine speed test switch
If $Vehicle_Flag ~= 1	
	Set Pedal_Position_Cmd (0,0)
End

'Reset engine speed test values and switch based on engine strategy determined in preset routine
Select_Case $Engine_Strategy
	Case = 1
		'New Gas
		Set DSDN_NE_TST ($DSDN_NE_TST_Base,0)
		Set DSDN_SW_TST ($DSDN_SW_TST_Base,0)
		Set_Function_Table FNDSDN_NE_MAX_DRV = $FNDSDN_NE_MAX_DRV_Base
		Set_Activate
	Case = 2
		'Old Gas
		Set DSDRPM_TST_SW ($DSDRPM_TST_SW_Base,0)
		Set DSDRPM_TST_RPM ($DSDRPM_TST_RPM_Base,0)	
	Case = 3
		'Diesel
		' Set_Function_Table HLSDem_nSetPLoGear_MAP = $HLSDem_nSetPLoGear_MAP_Base
		' Set_Activate
		' Set HLSDem_nSetPLoDia_C ($HLSDem_nSetPLoDia_C_Base,0)
		' Set_Function_Table HLSDem_nSetPLoGearClnt_MAP = $HLSDem_nSetPLoGearClnt_MAP_Base
		' Set_Activate
End_Select

Wait (2)

Engine_Speed_Reset:

End_Sub

'*********************************************************************
Sub Set_Output_Speed
'*********************************************************************
Log_Message (Running Set_Output_Speed Subroutine)

Screen_Message (Green,Setting output speed to %%$CurrentRunOutputSpeed%%)

'Calculate ramp time
Let $OutputSpeed_RampTime = $CurrentRunOutputSpeed/25

'For standard dyno cell, choose dyno mode and set speed
If $Standard_Cell = 1
	Let $Desired_Emcon_Mode = 1
	Gosub Set_Emcon_Mode
	Set DynoSpeed_set ($CurrentRunOutputSpeed,$OutputSpeed_RampTime)
End

'For HIL dynos, tune PIDs and set output speed using PID control
If $HIL_Flag = 1
	'Turn off brake
	Set DynoBrake_Set (0,0)
	'Set DynSpd ($CurrentRunOutputSpeed,$OutputSpeed_RampTime) Using Pedal_Position_Cmd
	Set DynSpd ($CurrentRunOutputSpeed,$OutputSpeed_RampTime) Using RoadGrade_Set
	'Start engine speed monitor if output speed is not increasing
	Monitor_On High_Engine_No_Output_Speed	
	Log_Message (Starting High_Engine_No_Output_Speed monitor. Set_Output_Speed.)
End

Wait (2)

End_Sub

'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Monitor High_Engine_No_Output_Speed
'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

'Establish HENO_Engine_Speed_Limit
Let $HENO_Engine_Speed_Limit = 4000
'Establish Dyno Speed low threshold
Let $HENO_DynSpd_Low_Threshold = 10

'Capture Engine Speed
Let $HENO_Engine_Speed = TCRPM_NE_BAR
'Capture Accelerator Pedal
Let $HENO_TIPDA_PC_DD = TIPDA_PC_DD
'Capture Output Speed
Let $HENO_DynSpd = DynSpd

'If engine speed exceeds limit and output speed is below threshold, turn PID off and terminate test
If $HENO_TIPDA_PC_DD > 0
	If $HENO_Engine_Speed > $HENO_Engine_Speed_Limit
		If $HENO_DynSpd < $HENO_DynSpd_Low_Threshold
			'Turn off PID
			Set DynSpd (Off) Using RoadGrade_Set
			'Reset Accelerator Pedal
			Set Pedal_Position_Cmd (0,0)
			Log_Message (High Engine Speed, No Output Speed During Set_Output_Speed.)
			Log_Message (******************************************************)
			Log_Message (Terminating test.)
			Log_Message (******************************************************)
			'Send text message
			Let !Text_Message = High Engine Speed, No Output Speed During Set_Output_Speed. Terminating test.
			Gosub Send_Text_Message
			'Terminate test
			Gosub Terminate_Test
		End
	End
End

End_Monitor

'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Monitor Engine_Running
'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
'Monitors the test to make sure the engine is still running.

'Capture average engine speed and instant engine speed
Let $FirstRead_TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2
Let $TCRPM_NE_BAR_Monitor = TCRPM_NE_BAR

'If reading is below 100, recheck after 2 seconds.
If $FirstRead_TCRPM_NE_BAR_AVE2 < 100
	Wait (2)
	Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2
	'If engine is not running, set low engine speed flag
	If $TCRPM_NE_BAR_AVE2 < 100
		'Set low engine speed flag
		Let $Low_Engine_Flag = 1
		Log_Message (Engine Not Running. TCRPM_NE_BAR_AVE2 is %%$TCRPM_NE_BAR_AVE2,0D%%rpm.)	
		'Turn off engine speed monitor
		Monitor_Off Engine_Running
		Log_Message (Stopping Engine_Running monitor. Engine_Running.)
		'Save Flight Recorder file
		Save_Flight_Recorder
		'Save Debug Files
		Save_Debug_Files
		Log_Message (Debug File Saved)
		Screen_Message (Yellow,%%New_Line%%The Engine is Not Running.  AutoTEST will attempt to restart the engine now.)
	Else
		'Reset low engine speed flag
		Let $Low_Engine_Flag = 0
	End
End

'If engine speed exceeds high engine speed limit, set high engine speed flag 
Let $Engine_Speed_Limit = 6500
If $TCRPM_NE_BAR_Monitor > $Engine_Speed_Limit
	'Set engine overspeed flag
	Let $Engine_Overspeed_Flag = 1
	'Save Flight Recorder
	Save_Flight_Recorder
	'Save Debug File
	Save_Debug_Files
	Log_Message (Engine overspeed event. Engine speed is %%$TCRPM_NE_BAR_Monitor,0D%%rpm. Limit is %%$Engine_Speed_Limit,0D%%rpm.)
Else
	'Reset engine overspeed flag
	Let $Engine_Overspeed_Flag = 0
End

End_Monitor

'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Monitor Cat_Temp
'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
'Monitors Cat Temp

'Capture Catalyst temperature
Let $Cat_Temp = CatTemp

'Establish high catalyst temperature limit
Let $Cat_Temp_High_Limit = 925

'If catalyst temperature exceeds high limit, set flag, and proceed to cat cool-down
If $Cat_Temp > $Cat_Temp_High_Limit
	'Set cat temp high flag
	Let $Cat_Temp_High_Flag = 1
	Log_Message (Cat Temp > Cat Temp High Limit of: %%$Cat_Temp_High_Limit,0D%% DegC. Cat Temp is %%$Cat_Temp,0D%% DegC.)
	'Turn off cat temp monitor
	Monitor_Off Cat_Temp
	Log_Message (Stopping Cat_Temp monitor. Cat_Temp.)
	'Start cat temp cool-down procedure
	Gosub Cat_Temp
End

End_Monitor

'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Monitor TransCase_Out_Tmp
'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
'Monitors Cat Temp

'Capture trans case out temperature
Let $TransCase_Out_Tmp = TransCase_Out_Tmp

'Establish maximum trans case out temperature
Let $TransCase_Out_Max_Limit = 135

'If trans case out temperature exceeds maximum limit, set flag to fail testpoint, start cooling loop
If $TransCase_Out_Tmp > $TransCase_Out_Max_Limit
	Log_Message (TransCase_Out temperature exceeded maximum limit. TransCase_Out_Tmp is %%$TransCase_Out_Tmp,0D%% DegC. Terminating test.)
	'Set Case Out temp high flag
	Let $TransCase_Out_High_Flag = 1
	Monitor_Off TransCase_Out_Tmp
	Log_Message (Stopping TransCase_Out_Tmp monitor. TransCase_Out_Tmp.)
End

End_Monitor

'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Monitor PCM_Sync
'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
'Monitors PCM_Sync
'Not used in VFS Characterization test. Review other tests before deleting

'Capture engine speed
Let $TCRPM_NE_BAR = TCRPM_NE_BAR

'Capture ignition voltage
Let $IGNITION_VLT = IGNITION_VLT

'Initialize PCM Sync Timer
Let $Elapsed_PCM_Sync_start_time = 0

'If ignition is on, wait until engine speed is not invalid
If $IGNITION_VLT > 0
	If $TCRPM_NE_BAR < -10000
		Log_Message (PCM not synced during PCM_Sync monitor)
		
		'Start timer
		Let $PCM_Sync_start_time = Timer
		
		'Start PCM_Sync monitor control
		Do
			'Update timer
			Let $Elapsed_PCM_Sync_start_time = Timer - $PCM_Sync_start_time
			'Capture engine speed
			Let $TCRPM_NE_BAR = TCRPM_NE_BAR
			'If engine speed is a valid number, exit monitor loop
			If $TCRPM_NE_BAR > -10000
				Log_Message (PCM sync time is %%$Elapsed_PCM_Sync_start_time,0D%%)
				Goto End_of_PCM_sync_monitor:
			End
		Loop
	End
End
End_of_PCM_sync_monitor:

End_Monitor

'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Monitor Slip_Act
'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

'Monitors TCCALC_N_SLP_ACT during Boost, Stroke, Ramp test to save friction material from excessive slipping

'Establish slip threshold
Let $Slip_Threshold = $BaseSlip + 20

'Capture Slip Act
Let $TCCALC_N_SLP_ACT = TCCALC_N_SLP_ACT

'If Slip Act exceeds threshold, set high slip act flag
If $TCCALC_N_SLP_ACT > $Slip_Threshold
	Let $TCCALC_N_SLP_ACT_high_flag = 1
	Log_Message (Slip_Threshold met. TCCALC_N_SLP_ACT is %%$TCCALC_N_SLP_ACT,0D%% rpm for Slip_Threshold of %%$Slip_Threshold,0D%% rpm.)
End

End_Monitor

'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Monitor TCCALC_RT_TRNS
'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
'Monitors TCCALC_RT_TRNS for excessive ratio

'Establish rt_trans ratio limit
Let $Ratio_Limit = 7

'Capture output speed
Let $TCRPM_NO_BAR_Monitor = TCRPM_NO_BAR

'Capture trans ratio
Let $TCCALC_RT_TRNS_Monitor = TCCALC_RT_TRNS

'If output speed is positive, and trans ratio limit is exceeded, terminate test
If $TCRPM_NO_BAR_Monitor > 100
	If $TCCALC_RT_TRNS_Monitor > $Ratio_Limit
		'Close accelerator pedal
		Set Pedal_Position_Cmd (0,0)
		Log_Message (Pedal_Position_Cmd set to 0%.)
		Log_Message (Ratio_Limit met. TCCALC_RT_TRNS_Monitor is %%$TCCALC_RT_TRNS_Monitor,2D%% for Ratio_Limit of %%$Ratio_Limit,2D%%.)
		Log_Message (******************************************************)
		Log_Message (Terminating test.)
		Log_Message (******************************************************)
		'Send text message
		Let !Text_Message = TCCALC_RT_TRNS_Monitor exceeded ratio limit. Terminating Test.
		Gosub Send_Text_Message
		'Terminate test
		Gosub Terminate_Test
	End
End

End_Monitor

'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Monitor Turbine
'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
'Monitors Turbine for excessive slip during bar graph

'Capture turbine speed
Let $TCRPM_NT_BAR = TCRPM_NT_BAR

'Establish turbine drop threshold
Let $Turbine_Threshold = $CurrentRunTurbine - 200

'If turbine drop exceeds threshold, set stop-turbine flag
If $TCRPM_NT_BAR < $Turbine_Threshold
	Let $StopTurbine_Flag = 1
	Log_Message (StopTurbine_Flag set to 1.)
End

End_Monitor

'*******************************************************
Sub Lock_Converter
'*******************************************************
Log_Message (Locking torque converter)

'Capture PRNDL position
Let $THMI_ST_PRND_DES = THMI_ST_PRND_DES

'If PRNDL is not in overdrive, shift to overdrive
If $THMI_ST_PRND_DES ~= 4
	Log_Message (Cannot lock converter in Neutral. Moving PRNDL to OD.)
	If $HIL_Flag = 1
		Let $Desired_PRNDL_Position = 3
	Else	
		Let $Desired_PRNDL_Position = 4
	End	
	Gosub Set_PRNDL_Position
	Wait (3)
End

'Set TRAM_Set flag to reset PCM parameters if test shuts down
Let $TRAM_Set = 1
Log_Message (TRAM_Set set to 1)

'Disable OBDII
Set OBDII_TST_SW (0,0)

'Set test override code for tcc to scalar pressure
Set TVPSC_D_OVRD_TCC_S (11,0)
'Set TCC pressure command to 1000kpa
Set TVPSC_P_CMD_TST_TCC_S (1000,0)
'Enable test mode
Set TVPSC_B_TST_ENBL_S (1,0)

Wait (3)

End_Sub

'*******************************************************
Sub Unlock_Converter
'*******************************************************
Log_Message (Unlocking torque converter)

'Reset TCC pressure command and test override code
Set TVPSC_D_OVRD_TCC_S (0,0)
Set TVPSC_P_CMD_TST_TCC_S (0,0)

End_Sub

'*******************************************************
Sub Open_Converter
'*******************************************************
Log_Message (Unlocking torque converter)

'Set TRAM_Set flag to reset PCM parameters
Let $TRAM_Set = 1

'Disable OBDII
Set OBDII_TST_SW (0,0)
'Set test override code to oncoming scalar pressure
Set TVPSC_D_OVRD_TCC_S (11,0)
'Set TCC pressure command to 0kpa.
Set TVPSC_P_CMD_TST_TCC_S (0,0)
'Enable test mode
Set TVPSC_B_TST_ENBL_S (1,0)

End_Sub

'*******************************************************
Sub Trans_Select
'*******************************************************
'Establish gear ratios from Transmission Selection
Log_Message (Running Trans_Select Subroutine)

Select_Case $Trans_Select
	Case = 1
		'6F35	
		Dim $Gear_Ratios (7,1)
		Let $Gear_Ratios (1,1) = 4.584
		Let $Gear_Ratios (2,1) = 2.964
		Let $Gear_Ratios (3,1) = 1.912
		Let $Gear_Ratios (4,1) = 1.446
		Let $Gear_Ratios (5,1) = 1.000
		Let $Gear_Ratios (6,1) = 0.746
		Let $Gear_Ratios (7,1) = -2.943
		Let $Final_Gear = 6
		Let $MaxCurrent = 1.1
	Case = 2
		'8F24
		Dim $Gear_Ratios (9,1)
		Let $Gear_Ratios (1,1) = 5.324
		Let $Gear_Ratios (2,1) = 3.417
		Let $Gear_Ratios (3,1) = 2.645
		Let $Gear_Ratios (4,1) = 2.036
		Let $Gear_Ratios (5,1) = 1.420
		Let $Gear_Ratios (6,1) = 1.000
		Let $Gear_Ratios (7,1) = 0.864
		Let $Gear_Ratios (8,1) = 0.694
		Let $Gear_Ratios (9,1) = -4.293
		Let $Final_Gear = 8
		Let $MaxCurrent = 1.1
	Case = 3
		'10R140
		Dim $Gear_Ratios (11,1)
		Let $Gear_Ratios (1,1) = 4.615
		Let $Gear_Ratios (2,1) = 2.919
		Let $Gear_Ratios (3,1) = 2.132
		Let $Gear_Ratios (4,1) = 1.773
		Let $Gear_Ratios (5,1) = 1.519
		Let $Gear_Ratios (6,1) = 1.277
		Let $Gear_Ratios (7,1) = 1.000
		Let $Gear_Ratios (8,1) = 0.851
		Let $Gear_Ratios (9,1) = 0.687
		Let $Gear_Ratios (10,1) = 0.632
		Let $Gear_Ratios (11,1) = -4.695
		Let $Final_Gear = 10
		Let $MaxCurrent = 1.1
	Case = 4
		'8F57
		Dim $Gear_Ratios (9,1)
		Let $Gear_Ratios (1,1) = 4.484
		Let $Gear_Ratios (2,1) = 3.146
		Let $Gear_Ratios (3,1) = 2.872
		Let $Gear_Ratios (4,1) = 1.842
		Let $Gear_Ratios (5,1) = 1.414
		Let $Gear_Ratios (6,1) = 1.000
		Let $Gear_Ratios (7,1) = 0.742
		Let $Gear_Ratios (8,1) = 0.616
		Let $Gear_Ratios (9,1) = -2.882	
		Let $Final_Gear = 8
		Let $MaxCurrent = 1.1
	Case = 5
		'DPS6
		Dim $Gear_Ratios (7,1)
		Let $Gear_Ratios (1,1) = 15.07
		Let $Gear_Ratios (2,1) = 9.35
		Let $Gear_Ratios (3,1) = 6.143
		Let $Gear_Ratios (4,1) = 4.369
		Let $Gear_Ratios (5,1) = 3.337
		Let $Gear_Ratios (6,1) = 2.703
		Let $Gear_Ratios (7,1) = -15.007
		Let $Final_Gear = 6
		Let $MaxCurrent = 1.1
	Case = 6
		'10R60/80
		Dim $Gear_Ratios (11,1)
		Let $Gear_Ratios (1,1) = 4.696
		Let $Gear_Ratios (2,1) = 2.985
		Let $Gear_Ratios (3,1) = 2.156
		Let $Gear_Ratios (4,1) = 1.779
		Let $Gear_Ratios (5,1) = 1.526
		Let $Gear_Ratios (6,1) = 1.278
		Let $Gear_Ratios (7,1) = 1.000
		Let $Gear_Ratios (8,1) = 0.854
		Let $Gear_Ratios (9,1) = 0.689
		Let $Gear_Ratios (10,1) = 0.636
		Let $Gear_Ratios (11,1) = -4.866
		Let $Final_Gear = 10
		Let $MaxCurrent = 1.1
	Case = 7
		'8F35
		Dim $Gear_Ratios (10,1)
		Let $Gear_Ratios (1,1) = 4.689
		Let $Gear_Ratios (2,1) = 3.306
		Let $Gear_Ratios (3,1) = 3.012
		Let $Gear_Ratios (4,1) = 1.923
		Let $Gear_Ratios (5,1) = 1.446
		Let $Gear_Ratios (6,1) = 1.000
		Let $Gear_Ratios (7,1) = 0.747
		Let $Gear_Ratios (8,1) = 0.617
		Let $Gear_Ratios (9,1) = -2.960
		Let $Final_Gear = 8
		Let $MaxCurrent = 1.1
	Case = 8
		'6R80
		Dim $Gear_Ratios (7,1)
		Let $Gear_Ratios (1,1) = 4.17
		Let $Gear_Ratios (2,1) = 2.34
		Let $Gear_Ratios (3,1) = 1.52
		Let $Gear_Ratios (4,1) = 1.14
		Let $Gear_Ratios (5,1) = 0.87
		Let $Gear_Ratios (6,1) = 0.69
		Let $Gear_Ratios (7,1) = -3.40
		Let $Final_Gear = 6
		Let $MaxCurrent = 1.1		
End_Select

'Establish number of gears
Let $Number_Gear_Ratios = $Final_Gear

End_Sub

'*******************************************************
Sub TempQuickMatrix
'*******************************************************
Log_Message (Running TempQuickMatrix Subroutine)

'Establish a matrix of TFT setpoints and testpoint count for each setpoint

Let $TempQuickMatrix_Length = Variable_Rows $TempIO
'Dimension TempQuickMatrix
Dim $TempQuickMatrix (1,2)

'Initialize TempQuickMatrix index and number of rows
Let $TempQuickMatrix_Index = 0
Let $TempQuickMatrix_Rows = 0

'Start TempQuickMatrix control loop
Do
	'Increment index
	Let $TempQuickMatrix_Index = $TempQuickMatrix_Index + 1
	'Exit loop when all TFT setpoints from the temp selection matrix have been completed
	If $TempQuickMatrix_Index > $TempQuickMatrix_Length Then Goto Done_TempQuickMatrix:
	'Extract Temp IO from TempIO matrix
	Let $Temp_Dummy = $TempIO ($TempQuickMatrix_Index , 1)
	'If TFT setpoint is selected:
	If $Temp_Dummy = 1
		'Extract setpoint value from Temps matrix
		Let $MatrixTemp = $Temps ($TempQuickMatrix_Index , 1)
		'Increment number of rows
		Let $TempQuickMatrix_Rows = $TempQuickMatrix_Rows + 1
		'Re-dimension TempQuickMatrix with updated number of rows
		Dim $TempQuickMatrix ($TempQuickMatrix_Rows , 2)
		'Copy TFT setpoint to TempQuickMatrix
		Let $TempQuickMatrix ($TempQuickMatrix_Rows , 1) = $MatrixTemp
	End
	
Loop

Done_TempQuickMatrix:

End_Sub

'*******************************************************
Sub TFT_Matrix
'*******************************************************
Log_Message (Running TFT_Matrix Subroutine)

'Initialize TFT_Matrix indices
Let $TFT_IO_Index = 0

'Start TFT_Matrix control loop
Do
	'Increment index
	Let $TFT_IO_Index = $TFT_IO_Index + 1
	'Exit loop when all TFT setpoints have been completed
	If $TFT_IO_Index > $TempQuickMatrix_Rows Then Goto Done_TFT_Matrix:
	'Extract TFT setpoint from TempQuickMatrix 
	Let $TFT_Setpoint = $TempQuickMatrix ($TFT_IO_Index , 1)
	'Determine TFT setpoint count from TestMatrix
	Gosub TFT_Matrix_Fill
Loop

Done_TFT_Matrix:

End_Sub
'*******************************************************
Sub TFT_Matrix_Fill
'*******************************************************
Log_Message (Running TFT_Matrix_Fill Subroutine)

'Initialize index
Let $TFT_Setpoint_Count = 0
Let $TFT_Matrix_Fill_Index = 0

'Start TFT matrix fill control loop
Do
	'Increment index
	Let $TFT_Matrix_Fill_Index = $TFT_Matrix_Fill_Index + 1
	'Exit loop when all testpoints have been completed
	If $TFT_Matrix_Fill_Index > $Total_Testpoints Then Goto Done_TFT_Matrix_Fill:
	'Extract TFT setpoint from TestMatrix
	Let $TestMatrix_TFT = $TestMatrix ($TFT_Matrix_Fill_Index , 1)
	'Compare TFT setpoint from Temp IO matrix with TFT setpoint in TestMatrix
	If $TestMatrix_TFT = $TFT_Setpoint
		'Increment setpoint count
		Let $TFT_Setpoint_Count = $TFT_Setpoint_Count + 1
	End
Loop

Done_TFT_Matrix_Fill:

'Fill TempQuickMatrix with setpoint count
Let $TempQuickMatrix ($TFT_IO_Index , 2) = $TFT_Setpoint_Count
End_Sub

'*******************************************************
Sub Update_TFT_Setpoint_Count
'*******************************************************
Log_Message (Running Update_TFT_Setpoint_Count Subroutine)

'Update number of TFT setpoints remaining in TempQuickMatrix

'Determine point status for current testpoint
If Point_Status ($Current_Testpoint) = Done
	'If testpoint is "Done", update setpoint count
	Goto Update_TFT_Count:
Else
	If Point_Status ($Current_Testpoint) = Failed
		'If testpoint is "Failed", update setpoint count
		Goto Update_TFT_Count:
	Else
		'Skip updating setpoint count
		Goto Done_Update_TFT_Setpoint_Count:
	End
End

Update_TFT_Count:

'Initialize index
Let $TempQuickMatrix_Index = 0

'Start update TFT setpoint count control loop
Do
	'Increment index
	Let $TempQuickMatrix_Index = $TempQuickMatrix_Index + 1
	'Exit loop when all TFT setpoints from TempQuickMatrix have been completed
	If $TempQuickMatrix_Index > $TempQuickMatrix_Rows Then Goto Done_Update_TFT_Setpoint_Count:
	'Extract TFT setpoint from TempQuickMatrix
	Let $TFT_Setpoint = $TempQuickMatrix ($TempQuickMatrix_Index , 1)
	'Compare setpoint from current testpoint to TFT setpoint from TempQuickMatrix
	If $TFT_Setpoint = $CurrentRunTemp
		'Extract TFT setpoint count from TempQuickMatrix
		Let $TFTs_Remaining = $TempQuickMatrix ($TempQuickMatrix_Index , 2)
		'Decrement count from remaining TFT setpoint count
		Let $TFTs_Remaining = $TFTs_Remaining - 1
		
		If $TFTs_Remaining < 0
			Log_Message (An error has occurred with the TFT setpoint matrix. Please correct and restart. Terminating test.)
			'Send text message
			Let !Text_Message = An error has occurred with the TFT setpoint matrix. Please correct and restart. Terminating test.
			Gosub Send_Text_Message
			'Terminate test
			Gosub Terminate_Test
		End
		'Update TempQuickMatrix with updated TFT setpoint count
		Let $TempQuickMatrix ($TempQuickMatrix_Index , 2) = $TFTs_Remaining
		Log_Message (TempQuickMatrix %%$TFT_Setpoint%% DegC points remaining is %%$TFTs_Remaining%%.)
	End
Loop

Done_Update_TFT_Setpoint_Count:

End_Sub

'*******************************************************
Sub TransCase_Out_Cooldown
'*******************************************************
Log_Message (Running TransCase_Out_Cooldown Subroutine)

'Capture current Case Out temp
Let $Current_TransCase_Out_temp = TransCase_Out_Tmp

'Determine Case Out limit
Let $TransCase_Out_Cooldown_Limit = 100

'If measured Case Out temp is below the limit, skip Case Out cooldown
If $Current_TransCase_Out_temp < $TransCase_Out_Cooldown_Limit Then Goto TransCase_Out_Temp_Good:

'If current testpoint was in-process, reset Point Running flag, reset point status to "Run"
If $Current_Point_Running = 1
	'Reset point running flag
	Let $Current_Point_Running = 0
	'Change point status to "Run"
	Point_Status (Testpoint) = Run
	'End Vision recording 
	Gosub Record_End
End	

'Stop vehicle 
Gosub Slowdown

'Reset PCM parameters to base values
Select_Case $Trans_Select
	Case = 2
		'8F24
		Gosub TRAM_Reset_8F
	Case = 3
		'10R140
		Gosub TRAM_Reset_10R	
	Case = 4
		'8F57
		Gosub TRAM_Reset_8F		
	Case = 6
		'10R60/80
		Gosub TRAM_Reset_10R
	Case = 7
		'8F35
	 	Gosub TRAM_Reset_8F
	Case = 8
		'6R80
	 	Gosub TRAM_Reset_6R	
End_Select
Screen_Message (Yellow, %%New_Line%%TransCase_Out Temp is %%$Current_TransCase_Out_temp, 0D%% DegC %%New_Line%%Entering TransCase_Out Cooldown Mode.)

'Set gear, turbine speed, and input torque for TransCase_Out Cooldown
Gosub Set_Speed_Load

'Establish TransCase_Out cooldown target ending temp
Let $TransCase_Out_Cooldown_Target_Temp = 95

'Initialize TransCase_Out cooldown timer
Let $Elapsed_TransCase_Out_Time = 0
Let $Start_TransCase_Out_Time = Timer
Let $TransCase_Out_Time_Limit = 300

'Start TransCase_Out cooldown control loop
Do
	'Update timer
	Let $Elapsed_TransCase_Out_Time = Timer - $Start_TransCase_Out_Time
	'If cat cooldown time exceeds time limit, shift PRNDL to neutral
	If $Elapsed_Cat_Time > $TransCase_Out_Time_Limit
		'Stop vehicle
		Gosub Slowdown
		'Shift PRNDL to neutral
		Let $Desired_PRNDL_Position = 2
		Gosub Set_PRNDL_Position
	End
	'Capture Case Out temperature
	Let $Current_TransCase_Out_temp = TransCase_Out_Tmp
	'Exit loop when Case Out temperature cools below target temperature
	If $Current_TransCase_Out_temp < $TransCase_Out_Cooldown_Target_Temp
		Log_Message (TransCase_Out Cooldown time was %%$Elapsed_TransCase_Out_Time,1D%% seconds.)
		Goto TransCase_Out_Cool:	
	End
	Screen_Message (Yellow, %%New_Line%%TransCase_Out Temp is %%$Current_TransCase_Out_temp,0D%% DegC.%%New_Line%%Cooling TransCase_Out temp to < %%$TransCase_Out_Cooldown_Target_Temp,0D%% DegC.)
Loop

TransCase_Out_Cool:

'Reset gear override switch
Set RMSC_D_GR_TYP_SW_S ($RMSC_D_GR_TYP_SW_S_Base,0)

'Stop powertrain
Gosub Slowdown

TransCase_Out_Temp_Good:

'Reset Case Out temp high flag
Let $TransCase_Out_High_Flag = 0

End_Sub

'*******************************************************
Sub Cat_Temp
'*******************************************************
Log_Message (Running Cat_Temp Subroutine)

'Capture catalyst temperature
Let $Current_Cat_Temp = CatTemp

'Determine cat cooldown limit
Let $Cat_Cooldown_Limit = 925

'If measured catalyst temperature is below the catalyst cooldown temperature, skip cat cooldown
If $Current_Cat_Temp < $Cat_Cooldown_Limit
	Goto Cat_Temp_Good:
Else
	Let $Cat_Temp_High_Flag = 1
End	
Log_Message (Entering Cat Cooldown Mode)

'If current testpoint was in-process, reset Point Running flag, reset point status to "Run"
If $Current_Point_Running = 1
	'Reset point running flag
	Let $Current_Point_Running = 0
	'Change point status to "Run"
	Point_Status (Testpoint) = Run
	'End Vision recording 
	Gosub Record_End
End	

'Stop vehicle 
Gosub Slowdown

'Reset PCM parameters to base values
Select_Case $Trans_Select
	Case = 2
		'8F24
		Gosub TRAM_Reset_8F
	Case = 3
		'10R140
		Gosub TRAM_Reset_10R	
	Case = 4
		'8F57
		Gosub TRAM_Reset_8F		
	Case = 6
		'10R60/80
		Gosub TRAM_Reset_10R
	Case = 7
		'8F35
	 	Gosub TRAM_Reset_8F
	Case = 8
		'6R80
	 	Gosub TRAM_Reset_6R	
End_Select
Screen_Message (Yellow, %%New_Line%%Cat Temp is %%$Current_Cat_Temp, 0D%% %%New_Line%%Entering Cat Cooldown Mode.)

'Set gear, turbine speed, and input torque for Cat Cooldown
Gosub Set_Speed_Load

'Establish cat cooldown target ending temp
Let $Cat_Cooldown_Target_Temp = 815

'Initialize cat cooldown timer
Let $Elapsed_Cat_Time = 0

'Start cat cooldown timer
Let $Start_Cat_Time = Timer

'Start cat cooldown
Do
	'Update timer
	Let $Elapsed_Cat_Time = Timer - $Start_Cat_Time
	'If cat cooldown time exceeds 5 minutes, shift PRNDL to neutral
	If $Elapsed_Cat_Time > 300
		'Stop vehicle
		Gosub Slowdown
		'Shift PRNDL to neutral
		Let $Desired_PRNDL_Position = 2
		Gosub Set_PRNDL_Position
	End
	'Capture catalyst temperature
	Let $Current_Cat_Temp = CatTemp
	'Exit loop when catalyst temperature cools below target temperature
	If $Current_Cat_Temp < $Cat_Cooldown_Target_Temp
		Log_Message (Cat Cooldown time was %%$Elapsed_Cat_Time,1D%% seconds.)
		Goto Cats_Cool:	
	End
	Screen_Message (Yellow, %%New_Line%%Cat Temp is %%$Current_Cat_Temp, 0D%% DegC.%%New_Line%%Cooling cats to < %%$Cat_Cooldown_Target_Temp,0D%% DegC.)
Loop

Cats_Cool:

'Reset gear override switch
Set RMSC_D_GR_TYP_SW_S ($RMSC_D_GR_TYP_SW_S_Base,0)

'Stop vehicle
Gosub Slowdown

Cat_Temp_Good:

'Reset cat temp high flag
Let $Cat_Temp_High_Flag = 0

End_Sub

'*******************************************************
Sub Cell_Check_Status
'*******************************************************
Log_Message (Running Cell_Check_Status subroutine)
Screen_Message (Green, %%New_Line%%%%New_Line%%Checking Cell_Check_Status)

'Capture cell check status
Let $Cell_Check_Status = Cell_Check_Status

If $Cell_Check_Status = 1
	'Stop vehicle
	Gosub Slowdown
	
	'Set to 100% Brake
	Set DynoBrake_Set (100,0)
	
	'Shift PRNDL to Neutral
	Let $Desired_PRNDL_Position = 2
	Gosub Set_PRNDL_Position
	
	'Shut off Ignition
	Set IGNITION_CMD (0,0)
	Log_Message (Engine off. Cell check.)
	Save_Debug_Files
	Log_Message (Debug File Saved)
	
	'Set Cell Check Ready bit
	Set Cell_Check_Ready (1,0)
	
	'Send Text Message to recipient list
	Log_Message (Pausing for Cell Check.)
	Let !Text_Message = Pausing test for Cell Check
	Gosub Send_Text_Message
		
	'Initialize Cell Check Timer
	Let $Elapsed_Cell_Check_Time = 0
	Let $Cell_Check_Start_Time = Timer
	Let $Cell_Check_Time_Limit = 1800
	
	'Start Cell Check control loop
	Do
		'Update timer
		Let $Elapsed_Cell_Check_Time = Timer - $Cell_Check_Start_Time
		'Calculate remaining time
		Let $Cell_Check_Time_Remaining = $Cell_Check_Time_Limit - $Elapsed_Shutdown_Time
		'If timer exceeds time limit, set shutdown trigger
		If $Elapsed_Cell_Check_Time > $Cell_Check_Time_Limit
			Log_Message (No response from user. Shutting down test.)
			Let !Text_Message = Cell Check has not completed within the allotted time. Terminating test.
			Gosub Send_Text_Message
			Gosub Terminate_Test
		End
		'Message Box
		Message_Box (Message_Time = 5, Title = Cell Check... , Entry_Field = 0 , Message = %%New_Line%%Pausing test for cell check. Press YES when finished.)
		Wait (0.1)
		'Check Cell Check Status
		Let $Cell_Check_Status = Cell_Check_Status
		'Resume test if technician clicks ADACS cell check completed button
		If $Cell_Check_Status = 0 Then Goto Resume_Test_After_Cell_Check:
		'Manage user interaction
		Let $Operator_Response = Response
		If $Operator_Response = 1
			Log_Message (Test resumed after cell check.)
			'Skip test cell shutdown
			Set Testcell_Shutdown_Trig (0,0)
			Goto Resume_Test_After_Cell_Check:
		End
	Loop
	
	Resume_Test_After_Cell_Check:
	Log_Message (Resuming after Cell Check.)
	
	'Reset Cell Check Ready bit
	Set Cell_Check_Ready (0,0)
	
	'Turn On Ignition
	Set IGNITION_CMD (1,0)
End

End_Sub

'*******************************************************
Sub Desired_TFT
'*******************************************************
Log_Message (Running Desired_TFT subroutine)
Screen_Message (Green, %%New_Line%%%%New_Line%%Checking TFT)

'Skip TFT Check if test is terminating
If $Terminate_Test_Flag = 1 Then Goto End_Desired_TFT:

'Initialize flags
Let $Lower_Temp_Found_Flag = 0
Let $Higher_Temp_Found_Flag = 0
Let $Lower_Temp_Found_Flag = 0
Let $GoWarm_Flag = 0
Let $Temp_High_Flag = 0
Let $Temp_Low_Flag = 0

'Check TempQuickMatrix for remaining TFT setpoints
'Initialize index
Let $TempQuickMatrix_Index = 0

'Start temp comparison control loop
Do
	'Increment index
	Let $TempQuickMatrix_Index = $TempQuickMatrix_Index + 1
	'Exit loop when all quick matrix temps have been completed
	If $TempQuickMatrix_Index > $TempQuickMatrix_Rows Then Goto Done_Temp_Compare:
	'Extract TFT setpoint from quick matrix
	Let $QuickMatrix_TFT = $TempQuickMatrix ($TempQuickMatrix_Index , 1)
	'Extract remaining TFT setpoint count
	Let $TFTs_Remaining = $TempQuickMatrix ($TempQuickMatrix_Index , 2)
	'If TFT setpoints remain, compare QuickMatrix temps to current testpoint TFT setpoint. Set flags accordingly
	If $TFTs_Remaining > 0
		Select_Case $QuickMatrix_TFT
			Case > $CurrentRunTemp
				'Set higher temp found flag
				Let $Higher_Temp_Found_Flag = 1
			Case < $CurrentRunTemp
				'Set lower temp found flag
				Let $Lower_Temp_Found_Flag = 1
			Case = $CurrentRunTemp
				'Set same temp found flag
				Let $Same_Temp_Found_Flag = 1
		End_Select	
	End
Loop
Done_Temp_Compare:

'Determine if all remaining TFT setpoints are the same temperature
If $Higher_Temp_Found_Flag = 0
	If $Lower_Temp_Found_Flag = 0
		'If no lower TFT setpoints and no higher TFT setpoints remain, set all points same flag
		Let $All_Points_Same_Flag = 1
	Else
		Let $All_Points_Same_Flag = 0
	End
Else
	Let $All_Points_Same_Flag = 0
End

'Widen acceptance threshold if re-checking TFT
If $Recheck_TFT_Flag = 1
	Let $TFT_Low_Threshold = $CurrentRunTemp - 5
Else
	'Low threshold for all temperatures is currently 3 DegC below setpoint.
	If $CurrentRunTemp < 0
		Let $TFT_Low_Threshold = $CurrentRunTemp - 3
	Else
		Let $TFT_Low_Threshold = $CurrentRunTemp - 3
	End
End	
	
'Establish high TFT threshold
Let $TFT_High_Threshold = $CurrentRunTemp + 5

'Synchronize ECM and PCM
Gosub ECM_Synchronize
Gosub PCM_Synchronize

Check_TFT:

'Initialize temp action timer
Let $Elapsed_TempAction_Time = 0
	
'Capture key temperatures
Let $TCTFT_TFT = TCTFT_TFT
Let $TCTFT_TFT = Int ($TCTFT_TFT)
Let $Starting_TFT = $TCTFT_TFT

'Capture Trans Fluid temp in variable that won't be overwritten in other subroutines
Let $Measured_TFT = TCTFT_TFT
Let $Measured_TFT = Int ($Measured_TFT)

'Establish commanded fluid temperature setpoint
Let $Commanded_TFT = $CurrentRunTemp

'Measure sump, case-in, case-out temps, and cooling valve
If $Vehicle_Flag ~= 1
	'Capture transmission sump temp
	Let $Measured_Sump_Temp = TransSump_Tmp
	Let $Measured_Sump_Temp = Int ($Measured_Sump_Temp)	
	
	'Capture transmission case out temp
	Let $Measured_TransCase_Out_Tmp = TransCase_Out_Tmp
	Let $Measured_TransCase_Out_Tmp = Int ($Measured_TransCase_Out_Tmp)
	
	'Capture transmission case in temp
	Let $Measured_TransCase_In_Tmp = TransCase_In_Tmp
	Let $Measured_TransCase_In_Tmp = Int ($Measured_TransCase_In_Tmp)	
	
	'Capture transmission fluid valve position
	Let $TransOil_Vlv_Pos = TransOil_Vlv_Pos
	Let $TransOil_Vlv_Pos = Int ($TransOil_Vlv_Pos)	
End

'Set Temp Action string
Let !Temp_Action = TFT_Check

'Record temp data in Test Setup
Gosub TFT_Data

Screen_Message (Green,%%New_Line%%Checking TCTFT_TFT.  Test will begin momentarily.)

'If TFT Check is enabled, check fluid temperature
If $TFT_Test = 1
	Log_Message (TFT Check Enabled for testpoint %%$Current_Testpoint%% of %%$Total_Testpoints%%. TCTFT_TFT is %%$TCTFT_TFT,0D%%)
	Goto Check_Fluid_Temp:
End	

If $TFT_Upper_Limit = 1
	Log_Message (TFT Upper Limit Enabled. TCTFT_TFT is %%$TCTFT_TFT,0D%% DegC.)
	'Compare current TCTFT_TFT to upper limit
	If $TCTFT_TFT <= $CurrentRunTemp
		Log_Message (TCTFT_TFT is below TFT Upper Limit of %%$CurrentRunTemp%% DegC. TCTFT_TFT is %%$TCTFT_TFT,0D%% DegC.)
		'Exit loop
		Goto Temp_Reached:
	Else
		'If measured TFT is above high threshold, set flag, and log TFT
		Let $Temp_High_Flag = 1
		Save_Debug_Files
		Log_Message (Debug File Saved)
		Log_Message (   Point %%$Current_Testpoint%%: High Temp Flag set.)
		Log_Message (   TFT is %%$TCTFT_TFT,0D%% DegC for %%$CurrentRunTemp%% DegC setpoint.)
		Goto Manage_TFT_Flags:
	End
End

Check_Fluid_Temp:

'Set measured TFT as starting temp
Let $Start_TFT = $TCTFT_TFT

'If TFT check is enabled, proceed to test if measured temp is within acceptable range
If $TFT_Test = 1
	If $TCTFT_TFT >= $TFT_Low_Threshold
		If $TCTFT_TFT <= $TFT_High_Threshold
			Goto Temp_Reached:
		Else
			'If measured TFT is above high threshold, set flag, and log TFT
			Let $Temp_High_Flag = 1
			Save_Debug_Files
			Log_Message (   Point %%$Current_Testpoint%% of %%$Total_Testpoints%%: High Temp Flag set.)
			Log_Message (   TFT is %%$TCTFT_TFT,0D%% DegC for %%$CurrentRunTemp%% DegC set point.)
		End
	Else
		'If measured TFT is below low threshold, set flag, and log TFT
		Let $Temp_Low_Flag = 1
		Log_Message (   Point %%$Current_Testpoint%% of %%$Total_Testpoints%%: Low Temp Flag set.)
		Log_Message (   TCTFT_TFT is %%$TCTFT_TFT,0D%% DegC for %%$CurrentRunTemp%% DegC set point.)
	End
Else
	Log_Message (TFT Check Skipped. TCTFT_TFT is %%$TCTFT_TFT,0D%% DegC.)
	Goto End_Desired_TFT:
End

'Prompt Driver to cool or heat transmission manually in-vehicle
If $Vehicle_Flag = 1
	If $Temp_High_Flag = 1
		Screen_Message (Yellow, TCTFT_TFT too high for %%$CurrentRunTemp%% setpoint. Cool transmission to desired temp.)
		Pause
		Goto Temp_Reached:
	Else
		If $Temp_Low_Flag = 1
			Screen_Message (Yellow, TCTFT_TFT too low for %%$CurrentRunTemp%% setpoint. Warm transmission to desired temp.)
			Pause
			Goto Temp_Reached:
		End
	End		
End

Manage_TFT_Flags:

'If measured TFT is below low threshold, 
If $Temp_Low_Flag = 1
	'Calculate delta from measured TFT to setpoint
	If $TCTFT_TFT > $CurrentRunTemp
		Let $TFT_Delta = $TCTFT_TFT - $CurrentRunTemp
	Else
		Let $TFT_Delta = $CurrentRunTemp - $TCTFT_TFT
	End
	'For temperatures below 25 DegC:
	If $TCTFT_TFT < 25
		'If temperature delta is below 10 DegC, go to passive warm-up
		If $TFT_Delta < 10
			Gosub Passive_Temp
		Else
			'If temperature delta is above 10 DegC, go to active warm-up
			Gosub Active_Warmup
			If $Warmed_Up_Flag = 1 Then Goto Temp_Reached:
		End
	Else
		'For temperatures above 25 DegC, run active warm-up
		Gosub Active_Warmup
	End
End

'****************************
'Setting Stop and Soak flag = 1 does not occur in any subroutine. Should be set if active cooldown times out
'If stop and soak flag is set:
If $Stop_And_Soak_Flag = 1
	'Reset flag
	Let $Stop_And_Soak_Flag = 0
	'Turn off engine and soak powertrain
	Gosub Stop_And_Soak
End
'******************************

'Establish cutoff temperature for active cooldown to stop-and-soak
Let $Lower_Cooling_Limit = 40

'If temperature is above setpoint:
If $Temp_High_Flag = 1
	If $TCTFT_TFT > $Lower_Cooling_Limit
		'If measured TFT is greater than cutoff temperature (approximate temperature of processed water), go to active cooldown
		Gosub Active_Cooldown
	Else
		'If measured TFT is below cutoff temperature, stop and soak powertrain.
		Gosub Stop_And_Soak
	End
End

'If test terminates during Stop and Soak, Active Cooldown, Passive Temp, or Active Warmup, skip to end of TFT check subroutine
If $Terminate_Test_Flag = 1 Then Goto End_Desired_TFT:

'If active warmup times out, manage TFT selection through Smart Temp
If $Warmup_Failed_Flag = 1
	Gosub Smart_Temp
End

'If active cooldown times out, manage TFT selection through Smart Temp
If $Cooldown_Fail_Flag = 1
	Gosub Smart_Temp
End

Temp_Reached:

'If recheck flag is set, reset flag and restart TFT check subroutine
If $Recheck_TFT_Flag = 1
	Let $Recheck_TFT_Flag = 0
	Gosub Desired_TFT
End	

'Re-initialize flags after taking temperature action (stop and soak, active cooldown, active warmup, and passive temp)
Let $Temp_High_Flag = 0
Let $Temp_Low_Flag = 0
Let $Warmed_Up_Flag = 0

'If in-vehicle, skip setting TFT and soak temperatures
If $Vehicle_Flag = 1 Then Goto End_Desired_TFT:

'Set trans fluid temp to current TFT setpoint
Let $Desired_Trans_Temp = $CurrentRunTemp
Gosub Set_Trans_Temp

'Set soak-air temp

'DegF to DegC conversions
'0 DegF = -17.78 DegC
'-1 DegF = -18.3 DegC
'-10 DegF = -23.3 DegC
'-20 DegF = -28.9 DegC
'-30 DegF = -34.4 DegC
'-40 DegF = -40.0 DegC

'HIL Dyno
If $HIL_Flag = 1
	'If temperature check is enabled
	If $TFT_Test = 1
		If $CurrentRunTemp < -17.78
			'If setpoint is below 0DegF (-17.78 DegF), set soak-air temperature max cooling
			Let $Desired_Soak_Temp = $CurrentRunTemp
		Else
			'If setpoint is greater than 0DegF (-17.78 DegF), set soak-air to 10 DegF (-23.3 DegC)
			Let $Desired_Soak_Temp = 10
		End
		'Set soak-air temperature	
		Let $Desired_Soak_Temp = 10
		Gosub Set_HIL_Dyno_Soak_Air
	End	
End
'Standard Dyno Cell
If $Standard_Cell = 1
	'If temperature check is enabled
	If $TFT_Test = 1
		If $CurrentRunTemp < 25
			'If setpoint is below 25 DegC, set soak-air temperature to the setpoint value
			Let $Desired_Soak_Temp = $CurrentRunTemp
		Else
			'If setpoint is greater than 25 DegC, set soak-air to 25 DegC
			Let $Desired_Soak_Temp = 25
		End
		'Set soak-air temperature
		Gosub Set_Soak_Air
	End
End
End_Desired_TFT:

End_Sub

'*******************************************************
Sub Passive_Temp
'*******************************************************
Log_Message (Passive_Temp subroutine started)

'For small temperature deltas between setpoint and measured TFT, wait for TFT to passively warm to setpoint temperature or naturally cool to TFT setpoint
If $TFT_Delta < 10
	'For small pressure deltas, shift PRNDL to Neutral
	Let $Desired_PRNDL_Position = 2
Else
	'For larger pressure deltas, shift PRNDL to Overdrive
	Let $Desired_PRNDL_Position = 4
End
Gosub Set_PRNDL_Position

'Widen acceptance threshold for passive temp setpoints below 0 DegC.
If $CurrentRunTemp < 0
	Let $Desired_Trans_Temp = $CurrentRunTemp - 10
Else
	Let $Desired_Trans_Temp = $CurrentRunTemp + 10
End

'Initialize passive temp timers
Let $Elapsed_Passive_Time = 0

'Start passive temp timers
Let $Start_Passive_Time = Timer
Let $Minute_Counter_Start = Timer

'Capture passive temp starting temp
Let $PT_Start_Temp = TCTFT_TFT

'Establish maximum passive temp time
Let $Max_Passive_Temp_Time_Limit = 600

'Set transmission fluid temperature
Gosub Set_Trans_Temp

'Reset PCM parameters
Select_Case $Trans_Select
	Case = 2
		'8F24
		Gosub TRAM_Reset_8F
	Case = 3
		'10R140
		Gosub TRAM_Reset_10R		
	Case = 4
		'8F57
		Gosub TRAM_Reset_8F				
	Case = 6
		'10R60/80
		Gosub TRAM_Reset_10R
	Case = 7
		'8F35
		Gosub TRAM_Reset_8F
	Case = 8
		'6R80
		Gosub TRAM_Reset_6R	
End_Select

'Start passive temp control loop
Do
	'Update timer
	Let $Elapsed_Passive_Time = Timer - $Start_Passive_Time
	'Capture TFT
	Let $TCTFT_TFT = TCTFT_TFT
	'Calculate temperature delta
	Let $TFT_Delta = $TCTFT_TFT - $CurrentRunTemp
	'If measured TFT is within acceptable range, exit passive temp control loop
	If $TCTFT_TFT >= $TFT_Low_Threshold
		If $TCTFT_TFT <= $TFT_High_Threshold
			Log_Message (Passive Temp took %%$Elapsed_Passive_Time,1D%% seconds from %%$PT_Start_Temp,0D%% to %%$TCTFT_TFT,1D%% DegC.)
			Goto Passive_Temp_Reached:
		End
	End
	'If passive temp times out:
	If $Elapsed_Passive_Time > $Max_Passive_Temp_Time_Limit
		'If measured TFT is above high threshold:
		If $Temp_High_Flag = 1
			'Calculate temperature delta
			Let $TFT_Delta = $TCTFT_TFT - $CurrentRunTemp
			'If temperature delta is within 10 DegC: 
			If $TFT_Delta < 10
				'Reset passive temp timer
				Let $Elapsed_Passive_Time = 0
				Let $Start_Passive_Time = Timer
			Else
				'For larger temperature deltas, use Smart Temp to manage TFT setpoints
				Gosub Smart_Temp
			End
		End
		'If measured TFT is below low threshold
		If $Temp_Low_Flag = 1
			'Calculate temperature delta
			Let $TFT_Delta = $CurrentRunTemp - $TCTFT_TFT
			'If temperature delta is within 10 DegC: 
			If $TFT_Delta < 10
				'Reset passive temp timer
				Let $Elapsed_Passive_Time = 0
				Let $Start_Passive_Time = Timer
			Else
				'For larger temperature deltas, use Smart Temp to manage TFT setpoints
				Gosub Smart_Temp
			End
		End
	End
	Message_Box (Message_Time = 5, Title = TFT out of range... , Buttons = 2 , Entry_Field = 0 , Message = %%New_Line%%Waiting to achieve %%$CurrentRunTemp, 0D%% DegC TFT.%%New_Line%%TFT is currently %%$TCTFT_TFT, 1D%% DegC.%%New_Line%%%%New_Line%% If you would like to shut down the test to manually reach desired TFT, Press "Yes".	%%New_Line%%%%New_Line%% Press "No" to skip TFT check.%%New_Line%%%%New_Line%%To skip to the next temperature setpoint, press "Cancel".%%New_Line%%%%New_Line%%AutoTEST will automatically skip to the next temperature setpoint in %%$Time_Remaining,0D%% seconds. , Height = 3800 , Width = 5000)
	Wait (0.1)
	'Manage Message Box response
	Let $Operator_Response = Response
	If $Operator_Response = 2
		'No (Skip TFT Check)
		Log_Message (TFT routine skipped by user.)
		Screen_Message (Yellow,TFT routine skipped by user.)
		'Skip passive temp
		Goto Passive_Temp_Reached:
	End
	If $Operator_Response = 1
		'Yes/OK (Shut down to manually reach temp)
		Screen_Message (Yellow,VFS Sweep Test was stopped by the user.)
		'End test
		Gosub Stop_Test
		End_Test
	End
Loop		

Passive_Temp_Reached:

'Calculate elapsed passive temp time
Let $Elapsed_TempAction_Time = $Elapsed_Passive_Time

End_Sub

'*******************************************************
Sub Smart_Temp
'*******************************************************
Log_Message (Smart_Temp subroutine started)

'If Active Cooldown has timed out:
If $Cooldown_Fail_Flag = 1
	'Reset Flag
	Let $Cooldown_Fail_Flag = 0
End

'If Active Warmup has timed out:
If $Warmup_Failed_Flag = 1
	'Reset Flag
	Let $Warmup_Failed_Flag = 0
End

'If all points are the same TFT setpoint, skip finding min, max, and nearest setpoints
If $All_Points_Same_Flag = 1
	Let $Temp_Manage_Sw = 1
	Goto Manage_Temp:
End	

'Temp Management Switch
'1. Always perform current setpoint
'2. Cool or soak to minimum available setpoint, then warm to next highest setpoint
'3. Cool only to next lowest available setpoint, then warm to next highest setpoint
'4. Always warm-up to next highest available setpoint, then cool to minimum available setpoint
'5. Always warm-up to next highest available setpoint, then cool to Next Lowest available setpoint

'Set TFT management strategy
Let $Temp_Manage_Sw = 3

'Establish lower cooling temperature limit for processed water. Experimentally verify value of 40 DegC.
Let $Lower_Cooling_Limit = 40

'Set index to current testpoint
Let $Smart_Temp_Index = $Current_Testpoint

'Initialize Flags
Let $Start_from_zero_flag = 0
Let $Found_New_Testpoint = 0
Let $Stop_And_Soak_Flag = 0
Let $In_Range_of_Other_Setpoint = 0 
Let $Smart_Temp_Flag = 0

'Initialize target testpoint
Let $Target_Testpoint = $Current_Testpoint

'Capture current TCTFT_TFT
Let $TCTFT_TFT = TCTFT_TFT

'Select Target TFT to determine, min, max, and nearest TFT setpoints
Select_Case $Temp_Manage_Sw
	Case = 1
		'Always choose current testpoint
		Log_Message (Temp_Manage_Sw = %%$Temp_Manage_Sw%%. Always cool/soak or warm current testpoint.)
		'Initialize to current setpoint
		Let $Target_TFT = $CurrentRunTemp

	Case = 2
		'Find minimum available setpoint
		Log_Message (Temp_Manage_Sw = %%$Temp_Manage_Sw%%. Always cool/soak to Minimum Available TFT Setpoint prior to warming to higher TFT setpoints.)
		'Initialize to current setpoint
		Let $Target_TFT = $CurrentRunTemp		
	Case = 3
		'Find next lowest TFT setpoint
		Log_Message (Temp_Manage_Sw = %%$Temp_Manage_Sw%%. Always cool/soak to Next Lowest TFT Setpoint prior to warming to higher TFT setpoints.)
		'Initialize to setpoint below current tctft_tft
		Let $Target_TFT = $TCTFT_TFT
	Case = 4
		'Find next highest TFT setpoint, find minimum TFT setpoint
		Log_Message (Temp_Manage_Sw = %%$Temp_Manage_Sw%%. Always warm to Next Highest TFT Setpoint before cooling/soaking to Minimum Available TFT Setpoint.)
		'Initialize to setpoint above current tctft_tft
		Let $Target_TFT = $TCTFT_TFT
	Case = 5
		'Find next highest TFT setpoint, find next lowest TFT setpoint
		Log_Message (Temp_Manage_Sw = %%$Temp_Manage_Sw%%. Always warm to Next Highest TFT Setpoint before cooling/ soaking to Next Lowest Available TFT Setpoint.)
		'Initialize to setpoint above current tctft_tft
		Let $Target_TFT = $TCTFT_TFT
End_Select
		
'Initialize remaining tft setpoints to target TFT value
Let $Min_Remaining_TFT_Setpoint = $Target_TFT
Let $Max_Remaining_TFT_Setpoint = $Target_TFT
Let $Next_Lowest_TFT_Setpoint = $Target_TFT
Let $Next_Highest_TFT_Setpoint = $Target_TFT

'Initialize At_Lowest and At_Highest TFT setpoint flags
Let $At_Lowest_Available_TFT = 0
Let $At_Highest_Available_TFT = 0

'Initialize Next Lowest and Next Highest Flags
Let $Next_Lowest_Flag = 0
Let $Next_Highest_flag = 0

'Determine Next Lowest TFT value
Let $TempQuickMatrix_Index = 0

'Start Find TFT setpoints control loop
Do
	'Increment index
	Let $TempQuickMatrix_Index = $TempQuickMatrix_Index + 1
	'Exit loop when all quick matrix indices have been completed
	If $TempQuickMatrix_Index > $TempQuickMatrix_Rows Then Goto Done_Finding_TFT_Setpoints:
	'Extract TFT setpoint from quick matrix
	Let $QuickMatrix_TFT = $TempQuickMatrix ($TempQuickMatrix_Index , 1)
	'Extract number of setpoints remaining
	Let $TFTs_Remaining = $TempQuickMatrix ($TempQuickMatrix_Index , 2)
	'If there are still setpoints remaining:
	If $TFTs_Remaining > 0
		'Determine if current TCTFT_TFT is within range of another setpoint
		Let $QuickMatrix_TFT_Low_Threshold = $QuickMatrix_TFT - 3
		Let $QuickMatrix_TFT_High_Threshold = $QuickMatrix_TFT + 3
		If $TCTFT_TFT >= $QuickMatrix_TFT_Low_Threshold
			If $TCTFT_TFT <= $QuickMatrix_TFT_High_Threshold
				'Within range of another sepoint
				Let $In_Range_of_Other_Setpoint = 1
				Let $In_Range_Setpoint_Value = $QuickMatrix_TFT
				Log_Message (Smart Temp has determined that the current TFT of %%$TCTFT_TFT,0D%% DegC is within range of setpoint %%$QuickMatrix_TFT%% DegC.)
			End
		End
		'Find minimum tft setpoint remaining
		If $QuickMatrix_TFT < $Min_Remaining_TFT
			Let $Min_Remaining_TFT_Setpoint = $QuickMatrix_TFT
		Else
			Let $At_Lowest_Available_TFT = 1
		End
		'Find maximum tft setpoint remaining
		If $QuickMatrix_TFT > $Max_Remaining_TFT_Setpoint
			Let $Max_Remaining_TFT_Setpoint = $QuickMatrix_TFT
		Else
			Let $At_Highest_Available_TFT = 1
		End
		'Find Next Lowest Setpoint remaining
		If $QuickMatrix_TFT < $Target_TFT
			If $Next_Lowest_Flag = 0
				Let $Next_Lowest_TFT_Setpoint = $QuickMatrix_TFT
				Let $Next_Lowest_Flag = 1
			End
			If $Next_Lowest_Flag = 1
				If $QuickMatrix_TFT > $Next_Lowest_TFT_Setpoint
					Let $Next_Lowest_TFT_Setpoint = $QuickMatrix_TFT
				End	
			End
		End
		'Find Next Highest Setpoint
		If $QuickMatrix_TFT > $Target_TFT
			If $Next_Highest_Flag = 0
				Let $Next_Highest_TFT_Setpoint = $QuickMatrix_TFT
				Let $Next_Highest_Flag = 1
			End
			If $Next_Highest_Flag = 1
				If $QuickMatrix_TFT < $Next_Highest_TFT_Setpoint
					Let $Next_Highest_TFT_Setpoint = $QuickMatrix_TFT
				End	
			End
		End		
	End
Loop
Done_Finding_TFT_Setpoints:

'Log remaining TFT setpoint status	
Log_Message (   TCTFT_TFT is %%$TCTFT_TFT,1D%% DegC for CurrentRunTemp = %%$CurrentRunTemp%% DegC setpoint for run %%$Current_Testpoint%% of %%$Total_Testpoints%%.)
If $All_Points_Same_Flag = 1
	Log_Message (All testpoints are at the same TFT setpoint)
Else	
	If $At_Lowest_Available_TFT = 1
		Log_Message (Current_Testpoint is at lowest available TFT setpoint)
	Else
		If $At_Highest_Available_TFT = 1
			Log_Message (Current_Testpoint is at highest available TFT setpoint)
		Else
			Log_Message (   Min_Remaining_TFT_Setpoint is %%$Min_Remaining_TFT_Setpoint%%)
			Log_Message (   Max_Remaining_TFT_Setpoint is %%$Max_Remaining_TFT_Setpoint%%)
			Log_Message (   Next_Lowest_TFT_Setpoint is %%$Next_Lowest_TFT_Setpoint%%)
			Log_Message (   Next_Highest_TFT_Setpoint is %%$Next_Highest_TFT_Setpoint%%)
		End
	End
End

Manage_Temp:
'Perform temperature management actions based on temp management strategy
Select_Case $Temp_Manage_Sw
	Case = 1
		'Always Cool/Soak or Warm to Current Testpoint
		If $Temp_High_Flag = 1
			'Above TFT Setpoint range
			'Capture TCTFT_TFT
			Let $TCTFT_TFT = TCTFT_TFT
			If $TCTFT_TFT < $Lower_Cooling_Limit
				'If temperature is below minimum cooling limit, set recheck flag, and stop and soak powertrain
				Let $Recheck_TFT_Flag = 1
				Gosub Stop_And_Soak
				Goto Done_Smart_Temp:
			Else
				'If temperature is above minimum cooling limit, set recheck flag, and perform active cooldown
				Let $Recheck_TFT_Flag = 1
				Gosub Active_Cooldown
				Goto Done_Smart_Temp:
			End
		Else
			'Below TFT Setpoint range, set recheck flag, and perform active warmup
			Let $Recheck_TFT_Flag = 1	
			Gosub Active_Warmup
			Goto Done_Smart_Temp:
		End
	Case = 2
		'Will always cool/soak to minimum available TFT setpoint
		If $At_Lowest_Available_TFT = 1
			'If Current_Testpoint is minimum available TFT Setpoint, set target testpoint to current testpoint
			Let $Target_Testpoint = $Current_Testpoint
			'Exit loop
			Goto Done_Smart_Temp:
		End
		'Initialize index
		Let $Smart_Temp_Index = 0
		
		'Start find testpoint with minimum TFT setpoint control loop
		Do
			'Increment index
			Let $Smart_Temp_Index = $Smart_Temp_Index + 1
			'Exit loop when all testpoints have completed
			If $Smart_Temp_Index > $Total_Testpoints Then Goto Done_Smart_Temp:
			'Determine point status of index. Select testpoints with "Run" status only
			If Point_Status ($Smart_Temp_Index) = Run
				'Extract TFT Setpoint from TestMatrix
				Let $Smart_TFT = $TestMatrix ($Smart_Temp_Index , 1)
				'Determine if TFT setpoint is the minimum remaining setpoint
				If $Smart_TFT = $Min_Remaining_TFT_Setpoint
					'If found, set target testpoint to TFT matching index
					Let $Target_Testpoint = $Smart_Temp_Index
					Log_Message (Minimum remaining TFT setpoint for testpoint %%$Current_Testpoint%% of %%$Total_Testpoints%% is %%$Min_Remaining_TFT_Setpoint%%. Point to be changed to %%$Smart_Temp_Index%%.)
					'Set Found New Testpoint flag
					Let $Found_New_Testpoint = 1
					'Set Smart_Temp_Flag
					Let $Smart_Temp_Flag = 1
					'Exit loop
					Goto Done_Smart_Temp:
				End
			End
		Loop
		
	Case = 3
		'Will always soak to Next Lowest TFT Setpoint
		
		'Initialize index
		Let $Smart_Temp_Index = 0
		
		'Start find testpoint with Next Lowest TFT setpoint control loop
		Do
			'Increment index
			Let $Smart_Temp_Index = $Smart_Temp_Index + 1
			'Exit loop when all testpoints have completed
			If $Smart_Temp_Index > $Total_Testpoints Then Goto Done_Smart_Temp:
			'Determine point status of index. Select testpoints with "Run" status only
			If Point_Status ($Smart_Temp_Index) = Run
				'Extract TFT Setpoint from TestMatrix
				Let $Smart_TFT = $TestMatrix ($Smart_Temp_Index , 1)
				'Determine if TFT setpoint is the Next Lowest remaining setpoint
				If $Smart_TFT = $Next_Lowest_TFT_Setpoint
					'If found, set target testpoint to TFT matching index
					Let $Target_Testpoint = $Smart_Temp_Index
					Log_Message (Next Lowest TFT for testpoint %%$Current_Testpoint%% of %%$Total_Testpoints%% is %%$Next_Lowest_TFT_Setpoint%%. Point to be changed to %%$Smart_Temp_Index%%.)
					'Set Found New Testpoint flag
					Let $Found_New_Testpoint = 1
					'Set Smart_Temp_Flag
					Let $Smart_Temp_Flag = 1
					'Exit loop
					Goto Done_Smart_Temp:
				End
			End
		Loop
		
	Case = 4
		'Will always warm to the next highest setpoint, then cool/soak to minimum available TFT setpoint
		'If TCTFT_TFT is below TFT Range, set recheck flag, and perform active warmup  
		If $Temp_Low_Flag = 1
			'Set recheck flag
			Let $Recheck_TFT_Flag = 1
			'Perform Active Warmup
			Gosub Active_Warmup
			'Exit loop
			Goto Done_Smart_Temp:
		End
		If $Temp_High_Flag = 1
		
			'Initialize index
			Let $Smart_Temp_Index = 0
			
			'Start find testpoint with highest TFT setpoint then Minimum Remaining TFT setpoint control loop
			Do
				'Increment index
				Let $Smart_Temp_Index = $Smart_Temp_Index + 1
				'Exit loop when all testpoints have completed
				If $Smart_Temp_Index > $Total_Testpoints Then Goto Done_Smart_Temp:
				'Determine point status of index. Select testpoints with "Run" status only
				If Point_Status ($Smart_Temp_Index) = Run
					'Extract TFT Setpoint from TestMatrix
					Let $Smart_TFT = $TestMatrix ($Smart_Temp_Index , 1)
					'Determine if TFT setpoint is the Next Highest remaining setpoint
					If $At_Highest_Available_TFT = 1
						'If TCTFT_TFT is above TFT range for Highest Available TFT setpoint, find Minimum Remaining TFT Setpoint
						If $Smart_TFT = $Min_Remaining_TFT_Setpoint
							'If found, set target testpoint to TFT matching index
							Let $Target_Testpoint = $Smart_Temp_Index
							Log_Message (Minimum remaining TFT setpoint for testpoint %%$Current_Testpoint%% of %%$Total_Testpoints%% is %%$Min_Remaining_TFT_Setpoint%%. Point to be changed to %%$Smart_Temp_Index%%.)
							'Set Found New Testpoint flag
							Let $Found_New_Testpoint = 1
							'Set Smart_Temp_Flag
							Let $Smart_Temp_Flag = 1
							'Exit loop
							Goto Done_Smart_Temp:						
						End
					Else
						'If not at Highest Available TFT Setpoint, find Next Highest Available Setpoint
						If $Smart_TFT = $Next_Highest_TFT_Setpoint
							'If found, set target testpoint to TFT matching index
							Let $Target_Testpoint = $Smart_Temp_Index
							Log_Message (Next Highest TFT for testpoint %%$Current_Testpoint%% of %%$Total_Testpoints%% is %%$Next_Highest_TFT_Setpoint%%. Point to be changed to %%$Smart_Temp_Index%%.)
							'Set Found New Testpoint flag
							Let $Found_New_Testpoint = 1
							'Set Smart_Temp_Flag
							Let $Smart_Temp_Flag = 1
							'Exit loop
							Goto Done_Smart_Temp:
						End
					End	
				End
			Loop
		End
	Case = 5
		'Will always warm to the next highest setpoint, then cool/soak to the next lowest TFT setpoint
		'If TCTFT_TFT is below TFT Range, set recheck flag, and perform active warmup  
		If $Temp_Low_Flag = 1
			'Set recheck flag
			Let $Recheck_TFT_Flag = 1
			'Perform Active Warmup
			Gosub Active_Warmup
			'Exit loop
			Goto Done_Smart_Temp:
		End
		If $Temp_High_Flag = 1
		
			'Initialize index
			Let $Smart_Temp_Index = 0
			
			'Start find testpoint with highest TFT setpoint then next lowest TFT setpoint control loop
			Do
				'Increment index
				Let $Smart_Temp_Index = $Smart_Temp_Index + 1
				'Exit loop when all testpoints have completed
				If $Smart_Temp_Index > $Total_Testpoints Then Goto Done_Smart_Temp:
				'Determine point status of index. Select testpoints with "Run" status only
				If Point_Status ($Smart_Temp_Index) = Run
					'Extract TFT Setpoint from TestMatrix
					Let $Smart_TFT = $TestMatrix ($Smart_Temp_Index , 1)
					'Determine if TFT setpoint is the Next Highest remaining setpoint
					If $At_Highest_Available_TFT = 1
						'If TCTFT_TFT is above TFT range for Highest Available TFT setpoint, find Next Lowest Available TFT Setpoint
						If $Smart_TFT = $Next_Lowest_TFT_Setpoint
							'If found, set target testpoint to TFT matching index
							Let $Target_Testpoint = $Smart_Temp_Index
							Log_Message (Next Lowest remaining TFT setpoint for testpoint %%$Current_Testpoint%% of %%$Total_Testpoints%% is %%$Next_Lowest_TFT_Setpoint%%. Point to be changed to %%$Smart_Temp_Index%%.)
							'Set Found New Testpoint flag
							Let $Found_New_Testpoint = 1
							'Set Smart_Temp_Flag
							Let $Smart_Temp_Flag = 1
							'Exit loop
							Goto Done_Smart_Temp:						
						End
					Else
						'If not at Highest Available TFT Setpoint, find Next Highest Available Setpoint
						If $Smart_TFT = $Next_Highest_TFT_Setpoint
							'If found, set target testpoint to TFT matching index
							Let $Target_Testpoint = $Smart_Temp_Index
							Log_Message (Next Highest TFT for testpoint %%$Current_Testpoint%% of %%$Total_Testpoints%% is %%$Next_Highest_TFT_Setpoint%%. Point to be changed to %%$Smart_Temp_Index%%.)
							'Set Found New Testpoint flag
							Let $Found_New_Testpoint = 1
							'Set Smart_Temp_Flag
							Let $Smart_Temp_Flag = 1
							'Exit loop
							Goto Done_Smart_Temp:
						End
					End	
				End
			Loop
		End		
End_Select

Done_Smart_Temp:
'Skip testpoints if new testpoint 
If $Target_Testpoint ~= $Current_Testpoint
	Let $Recheck_TFT_Flag = 1
	Gosub Skip_Testpoints
End

End_Sub

'*******************************************************
Sub Skip_Testpoints
'*******************************************************
Log_Message (Running Skip_Testpoints subroutine)

If $Found_New_Testpoint = 1
	'Set Current_Testpoint to target testpoint determined from Smart Temp
	Let $Current_Testpoint = $Target_Testpoint
	'Set AutoTEST current testpoint variable
	Testpoint = $Current_Testpoint
	Log_Message (Changing testpoint to %%$Current_Testpoint%% of %%$Total_Testpoints%%.)
	'Reset found new testpoint flag
	Let $Found_New_Testpoint = 0
	'Set skipped point flag
	Let $Skipped_Point_Flag = 1
End

End_Sub

'*******************************************************
Sub Active_Cooldown
'*******************************************************
Let !Active_Cooldown_Start_Time = %%Time%%

Log_Message (Starting Active Cooldown subroutine at %%!Active_Cooldown_Start_Time%%)
Screen_Message (Green,Running Active Cooldown Mode)

'Capture engine speed. Start engine if not running
Let $TCRPM_NE_BAR = TCRPM_NE_BAR
If $TCRPM_NE_BAR < 100
	Gosub Start_Engine
End

'Capture PRNDL position
Let $THMI_ST_PRND_DES = THMI_ST_PRND_DES
'Shift PRNDL to Overdrive
If $THMI_ST_PRND_DES ~= 4
	If $HIL_Flag = 1
		Let $Desired_PRNDL_Position = 3
	Else	
		Let $Desired_PRNDL_Position = 4
	End	
	Gosub Set_PRNDL_Position
End

'Initialize flags
Let $Warmup_Flag = 0
Let $Cooldown_Fail_Flag = 0

'Set Cooldown flag
Let $Cooldown_Flag = 1

'Capture starting temperature for active cooldown
Let $Active_Cooldown_StartTemp = TCTFT_TFT

'Determine TFT Valve setpoint
Let $Desired_Trans_Temp = $CurrentRunTemp
'Set desired TFT to 5 DegC below setpoint
If $Desired_Trans_Temp > $Lower_Cooling_Limit
	Let $Desired_Trans_Temp = $CurrentRunTemp - 5
Else
	'Set flag and exit active cooldown
	Let $Cooldown_Fail_Flag = 1
	Log_Message (Active Cooldown desired temp is below Lower_Cooling_Limit. Exiting Active Cooldown.)
End
'Set transmission fluid temperature setting
Gosub Set_Trans_Temp

'Select Active Cooling Holding Gear
Select_Case $Trans_Select 
	Case = 1
		'6F35
		Let $Hold_Gear = 4
	Case = 2
		'8F24
		Let $Hold_Gear = 6
	Case = 3
		'10R60/80
		Let $Hold_Gear = 7
	Case = 4
		'8F57
		Let $Hold_Gear = 7
	Case = 5
		'DPS6
		Let $Hold_Gear = 4
	Case = 6
		'10R60/80
		Let $Hold_Gear = 7
	Case = 7
		'8F35
		Let $Hold_Gear = 7
	Case = 8
		'6R80
		Let $Hold_Gear = 4		
End_Select

'Set output speed, gear, and input torque 
Gosub Set_Speed_Load

'Set active cooldown timeout limit
If $Smart_Temp_Flag = 1
	'Set to 1hr for Smart Temp testpoints. Revise as needed
	Let $Active_Cooldown_Time_Limit = 3600
Else
	'Set to 10minutes for initial cooldown
	'Leave at one hour for now until Smart Temp is fixed.
	Let $Active_Cooldown_Time_Limit = 3600
End

'Initialize active cooldown timer
Let $Elapsed_Active_Cooldown_Time = 0
Let $Active_Cooldown_Start_Time = Timer

'Set Cooling progress check time
'Let $Cooling_Progress_Check_Time = 300
Let $Cooling_Progress_Check_Time = 3600

'Initialize cooling progress timer
Let $Elapsed_Cooling_Progress_Time = 0
Let $Cooling_Progress_Start_Time = Timer

'Start active cooldown control loop
Do
	'Update timers
	Let $Elapsed_Active_Cooldown_Time = Timer - $Active_Cooldown_Start_Time
	Let $Elapsed_Cooling_Progress_Time = Timer - $Cooling_Progress_Start_Time
	'Calculate time remaining
	Let $Cooldown_Time_Remaining = $Active_Cooldown_Time_Limit - $Elapsed_Active_Cooldown_Time
	'Capture TCTFT_TFT
	Let $TCTFT_TFT = TCTFT_TFT
	'Use TFT setpoint as the target temperature. Exit loop when below TFT setpoint
	If $TCTFT_TFT < $CurrentRunTemp
		'Calculate cooling progress
		Let $Active_Cooldown_Progress = $Active_Cooldown_StartTemp - $TCTFT_TFT
		Log_Message (Active_Cooldown took %%$Elapsed_Active_Cooldown_Time,1D%% seconds from %%$Active_Cooldown_StartTemp,0D%% DegC to %%$TCTFT_TFT,0D%% DegC. Total cooling was %%$Active_Cooldown_Progress,0D%% DegC.)
		Goto Active_Cooldown_Timeout:
	End
	'If active cooldown reaches minimum cooling limit, set flag and exit loop to stop and soak.
	If $TCTFT_TFT < $Lower_Cooling_Limit
		Log_Message (Lower Cooling Limit reached during Active Cooldown. Switching to Stop and soak.)
		'Set Flag
		Let $Cooldown_Fail_Flag = 1
		'Exit loop
		Goto Active_Cooldown_Timeout:
	End
	'If cooling has stalled, set flag and exit loop
	If $Elapsed_Cooling_Progress_Time > $Cooling_Progress_Check_Time
		'Reinitialize timer
		Let $Elapsed_Cooling_Progress_Time = 0
		Let $Cooling_Progress_Start_Time = Timer
		'Compare current temperature to previous sample
		If $TCTFT_TFT > $Previous_TCTFT_TFT
			'Calculate cooling progress
			Let $Active_Cooldown_Progress = $Active_Cooldown_StartTemp - $TCTFT_TFT	
			Log_Message (Cooling has stalled. Total cooling is %%$Active_Cooldown_Progress,0D%% DegC.)
			'Set flag
			Let $Cooldown_Fail_Flag = 1
			'Exit loop
			Goto Active_Cooldown_Timeout:
		End
		'Set previous value of TCTFT_TFT
		Let $Previous_TCTFT_TFT = $TCTFT_TFT
	End
	'If active cooldown times out, set flag and exit loop
	If $Elapsed_Active_Cooldown_Time > $Active_Cooldown_Time_Limit
		'Calculate cooling progress
		Let $Active_Cooldown_Progress = $Active_Cooldown_StartTemp - $TCTFT_TFT
		Log_Message (Active Cooldown for testpoint %%$Current_Testpoint%% of %%$Total_Testpoints%% has timed out. Active Cooldown cooled %%$Active_Cooldown_Progress,0D%% DegC to %%$TCTFT_TFT,0D%% DegC.)
		'Set cooldown fail flag
		Let $Cooldown_Fail_Flag = 1
		'Exit loop
		Goto Active_Cooldown_Timeout:
	End
	'Active Cooldown user interaction
	If $Smart_Temp_Flag = 1
		Message_Box (Message_Time = 5, Title = Active Transmission Cooling... , Buttons = 2 , Entry_Field = 0 , Message = %%New_Line%%Attempting to achieve %%$CurrentRunTemp,0D%% DegC TFT.%%New_Line%%TCTFT_TFT is currently %%$TCTFT_TFT, 1D%% DegC.%%New_Line%%%%New_Line%% If you would like to shut down the test to manually reach the desired TFT, press "YES".%%New_Line%%%%New_Line%% Press "No" to skip cooling and TFT check., Height = 3800 , Width = 5000)
	Else
		Message_Box (Message_Time = 5, Title = Active Transmission Cooling... , Buttons = 2 , Entry_Field = 0 , Message = %%New_Line%%Attempting to achieve %%$CurrentRunTemp,0D%% DegC TFT.%%New_Line%%TCTFT_TFT is currently %%$TCTFT_TFT, 1D%% DegC.%%New_Line%%%%New_Line%% If you would like to shut down the test to manually reach the desired TFT, press "YES".%%New_Line%%%%New_Line%% Press "No" to skip cooling and TFT check.%%New_Line%%%%New_Line%%AutoTEST will automatically skip to the next temperature setpoint in %%$Cooldown_Time_Remaining,0D%% seconds. , Height = 3800 , Width = 5000)
	End
	Wait (0.1)
	'Capture operator response
	Let $Operator_Response = Response
	If $Operator_Response = 2
		'No (Skip TFT Check)
		Let $Recheck_TFT_Flag = 0
		Log_Message (Active Cooling routine skipped by user.)
		Screen_Message (Yellow,Active Cooling routine skipped by user.)
		Goto Active_Cooldown_Timeout:
	End
	If $Operator_Response = 1
		'Yes/OK (Shut down test to manually reach temp)
		Log_Message (VFS Characterization was stopped by the user during Active Cooldown. Active Cooldown cooled %%$Active_Cooldown_Progress,0D%% DegC to %%$TCTFT_TFT,0D%% DegC for %%$Elapsed_Active_Cooldown_Time,0D%% seconds for a %%$CurrentRunTemp%%  DegC setpoint.
		Screen_Message (Yellow,VFS Characterization was stopped by the user.)
		Gosub Stop_Test
		End_Test
	End
Loop

Active_Cooldown_Timeout:

'Turn off PID control
PIDs_Off

'Return to automatic gear
Set RMSC_GR_TYP_CMD_S ($RMSC_GR_TYP_CMD_S_Base,0)
Set RMSC_D_GR_TYP_SW_S ($RMSC_D_GR_TYP_SW_S_Base,0)

'Capture temperature data
Let $TCTFT_TFT = TCTFT_TFT
Let $Measured_Sump_Temp = TransSump_Tmp
Let $Measured_TransCase_Out_Tmp = TransCase_Out_Tmp
Let $Measured_TransCase_In_Tmp = TransCase_In_Tmp
Let $TransOil_Vlv_Pos = TransOil_Vlv_Pos

'Determine temp action
If $Cooldown_Fail_Flag = 1
	Let !Temp_Action = Active_Cooldown_Failed
Else
	Let !Temp_Action = Active_Cooldown_Successful
End	

'Record temp data in Test Setup
Gosub TFT_Data

'Reset cooldown flag
Let $Cooldown_Flag = 0

'Stop vehicle
Gosub Slowdown

End_Sub

'*******************************************************
Sub Active_Warmup
'*******************************************************
Let !Active_Warmup_Start_Time = %%Time%%

Log_Message (Starting Active Warmup Mode at %%!Active_Warmup_Start_Time%%. TOT is %%$TCTFT_TFT,1D%% DegC for a %%$CurrentRunTemp,1D%% DegC testpoint.))
Screen_Message (Green,Starting Active Warmup)

Proceed_Warmup:

'Capture engine speed. Start engine if not running
Let $TCRPM_NE_BAR = TCRPM_NE_BAR
If $TCRPM_NE_BAR < 100
	Gosub Start_Engine
End

'Reset PCM parameters to base
Select_Case $Trans_Select
	Case = 2
		'8F24
		Gosub TRAM_Reset_8F
	Case = 3
		'10R140
		Gosub TRAM_Reset_10R		
	Case = 4
		'8F57
		Gosub TRAM_Reset_8F		
	Case = 6
		'10R60/80
		Gosub TRAM_Reset_10R
	Case = 7
		'8F35
	 	Gosub TRAM_Reset_8F
	Case = 8
		'6R80
	 	Gosub TRAM_Reset_6R		
End_Select

'Capture PRNDL position
Let $THMI_ST_PRND_DES = THMI_ST_PRND_DES
'Shift PRNDL to Overdrive
If $THMI_ST_PRND_DES ~= 4
	If $HIL_Flag = 1
		Let $Desired_PRNDL_Position = 3
	Else	
		Let $Desired_PRNDL_Position = 4
	End	
	Gosub Set_PRNDL_Position
End

'Release Brake
Set DynoBrake_Set (0,0) 

'Capture starting temperature for Active Warmup
Let $Active_Warmup_Start_TFT = TCTFT_TFT

'Initialize Active Warmup timer
Let $Elapsed_Active_Warmup_Time = 0
Let $Active_Warmup_Start_Time = Timer

'Determine TFT valve setpoint
Let $Desired_Trans_Temp = $CurrentRunTemp

'Initialize flags
Let $Cooldown_Flag = 0
Let $Warmup_Flag = 1

'Set transmission fluid temp to current TFT setpoint
Gosub Set_Trans_Temp

'Start cat temp monitor
If $HIL_Flag ~= 1
	Monitor_On Cat_Temp
	Log_Message (Starting Cat_Temp monitor. Active_Warmup.)
End

'Establish lower temperature warmup threshold for cold soak
If $CurrentRunTemp <= 25
	Let $Active_Warmup_TFT_Threshold = $CurrentRunTemp - 5
Else
	Let $Active_Warmup_TFT_Threshold = $CurrentRunTemp
End

'Navigate to WOT Block Pedal Upshifts and skip steady-state warmup
'Gosub Alternative_Warmup
Gosub Grade_Warmup
Goto Active_Warmup_Timeout:

' 'Set gear, output speed, and input torque
' Gosub Set_Speed_Load

' 'Establish Active Warmup Time Limit
' If $Smart_Temp_Flag ~= 1
	' 'Let $Active_Warmup_Time_Limit = 720
	' Let $Active_Warmup_Time_Limit = 3600
' Else
	' Let $Active_Warmup_Time_Limit = 3600
' End	

' 'Initialize torque adjustment timer
' Let $Elapsed_Engine_Torque_Adjustment_Time = 0
' Let $Engine_Torque_Adjustment_Start_Time = Timer

' 'Initialize Active Warmup fluid recirculation timer
' Let $Elapsed_Active_Warmup_Interruption_Time = 0
' Let $Active_Warmup_Interruption_Start_Time = Timer
' Let $Active_Warmup_Interruption_Time_Limit = 300
' Let $Active_Warmup_DynSpd_Low_Limit = $Output_Speed_Setpoint - 50
' Let $Active_Warmup_DynSpd_High_Limit = $Output_Speed_Setpoint + 50
' Let $Road_Grade_Limit = 30
' Let $Engine_Torque_Adjustment_Time_Limit = 3

' 'Start Active Warmup control loop
' Do
	' 'Update timers
	' Let $Elapsed_Active_Warmup_Time = Timer - $Active_Warmup_Start_Time
	' Let $Elapsed_Active_Warmup_Interruption_Time = Timer - $Active_Warmup_Interruption_Start_Time
	' Let $Elapsed_Engine_Torque_Adjustment_Time = Timer - $Engine_Torque_Adjustment_Start_Time
	' If $Elapsed_Active_Warmup_Interruption_Time > $Active_Warmup_Interruption_Time_Limit
		' 'Go to Active Warmup Interruption
		' Gosub Active_Warmup_Interruption
		' Goto Active_Warmup_Timeout:
	' End
	' 'Calculate time remaining
	' Let $Active_Warmup_Time_Remaining = $Active_Warmup_Time_Limit - $Elapsed_Active_Warmup_Time
	' 'Capture temperatures
	' Let $TCTFT_TFT = TCTFT_TFT
	' Let $TransCase_In_Tmp = TransCase_In_Tmp
	' Let $TransCase_Out_Tmp = TransCase_Out_Tmp
	' Let $Trans_Sump_Temp = TransSump_Tmp
	' Let $TransOil_Vlv_Pos = TransOil_Vlv_Pos
	' 'Capture Engine Speed
	' Let $DynSpd = DynSpd
	' 'Capture Grade
	' Let $RoadGrade_fbk = RoadGrade_fbk
	' 'If active warmup exceeds time limit, set warmup fail flag and exit loop
	' 'If DynSpd exceeds high limit, reduce engine torque
	' If $DynSpd > $Active_Warmup_DynSpd_High_Limit
		' If $RoadGrade_fbk = $Road_Grade_Limit
			' If $Elapsed_Engine_Torque_Reduction_Time > $Engine_Torque_Adjustment_Time_Limit
				' If $Torque_Setpoint > 125
					' Let $Torque_Setpoint = $Torque_Setpoint - 1
					' Log_Message (Torque setpoint reduced to %%$Torque_Setpoint,0D%% Nm. Dyno speed is %%$DynSpd,0D%% rpm for a %%$Output_Speed_Setpoint,0D%% rpm setpoint.)
					' Set SATQ_TQ_IMP_BASE_TRNS ($Torque_Setpoint,0) Using Pedal_Position_Cmd				
				' End	
				' 'Re-initialize timer
				' Let $Elapsed_Engine_Torque_Adjustment_Time = 0
				' Let $Engine_Torque_Adjustment_Start_Time = Timer
			' End
		' End
	' Else
		' If $DynSpd < $Active_Warmup_DynSpd_Low_Limit
			' If $RoadGrade_fbk = $Road_Grade_Limit
				' If $Elapsed_Engine_Torque_Reduction_Time > $Engine_Torque_Adjustment_Time_Limit
					' Let $Torque_Setpoint = $Torque_Setpoint + 1
					' Log_Message (Torque setpoint increased to %%$Torque_Setpoint,0D%% Nm. Dyno speed is %%$DynSpd,0D%% rpm for a %%$Output_Speed_Setpoint,0D%% rpm setpoint.)
					' Set SATQ_TQ_IMP_BASE_TRNS ($Torque_Setpoint,0) Using Pedal_Position_Cmd
					' 'Re-initialize timer
					' Let $Elapsed_Engine_Torque_Adjustment_Time = 0
					' Let $Engine_Torque_Adjustment_Start_Time = Timer
				' End
			' End
		' Else
			' If $Elapsed_Engine_Torque_Reduction_Time > $Engine_Torque_Adjustment_Time_Limit
				' If $Torque_Setpoint < 150
					' Let $Torque_Setpoint = $Torque_Setpoint + 1
					' Log_Message (Torque setpoint reduced to %%$Torque_Setpoint,0D%% Nm. Dyno speed is %%$DynSpd,0D%% rpm for a %%$Output_Speed_Setpoint,0D%% rpm setpoint.)
					' Set SATQ_TQ_IMP_BASE_TRNS ($Torque_Setpoint,0) Using Pedal_Position_Cmd
					' Let $Elapsed_Engine_Torque_Adjustment_Time = 0
					' Let $Engine_Torque_Adjustment_Start_Time = Timer					
				' End
			' End	
		' End	
	' End
	' If $Elapsed_Warmup_Time > $Active_Warmup_Time_Limit
		' 'Set flag
		' Let $Warmup_Failed_Flag = 1
		' 'Calculate warmup progress
		' Let $Active_Warmup_Progress = $TCTFT_TFT - $Active_Warmup_Start_TFT
		' Log_Message (Active Warmup has timed out after %%$Elapsed_active_Warmup_Time,0D%% seconds. Active Warmup progress was %%$Active_Warmup_Progress,0D%%DegC.)
		' 'Exit loop
		' Goto Active_Warmup_Timeout:
	' End
	' 'Exit active warmup if cat temp flag is active
	' If $Cat_Temp_High_Flag = 1
		' Let $Warmup_Failed_Flag = 1
		' Let $Warmup_Flag = 0
		' 'Exit loop
		' Goto Active_Warmup_Timeout:
	' End
	' 'Exit loop when Active Warmup threshold has been met
	' If $TCTFT_TFT > $Active_Warmup_TFT_Threshold
		' Let $Warmed_Up_Flag = 1
		' Let $TCTFT_TFT = TCTFT_TFT
		' Let $Commanded_TFT = $CurrentRunTemp
		' Let $Elapsed_TempAction_Time = $Elapsed_Active_Warmup_Time
		' Log_Message (Active Warmup took %%$Elapsed_Active_Warmup_Time,1D%% seconds to warm from %%$ActiveWarmup_StartTemp,0D%% DegC to %%$TCTFT_TFT,0D%% DegC for a %%$CurrentRunTemp,0D%% DegC setpoint.)
		' Goto Active_Warmup_Timeout:
	' End
	' 'Active Warmup user interaction
	' Message_Box (Message_Time = 5, Title = Active Transmission Warmup... , Buttons = 2 , Entry_Field = 0 , Message = %%New_Line%%Attempting to achieve %%$CurrentRunTemp, 0D%% DegC TFT.%%New_Line%%TCTFT_TFT is currently %%$TCTFT_TFT, 1D%% DegC.%%New_Line%%%%New_Line%%If you would like to shut down the test to manually reach the desired TFT, press "Yes".%%New_Line%%%%New_Line%% Press "No" to skip warmup and TFT check.%%New_Line%%%%New_Line%%Active Warmup will time out in %%$Active_Warmup_Time_Remaining,0D%% seconds if TFT setpoint is not achieved. , Height = 3800 , Width = 5000)
	' Wait (0.1)
	' 'Capture operator response
	' Let $Operator_Response = Response
	' If $Operator_Response = 2
		' 'No (Skip TFT Check)
		' Log_Message (TFT ROUTINE SKIPPED BY USER.)
		' Screen_Message (Yellow,TFT ROUTINE SKIPPED BY USER.)
		' 'Reset Recheck_TFT_Flag
		' Let $Recheck_TFT_Flag = 0
		' 'Exit Active Warmup
		' Goto Active_Warmup_Timeout:
	' End
	' If $Operator_Response = 1
		' 'Yes/OK (Shut down test to manually reach temp)
		' Screen_Message (Yellow, Test was stopped by the user.)
		' 'Reset warmup flag
		' Let $Warmup_Flag = 0
		' 'Terminate test
		' Gosub Terminate_Test
		' End_Test
	' End
	
' Loop

Active_Warmup_Timeout:

Let $Elapsed_Active_Warmup_Time = Timer - $Active_Warmup_Start_Time
Wait (2)

'Stop vehicle
Gosub Slowdown

'Reset gear override switch
Set RMSC_GR_TYP_CMD_S ($RMSC_GR_TYP_CMD_S_Base,0)
Set RMSC_D_GR_TYP_SW_S ($RMSC_D_GR_TYP_SW_S_Base,0)

'Reset PCM parameters to base
Select_Case $Trans_Select
	Case = 2
		'8F24
		Gosub TRAM_Reset_8F
	Case = 3
		'10R140
		Gosub TRAM_Reset_10R		
	Case = 4
		'8F57
		Gosub TRAM_Reset_8F		
	Case = 6
		'10R60/80
		Gosub TRAM_Reset_10R
	Case = 7
		'8F35
	 	Gosub TRAM_Reset_8F
	Case = 8
		'6R80
	 	Gosub TRAM_Reset_6R		
End_Select

'Rest warmup flag
Let $Warmup_Flag = 0

'If cat temp alarm
If $Cat_Temp_High_Flag = 1 
	Gosub Cat_Temp
End	

'Set transmission fluid valve temperature above TFT setpoint
Let $Desired_Trans_Temp = $CurrentRunTemp + 10
Gosub Set_Trans_Temp

'Capture warmup end time and log current temperature
Let !Warmup_End_Time = %%Time%%
Let $TCTFT_TFT = TCTFT_TFT
Log_Message (Ending Active Warmup Mode at %%!Warmup_End_Time%%. TFT is %%$TCTFT_TFT,1D%% DegC for a %%$CurrentRunTemp,0D%% DegC testpoint.))

End_Sub

'*******************************************************
Sub Alternative_Warmup
'*******************************************************
Log_Message (Running Alternative_Warmup Subroutine)

'Monitor engine speed
Monitor_On Engine_Running
Log_Message (Starting Engine_Running monitor. Alternative_Warmup.)

'Initialize warmup counter
Let $Active_Warmup_Count_Limit = 10000
Let $Active_Warmup_Count = 0

'Capture Spot Check Temp
Let $Active_Warmup_Spot_Check_Starting_Temp = TCTFT_TFT
Log_Message (Active_Warmup_Spot_Check_Starting_Temp is %%$Active_Warmup_Spot_Check_Starting_Temp,0D%% DegC.)

'Initialize Spot Check Timer
Let $Active_Warmup_Spot_Check_Start_Time = Timer
Let $Elapsed_Active_Warmup_Spot_Check_Time = 0
'Let $Active_Warmup_Spot_Check_Time_Limit = 300
Let $Active_Warmup_Spot_Check_Time_Limit = 7200

Reheat_Trans:

'Increment warm-up counter
Let $Active_Warmup_Count = $Active_Warmup_Count + 1

'Restart Engine if not already running
If $Low_Engine_Flag = 1
	Gosub Start_Engine
End
	
'Capture PRNDL position
Let $THMI_ST_PRND_DES = THMI_ST_PRND_DES
'Shift PRNDL to Overdrive
If $THMI_ST_PRND_DES ~= 4
	Log_Message (Checking PRNDL position for Overdrive. PRNDL position is %%$THMI_ST_PRND_DES%%.)
	If $HIL_Flag = 1
		Let $Desired_PRNDL_Position = 3
	Else	
		Let $Desired_PRNDL_Position = 4
	End	
	Gosub Set_PRNDL_Position
End

'Release brake
If $HIL_Flag = 1
	Set DynoBrake_Set (0,0)
Else
	Let $Desired_Emcon_Mode = 19
	Gosub Set_Emcon_Mode
End

Let $Warmup_Pedal = 100

Screen_Message (Green, Setting pedal to %%$Warmup_Pedal,0D%% percent.)

'Set road grade to 0%
If $Active_Warmup_TFT_Threshold < $Transmission_Hot_Threshold
	Set RoadGrade_Set (0,0)
	Log_Message (RoadGrade set to 0%.)
Else
	Set RoadGrade_Set (10,0)
	Log_Message (RoadGrade set to 10%.)
End

'Open Converter
Gosub Open_Converter

'Set pedal to pedal setpoint
Set Pedal_Position_Cmd ($Warmup_Pedal, 0)
Log_Message (Pedal Position set to %%$Warmup_Pedal,0D%% percent.)

'Initialize upshift timer
Let $Elapsed_Upshift_Time = 0
Let $Upshift_Start_Time = Timer
Let $Upshift_Time_Limit = 120
Let $Upshift_Cat_Temp_High_Limit = 870
Let $Upshift_Vehicle_Speed_Limit = 120

'Start Upshift control loop
Do
	'Update timer
	Let $Elapsed_Upshift_Time = Timer - $Upshift_Start_Time
	'Exit loop without holding pedal if vehicle speed exceeds time limit
	If $Elapsed_Upshift_Time > $Upshift_Time_Limit Then Goto Skip_Warmup_Pedal_Hold:
	'Capture trans temp
	Let $TCTFT_TFT = TCTFT_TFT
	'Exit active warmup if cat temp flag is active
	If $Cat_Temp_High_Flag = 1
		Let $Warmup_Failed_Flag = 1
		Let $Warmup_Flag = 0
		'Exit loop
		Goto Skip_Warmup_Pedal_Hold:
	End
	'Exit loop when Active Warmup threshold has been met
	If $TCTFT_TFT > $Active_Warmup_TFT_Threshold
		Let $Warmed_Up_Flag = 1
		Let $TCTFT_TFT = TCTFT_TFT
		Let $Commanded_TFT = $CurrentRunTemp
		Let $Elapsed_TempAction_Time = $Elapsed_Active_Warmup_Time
		Log_Message (Active Warmup took %%$Elapsed_Active_Warmup_Time,1D%% seconds to warm from %%$ActiveWarmup_StartTemp,0D%% DegC to %%$TCTFT_TFT,0D%% DegC for a %%$CurrentRunTemp,0D%% DegC setpoint.)
		Goto Skip_Warmup_Pedal_Hold:
	End
	'Capture PRNDL position
	Let $THMI_ST_PRND_DES = THMI_ST_PRND_DES
	'Capture gear command
	Let $RMIP_GR_CMD = RMIP_GR_CMD
	'Capture cat temp
	Let $Upshift_Cat_Temp = CatTemp
	'Capture vehicle speed
	Let $Vehicle_Speed = Vehicle_Speed_Feedback
	
	'Active Warmup user interaction
	Message_Box (Message_Time = 5, Title = Active Transmission Warmup... , Buttons = 2 , Entry_Field = 0 , Message = %%New_Line%%Attempting to achieve %%$CurrentRunTemp, 0D%% DegC TFT.%%New_Line%%TCTFT_TFT is currently %%$TCTFT_TFT, 1D%% DegC.%%New_Line%%%%New_Line%%If you would like to shut down the test to manually reach the desired TFT, press "Yes".%%New_Line%%%%New_Line%% Press "No" to skip warmup and TFT check., Height = 3800 , Width = 5000)
	Wait (0.1)
	'Capture operator response
	Let $Operator_Response = Response
	If $Operator_Response = 2
		'No (Skip TFT Check)
		Log_Message (TFT ROUTINE SKIPPED BY USER.)
		Screen_Message (Yellow,TFT ROUTINE SKIPPED BY USER.)
		'Reset Recheck_TFT_Flag
		Let $Recheck_TFT_Flag = 0
		'Exit Active Warmup
		Goto Skip_Warmup_Pedal_Hold:
	End
	If $Operator_Response = 1
		'Yes/OK (Shut down test to manually reach temp)
		Screen_Message (Yellow, Test was stopped by the user.)
		'Reset warmup flag
		Let $Warmup_Flag = 0
		'Terminate test
		Gosub Terminate_Test
		End_Test
	End
	'Exit loop if vehicle speed exceeds limit
	If $Vehicle_Speed > $Upshift_Vehicle_Speed_Limit Then Goto Skip_Warmup_Pedal_Hold:
	'Hold pedal if top gear is achieved
	If $RMIP_GR_CMD = $Final_Gear
		'If PRNDL is in Overdrive, exit loop and hold accelerator pedal 
		If $THMI_ST_PRND_DES = 4
			Goto Warmup_Hold_Pedal:
		Else
			Log_Message (PRNDL is not in Overdrive. Re-attempt engagement to Drive)
			Goto Reheat_Trans:
		End
	End
	'Exit loop if cat temp exceeds limit
	If $Upshift_Cat_Temp > $Upshift_Cat_Temp_High_Limit Then Goto Skip_Warmup_Pedal_Hold:
	Wait (1)
Loop

Warmup_Hold_Pedal:
Screen_Message (Green,%%New_Line%%UPSHIFT is now in final gear.)

'Wait hold time
Wait (5)

Skip_Warmup_Pedal_Hold:

'Stop vehicle
Gosub Slowdown

'Record temperature data
Let !Temp_Action = Active_Warmup
Gosub TFT_Data

'Interrupt warmup cycle and navigate to beginning of warmup routine
If $Warmed_Up_Flag ~= 1
	Let $Elapsed_Active_Warmup_Spot_Check_Time = Timer - $Active_Warmup_Spot_Check_Start_Time
	If $Elapsed_Active_Warmup_Spot_Check_Time > $Active_Warmup_Spot_Check_Time_Limit
		Let $Active_Warmup_Spot_Check_Temp = TCTFT_TFT
		If $Active_Warmup_Spot_Check_Temp < $Active_Warmup_Spot_Check_Starting_Temp
			Log_Message (Active Warmup is not warming transmission. Active_Warmup_Spot_Check_Temp is %%$Active_Warmup_Spot_Check_Temp,0D%% DegC compared to starting spot check temp of %%$Active_Warmup_Spot_Check_Starting_Temp,0D%% DegC.)
			Log_Message (******************************************************)
			Log_Message (Terminating test.)
			Log_Message (******************************************************)
			'Send text message
			Let !Text_Message = Active Warmup is not warming transmission. Terminating Test.
			Gosub Send_Text_Message
			'Terminate test
			Gosub Terminate_Test
		Else
			Let $Active_Warmup_Spot_Check_Starting_Temp = TCTFT_TFT
			Log_Message (New Spot Check Starting Temp is %%$Active_Warmup_Spot_Check_Starting_Temp,0D%% DegC.)
			'Reinitialize timer
			Let $Elapsed_Active_Warmup_Spot_Check_Time = 0
			Let $Active_Warmup_Spot_Check_Start_Time = Timer
		End
	Else
		Log_Message (Completed Active_Warmup cycle %%$Active_Warmup_Count,0D%% of %%$Active_Warmup_Count_Limit,0D%%. TCTFT_TFT is %%$TCTFT_TFT,0D%% DegC for a %%$CurrentRunTemp%% DegC setpoint.)
	    Goto Reheat_Trans:
	End
	
End

Monitor_Off Engine_Running
Log_Message (Stopping Engine_Running monitor. Alternative_Warmup.)
	
End_Sub

'*******************************************************
Sub Grade_Warmup
'*******************************************************
Log_Message (Running Grade_Warmup Subroutine)

'Monitor engine speed
Monitor_On Engine_Running
Log_Message (Starting Engine_Running monitor. Grade_Warmup.)

'Establish Hold Gear
Let $Hold_Gear = 3
	
'Initialize warmup counter
Let $Grade_Warmup_Count_Limit = 10000
Let $Grade_Warmup_Count = 0

'Capture Spot Check Temp
Let $Grade_Warmup_Starting_Temp = TCTFT_TFT
Log_Message (Grade_Warmup_Starting_Temp is %%$Grade_Warmup_Starting_Temp,0D%% DegC.)

'Set limits and initialize timers
Let $Grade_Warmup_Target_Speed = 48
Let $Grade_Warmup_Speed_Limit = 80
Let $Grade_Warmup_Cycle_Time_Limit = 1200
Let $Grade_Warmup_Total_Time_Limit = 7200

Let $Grade_Warmup_Total_Start_Time = Timer
Let $Elapsed_Grade_Warmup_Total_Time = 0

New_Grade_Warmup_Cycle:

'Increment warm-up counter
Let $Grade_Warmup_Count = $Grade_Warmup_Count + 1

'Initialize Grade Warmup Cycle Timer
Let $Grade_Warmup_Cycle_Start_Time = Timer
Let $Elapsed_Grade_Warmup_Cycle_Time = 0

'Restart Engine if not already running
If $Low_Engine_Flag = 1
	Gosub Start_Engine
End
	
'Capture PRNDL position
Let $THMI_ST_PRND_DES = THMI_ST_PRND_DES
'Shift PRNDL to Overdrive
If $THMI_ST_PRND_DES ~= 4
	Log_Message (Checking PRNDL position for Overdrive. PRNDL position is %%$THMI_ST_PRND_DES%%.)
	If $HIL_Flag = 1
		Let $Desired_PRNDL_Position = 3
	Else	
		Let $Desired_PRNDL_Position = 4
	End	
	Gosub Set_PRNDL_Position
End

'Release brake
If $HIL_Flag = 1
	Set DynoBrake_Set (0,0)
Else
	Let $Desired_Emcon_Mode = 19
	Gosub Set_Emcon_Mode
End

Screen_Message (Green, Setting warm-up speed to %%$Warmup_Target_Speed,0D%% kph.)

'Set unconditional converter unlock
'Gosub Open_Converter
Set RMCSH_NE_MIN_LCK_S (8000,0)

'Set Pedal based Speed PID control to Grade Warmup target speed
Set Vehicle_Speed_Feedback ($Grade_Warmup_Target_Speed,0) Using Pedal_Position_Cmd

'Set road grade to 0%
If $Active_Warmup_TFT_Threshold < $Transmission_Hot_Threshold
	Set RoadGrade_Set (0,0)
	Log_Message (RoadGrade set to 0%.)
Else
	Set RoadGrade_Set (30,0)
	Log_Message (RoadGrade set to 30%.)
End

'Start Grade Warmup Cycle
Do
	'Update timers
	Let $Elapsed_Grade_Warmup_Total_Time = Timer - $Grade_Warmup_Total_Start_Time
	Let $Elapsed_Grade_Warmup_Cycle_Time = Timer - $Grade_Warmup_Cycle_Start_Time
	'Calculate time remaining
	Let $Grade_Warmup_Total_Time_Remaining = $Grade_Warmup_Total_Time_Limit - $Elapsed_Grade_Warmup_Total_Time
	Let $Grade_Warmup_Cycle_Time_Remaining = $Grade_Warmup_Cycle_Time_Limit - $Elapsed_Grade_Warmup_Cycle_Time
	'Terminate test if timer is exceeded
	If $Elapsed_Grade_Warmup_Total_Time > $Grade_Warmup_Total_Time_Limit
		Log_Message (Elapsed_Grade_Warmup_Total_Time of %%$Elapsed_Grade_Warmup_Total_Time,0D%% seconds has exceeded Grade_Warmup_Total_Time_Limit of %%$Grade_Warmup_Total_Time_Limit,0D%% seconds.)
		Log_Message (******************************************************)
		Log_Message (Terminating test.)
		Log_Message (******************************************************)
		'Send text message
		Let !Text_Message = Elapsed_Grade_Warmup_Total_Time has been exceeded. Terminating Test.
		Gosub Send_Text_Message
		'Terminate test
		Gosub Terminate_Test
	End
	'Terminate test if warmup count exceeds count limit. Start new warmup cycle if timer 
	If $Elapsed_Grade_Warmup_Cycle_Time > $Grade_Warmup_Cycle_Time_Limit
		If $Grade_Warmup_Count > $Grade_Warmup_Count_Limit
			Log_Message (Grade_Warmup_Count of %%$Grade_Warmup_Count,0D%% has exceeded Grade_Warmup_Count_Limit of %%$Grade_Warmup_Count_Limit,0D%%.)
			Log_Message (******************************************************)
			Log_Message (Terminating test.)
			Log_Message (******************************************************)
			'Send text message
			Let !Text_Message = Grade_Warmup_Count has been exceeded. Terminating Test.
			Gosub Send_Text_Message
			'Terminate test
			Gosub Terminate_Test
		Else
			'Stop PID controller
			Set Vehicle_Speed_Feedback (Off) Using Pedal_Position_Cmd
			'Stop powertrain
			Gosub Slowdown
			Wait (5)
			'Record temperature data
			Let !Temp_Action = Grade_Warmup
			Gosub TFT_Data
			'Start new warmup cycle
			Goto New_Grade_Warmup_Cycle:
		End
	End
	'Capture vehicle speed
	Let $Vehicle_Speed = Vehicle_Speed_Feedback
	'Close accelerator pedal if vehicle speed exceeds speed limit
	If $Vehicle_Speed > $Grade_Warmup_Speed_Limit
		Set Pedal_Position_Cmd (0,0)
		Log_Message (Grade Warmup Vehicle_Speed is exceeding Grade_Warmup_Speed_Limit of %%$Grade_Warmup_Speed_Limit,0D%% mph. Briefly setting pedal to 0.)
	End
	'Capture temperatures
	Let $TCTFT_TFT = TCTFT_TFT
	Let $TransCase_In_Tmp = TransCase_In_Tmp
	Let $TransCase_Out_Tmp = TransCase_Out_Tmp
	Let $Trans_Sump_Temp = TransSump_Tmp
	Let $TransOil_Vlv_Pos = TransOil_Vlv_Pos	
	'Exit loop when Active Warmup threshold has been met
	If $TCTFT_TFT > $Active_Warmup_TFT_Threshold
		Let $Warmed_Up_Flag = 1
		Let $TCTFT_TFT = TCTFT_TFT
		Let $TransCase_In_Tmp = TransCase_In_Tmp
		Let $TransCase_Out_Tmp = TransCase_Out_Tmp
		Let $Trans_Sump_Temp = TransSump_Tmp
		Let $TransOil_Vlv_Pos = TransOil_Vlv_Pos		
		Let $Commanded_TFT = $CurrentRunTemp
		'Calculate total warmup time
		Let $Elapsed_TempAction_Time = $Elapsed_Grade_Warmup_Total_Time
		Log_Message (Active Warmup took %%$Elapsed_Grade_Warmup_Total_Time,1D%% seconds to warm from %%$Grade_Warmup_Starting_Temp,0D%% DegC to %%$TCTFT_TFT,0D%% DegC for a %%$CurrentRunTemp,0D%% DegC setpoint.)
		Goto Done_Grade_Warmup:
	End	
	'Capture Gear Command
	Let $RMIP_GR_CMD = RMIP_GR_CMD
	'Lock transmission into holding gear when holding gear is achieved
	If $RMIP_GR_CMD >= $Hold_Gear
		Set RMSC_GR_TYP_CMD_S ($Hold_Gear,0)
		Set RMSC_D_GR_TYP_SW_S (1,0)
	End
	'Grade Warmup user interaction
	Message_Box (Message_Time = 5, Title = Active Transmission Grade Warmup... , Buttons = 2 , Entry_Field = 0 , Message = %%New_Line%%Attempting to achieve %%$CurrentRunTemp, 0D%% DegC TFT.%%New_Line%%TCTFT_TFT is currently %%$TCTFT_TFT, 1D%% DegC.%%New_Line%%%%New_Line%%If you would like to shut down the test to manually reach the desired TFT, press "Yes".%%New_Line%%%%New_Line%% Press "No" to skip warmup and TFT check.%%New_Line%%%%New_Line%%Active Warmup will time out in %%$Grade_Warmup_Total_Time_Remaining,0D%% seconds if TFT setpoint is not achieved. %%New_Line%%%%New_Line%%%%$Grade_Warmup_Cycle_Time_Remaining,0D%% seconds remaining in current cycle., Height = 3800 , Width = 5000)
	Wait (0.1)
	'Capture operator response
	Let $Operator_Response = Response
	If $Operator_Response = 2
		'No (Skip TFT Check)
		Log_Message (TFT ROUTINE SKIPPED BY USER.)
		Screen_Message (Yellow,TFT ROUTINE SKIPPED BY USER.)
		'Reset Recheck_TFT_Flag
		Let $Recheck_TFT_Flag = 0
		'Exit Grade Warmup
		Goto Done_Grade_Warmup:
	End
	If $Operator_Response = 1
		'Yes/OK (Shut down test to manually reach temp)
		Screen_Message (Yellow, Test was stopped by the user.)
		'Reset warmup flag
		Let $Warmup_Flag = 0
		'Terminate test
		Gosub Terminate_Test
		End_Test
	End
Loop
	
Done_Grade_Warmup:	

'Stop PID controller
Set Vehicle_Speed_Feedback (Off) Using Pedal_Position_Cmd

'Record temperature data
Let !Temp_Action = Grade_Warmup_Complete
Gosub TFT_Data	
	
End_Sub

'*******************************************************
Sub Active_Warmup_Interruption
'*******************************************************
Log_Message (Running Active_Warmup_Interruption Subroutine)

'Stop vehicle
Gosub Slowdown

'Initialize Active Warmup Interrupt timer
Let $Interrupt_Start_Time = Timer
Let $ElapsedInterrupt_Time = 0
Let $Interrupt_Time_Limit = 60

'Start Active Warmup Interrupt control loop
Do
	'Update timer
	Let $ElapsedInterrupt_Time = Timer - $Interrupt_Start_Time
	'Calculate remaining active warmup interrupt time
	Let $InterruptWaitTimeRemaining = 60 - $ElapsedInterrupt_Time
	'Capture temperature
	Let $TCTFT_TFT = TCTFT_TFT
	'Capture commanded trans temp
	Let $Commanded_Trans_Tmp = Commanded_Trans_Tmp
	'Capture trans valve position
	Let $TransOil_Vlv_Pos = TransOil_Vlv_Pos
	'Exit loop when TFT has exceeded warmup threshold
	If $TCTFT_TFT > $Active_Warmup_TFT_Threshold
	'Set warmed up flag
		Let $Warmed_Up_Flag = 1
		Log_Message (Active Warmup took %%$Elapsed_Active_Warmup_Time,1D%% seconds to warm from %%$ActiveWarmup_StartTemp,0D%% DegC to %%$TCTFT_TFT,0D%% DegC for a %%$CurrentRunTemp,0D%% DegC setpoint.)
		'Exit loop
		Goto Done_Active_Warmup_Interruption:
	End
	Screen_Message (Green,%%New_Line%%%%New_Line%%Interrupting warm-up cycle for %%$InterruptWaitTimeRemaining,0D%% seconds.)
	'Exit loop without setting flag If time limit is exceeded and TFT is below the warmup threshold
	If $ElapsedInterrupt_Time > $Interrupt_Time_Limit
		Log_Message (Interrupt TCTFT_TFT is %%$TCTFT_TFT,1D%% DegC. Commanded trans temp is %%$Commanded_Trans_Tmp,0D%% DegC. Trans cooling valve is %%$TransOil_Vlv_Pos,0D%% pct closed.)
		'Exit loop
		Goto Done_Active_Warmup_Interruption:
	End		
Loop

Done_Active_Warmup_Interruption:
Gosub TFT_Data

End_Sub

'*******************************************************
Sub Stop_And_Soak
'*******************************************************
Log_Message (Running Stop_And_Soak Subroutine)

'If Engine Oil Temp is not above the boiling point, heat engine oil prior to soak
If $Engine_Boiling_Flag ~= 1
	Gosub Heat_Engine_Oil
End

'Start Stop and Soak routine
Let !Stop_And_Soak_Start_Time = %%Time%%
Log_Message (Stopping Engine to soak at %%!Stop_And_Soak_Start_Time%%.)
Screen_Message (Stopping Engine to soak powertrain...)

Wait (2)

'Stop vehicle
Gosub Slowdown

Screen_Message (Green,%%New_Line%%Soaking Transmission to %%$CurrentRunTemp%% DegC.)

'Capture PRNDL position
Let $Stored_PRNDL_Position_Fbk = PRNDL_Feedback
If $Stored_PRNDL_Position_Fbk ~= 0
	'Shift PRNDL to Neutral
	Let $Desired_PRNDL_Position = 2
	Gosub Set_PRNDL_Position
End	

'Shut off ignition
Set IGNITION_CMD (0,0)
Wait (2)
Let $IGNITION_VLT = IGNITION_VLT
Log_Message (Ignition off. StopSoak. IGNITION_VLT is %%$IGNITION_VLT,0D%%V.)

'Shut off injectors
If $HIL_Flag ~= 1
	Set EMCON_INJECTOR_CMD (0,0)
	Log_Message (Injectors off. StopSoak)
End

Log_Message (Engine Shut down to soak)

'Turn off engine speed monitor
Monitor_Off Engine_Running
Log_Message (Stopping Engine_Running monitor. Stop Soak.)

'If only one testpoint at a TFT setpoint remains in the test matrix, change soak target threshold to +3 DegC

'Initialize index
Let $TempQuickMatrix_Index = 0

'Start soak target temp control loop
Do
	'Increment index
	Let $TempQuickMatrix_Index = $TempQuickMatrix_Index + 1
	'Exit loop when all indices have completed
	If $TempQuickMatrix_Index > $TempQuickMatrix_Rows Then Goto Set_Soak_Threshold:
	'Extract TFT setpoint from tft setpoint matrix
	Let $TFT_Setpoint = $TempQuickMatrix ($TempQuickMatrix_Index , 1)
	'Compare quick matrix setpoint with TFT setpoint of current testpoint
	If $TFT_Setpoint = $CurrentRunTemp
		Let $TFTs_Remaining = $TempQuickMatrix ($TempQuickMatrix_Index , 2)
		'Set soak target temp
		If $TFTs_Remaining <= 1
			'For one or less remaining testpoints, set target to 3 DegC above setpoint
			Let $Soak_Target = $CurrentRunTemp + 3
		Else
			'If more than one testpoint remains, set target to 3 DegC below setpoint
			Let $Soak_Target = $CurrentRunTemp - 3
		End	
	End
Loop

Set_Soak_Threshold:

Log_Message (Soak_Target for CurrentRunTemp of %%$CurrentRunTemp,0D%% DegC is %%$Soak_Target,0D%% DegC.)

'Establish Desired Soak_Air temperature and time limit
If $HIL_Flag = 1
	'If TFT setpoint is below 0 DegF (-17.78 DegC), set soak temp to -40 DegC
	If $CurrentRunTemp < -17.78
		'For TFT setpoints below 0, set desired soak to -40 DegC
		Let $Desired_Soak_Temp = -40
		'Establish check-time to 30 minutes
		Let $TFT_Check_Time = 1800
	Else	
		'For TFT setpoints above 0, set desired soak to -23.3 DegC
		Let $Desired_Soak_Temp = -23.3
		'Establish check-time to 15 minutes
		Let $TFT_Check_Time = 900
	End	
Else
	If $Standard_Cell = 1
		If $CurrentRunTemp < 10
			'Establish desired soak-air temperature
			Let $Desired_Soak_Temp = $CurrentRunTemp - 10
			'Establish check-time to 30 minutes
			Let $TFT_Check_Time = 1800
		Else
			'Establish desired soak-air temperature
			Let $Desired_Soak_Temp = $CurrentRunTemp - 10
			'Establish check-time to 15 minutes
			Let $TFT_Check_Time = 900
		End
	End
End

'For standard dyno cell, set Soak_Air temperature
If $Standard_Cell = 1
	Gosub Set_Soak_Air
End	

'For HIL Dyno, set chamber temperature
If $HIL_Flag = 1
	Gosub Set_HIL_Dyno_Soak_Air
End

'Set Temp_Action
Let !Temp_Action = Stop_And_Soak

'Establish starting temperature 
Let $Soak_StartTemp = TCTFT_TFT

Restart_TFT_Check_Timer:

'For Standard Dyno Cell, shut off ignition, Turn off heartbeat
If $Standard_Cell = 1
	Gosub Disable_Autoshutdown
End	

'Monitor soak-air temp
If $Standard_Cell = 1
	Monitor_On Soak_Air
	Log_Message (Starting Soak_Air monitor. Stop_And_Soak.)
End

'Initialize Soak Timer
Let $TFT_Check_Start_Time = Timer
Let $TFT_Check_Elapsed_Time = 0
Let $Elapsed_Soak_Time = 0
Let $Soak_Start_Time = Timer

'Start cold soak control loop
Do
	'Update timers
	Let $Elapsed_Soak_Time = Timer - $Soak_Start_Time
	Let $TFT_Check_Elapsed_Time = Timer - $TFT_Check_Start_Time
	'Calculate soak time remaining in minutes and seconds
	Let $TFT_Check_Time_Remaining = $TFT_Check_Time - $TFT_Check_Elapsed_Time
	Let $TFT_Check_Time_Remaining_dec = $TFT_Check_Time_Remaining / 60
	Let $TFT_Check_Time_Remaining_min = Int ($TFT_Check_Time_Remaining_dec)
	Let $TFT_Check_Time_Remaining_sec = $TFT_Check_Time_Remaining_dec - $TFT_Check_Time_Remaining_min
	Let $TFT_Check_Time_Remaining_sec = $TFT_Check_Time_Remaining_sec * 60
	'Turn on ignition and check TFT when check time is exceeded
	If $TFT_Check_Elapsed_Time >= $TFT_Check_Time
		Log_Message (Checking TFT. Stop and Soak)
		'Set TFT_Check flag to skip steps in Activate_PLC
		Let $Stop_And_Soak_TFT_Check_Flag = 1
		'Turn off soak-air monitor
		Monitor_Off Soak_Air
		Log_Message (Stopping Soak_Air monitor. Stop_And_Soak.)
		'Turn on PLC 
		If $Standard_Cell = 1
			Gosub Activate_PLC
		End	
		'Turn on ignition
		Set IGNITION_CMD (1,0)
		Log_Message (Ignition on. StopSoak TFT check.)
		'Synchronize control modules
		Gosub ECM_Synchronize
		Gosub PCM_Synchronize
		'Rest TFT check flag
		Let $Stop_And_Soak_TFT_Check_Flag = 0
		'Capture TFT
		Let $TCTFT_TFT = TCTFT_TFT
		'Capture PLC soak-air setpoint and switch state
		If $Standard_Cell = 1
			Let $plc_soakairt_set_fbk = plc_soakairt_set_fbk
			Let $plc_soakair_on_fbk = plc_soakair_on_fbk	
		End
		'Capture ambient temperature
		Let $Ambient_Tmp = Ambient_Tmp
		'Record temp data in Test Setup
		Gosub TFT_Data
		Log_Message (TCTFT_TFT is %%$TCTFT_TFT,1D%% DegC. plc_soakair_on_fbk is %%$plc_soakair_on_fbk%%. Soak Temp set to %%$plc_soakairt_set_fbk,0D%% DegC. AMBIENT_TMP is %%$AMBIENT_TMP,1D%% DegC.)
		If $TCTFT_TFT <= $Soak_Target
			Goto End_Soak:
		Else
			'Shut off Ignition, re-soak
			Set IGNITION_CMD (0,0)
			Wait (2)
			Let $IGNITION_VLT = IGNITION_VLT
			Log_Message (Ignition off. Stop and Soak TFT Check. IGNITION_VLT is %%$IGNITION_VLT,1D%%V.) 
			Goto Restart_TFT_Check_Timer:
		End
	End
	'Exit loop when TFT reaches soak target
	If $TCTFT_TFT <= $Soak_Target Then Goto End_Soak:
	'If Soak_Air monitor flag is set, exit loop
	If $Soak_Air_Off_Flag = 1 Then Goto End_Soak:
	If $Standard_Cell = 1
		Screen_Message (Green,%%New_Line%%Soaking Transmission to target temp %%$Soak_Target%% DegC for a %%$CurrentRunTemp%% DegC testpoint.%%New_Line%%Commanded soak temperature is %%$plc_soakairt_set_fbk,0D%% DegC.%%New_Line%%Latest TCTFT_TFT is %%$TCTFT_TFT,1D%% DegC.%%New_Line%%%%New_Line%%Checking TFT again in %%$TFT_Check_Time_Remaining_min,0D%% mins, %%$TFT_Check_Time_Remaining_sec,0D%% secs.)
	Else
		Screen_Message (Green,%%New_Line%%Soaking Transmission to target temp %%$Soak_Target%% DegC for a %%$CurrentRunTemp%% DegC testpoint.%%New_Line%%Latest TCTFT_TFT is %%$TCTFT_TFT,1D%% DegC.%%New_Line%%%%New_Line%%Checking TOT again in %%$TFT_Check_Time_Remaining_min,0D%% mins, %%$TFT_Check_Time_Remaining_sec,0D%% secs.)
	End
	Wait (1)
Loop

End_Soak:

'If Soak-Air monitor flag is set, save Debug file, Flight recorder, and terminate test
If $Soak_Air_Off_Flag = 1
	'Save Debug file
	Save_Debug_Files
	Log_Message (Debug File Saved)
	'Save Flight Recorder
	Save_Flight_Recorder
	'Turn off soak air
	Monitor_Off Soak_Air
	Log_Message (Stopping Soak_Air monitor. Stop_And_Soak.)
	Log_Message (Soak Air has shut down during a soak.)
	Log_Message (******************************************************)
	Log_Message (Terminating test.)
	Log_Message (******************************************************)
	'Send text message
	Let !Text_Message = Soak Air has shut down during a soak. Terminating Test.
	Gosub Send_Text_Message
	'Terminate test
	Gosub Terminate_Test
End	

'Turn off Soak-Air monitor
If $Standard_Cell = 1	
	Monitor_Off Soak_Air
	Log_Message (Stopping Soak_Air monitor. Stop_And_Soak.)
End

'Enable alarms and heartbeat
Gosub Autoshutdown_Enable
'Start engine
Gosub Start_Engine

'Reset stop and soak flag
Let $Stop_And_Soak_Flag = 0

'Capture Starting Engine Oil Temperature
Let $Cold_Start_EOT = EOT
Log_Message (Cold Start Engine Temp is %%$Cold_Start_EOT,0D%% DegC)

'Re-initialize EOT Boil Monitor
Gosub Initialize_EOT_Boil_Monitor

'Start Engine Oil Temperature Monitor
Monitor_On EOT_Boil_Time
Log_Message (Starting EOT_Boil_Time monitor. Stop_And_Soak.)

'Calculate Elapsed soak time
Let $Elapsed_TempAction_Time = $Elapsed_Soak_Time
Log_Message (Trans soak Complete. Stop_And_Soak took %%$Elapsed_Soak_Time,1D%% seconds to soak from %%$Soak_StartTemp,0D%% DegC to %%$TCTFT_TFT,1D%% DegC TFT.)
		
End_Sub

'*******************************************************
Sub Initialize_EOT_Boil_Monitor
'*******************************************************
Log_Message (Running Initialize_EOT_Boil_Monitor Subroutine)

'Initialize Engine Oil Temperature Boil timer
Let $Elapsed_EOT_Boil_Time = 0
Let $EOT_Start_Boil_Flag = 0
Let $Engine_Boiling_Flag = 0
Let $EOT_Boil_Temp = 100
Let $Minimum_EOT_Boil_Time = 300

End_Sub

'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Monitor EOT_Boil_Time
'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

'Capture Engine Oil Temp
Let $Monitor_EOT = EOT

'Start timer when Engine Oil Temp exceeds boiling point
If $Monitor_EOT > $EOT_Boil_Temp
	'If engine oil starts boiling, set flag and start timer
	If $EOT_Boil_Flag = 0
		Let $EOT_Boil_Start_Time = Timer
		Let $EOT_Start_Boil_Flag = 1
	Else
		'If engine oil has started boiling, update timer
		Let $Elapsed_EOT_Boil_Time = Timer - $EOT_Boil_Start_Time
		'Set Engine Boiled Flag when EOT has exceeded boiling point for the allotted boil time
		If $Elapsed_EOT_Boil_Time > $Minimum_EOT_Boil_Time
			Let $Engine_Boiling_Flag = 1
			Log_Message (Engine Oil has boiled for %%$Minimum_EOT_Boil_Time,0D%% seconds. Engine is safe to cold soak.)
		End
	End
Else
	'If a warm engine drops below boiling point, reinitialize the EOT boil timer
	If $Engine_Boiling_Flag = 1
		Log_Message (Engine Oil Temperature has fallen below the boiling point.)
		Gosub Initialize_EOT_Boil_Monitor
	End	
End

End_Monitor

'*******************************************************
Sub Heat_Engine_Oil
'*******************************************************
Log_Message (Running Heat_Engine_Oil Subroutine)

'Monitor engine speed
Monitor_On Engine_Running
Log_Message (Starting Engine_Running monitor. Heat_Engine_Oil)

'Monitor Engine Oil Boiling Time
Monitor_On EOT_Boil_Time
Log_Message (Starting EOT_Boil_Time monitor. Heat_Engine_Oil)

'Initialize warmup counter
Let $Heat_Engine_Oil_Count_Limit = 10000
Let $Heat_Engine_Oil_Count = 0

'Capture Spot Check Temp
Let $Heat_Engine_Oil_Spot_Check_Starting_Temp = TCTFT_TFT
Log_Message (Heat_Engine_Oil_Spot_Check_Starting_Temp is %%$Heat_Engine_Oil_Spot_Check_Starting_Temp,0D%% DegC.)

'Initialize Heat Engine Oil Timer
Let $Elapsed_Heat_Engine_Oil_Time = 0
Let $Heat_Engine_Oil_Start_Time = Timer
Let $Starting_Heat_Engine_Oil_Temp = EOT

'Initialize Spot Check Timer
Let $Heat_Engine_Oil_Spot_Check_Start_Time = Timer
Let $Elapsed_Heat_Engine_Oil_Spot_Check_Time = 0
Let $Heat_Engine_Oil_Spot_Check_Time_Limit = 300

Reheat_Engine_Oil:

'Increment warm-up counter
Let $Heat_Engine_Oil_Count = $Heat_Engine_Oil_Count + 1

'Restart Engine if not already running
If $Low_Engine_Flag = 1
	Gosub Start_Engine
End
	
'Capture PRNDL position
Let $THMI_ST_PRND_DES = THMI_ST_PRND_DES
'Shift PRNDL to Overdrive
If $THMI_ST_PRND_DES ~= 4
	Log_Message (Checking PRNDL position for Overdrive. PRNDL position is %%$THMI_ST_PRND_DES%%.)
	If $HIL_Flag = 1
		Let $Desired_PRNDL_Position = 3
	Else	
		Let $Desired_PRNDL_Position = 4
	End	
	Gosub Set_PRNDL_Position
End

'Release brake
If $HIL_Flag = 1
	Set DynoBrake_Set (0,0)
Else
	Let $Desired_Emcon_Mode = 19
	Gosub Set_Emcon_Mode
End

Let $Warmup_Pedal = 100

Screen_Message (Green, Setting pedal to %%$Warmup_Pedal,0D%% percent.)

'Set road grade to 0%
Set RoadGrade_Set (0,0)
Log_Message (RoadGrade set to 0 percent.)

'Set pedal to pedal setpoint
Set Pedal_Position_Cmd ($Warmup_Pedal, 0)
Log_Message (Pedal Position set to %%$Warmup_Pedal,0D%% percent.)

'Initialize upshift timer
Let $Elapsed_Upshift_Time = 0
Let $Upshift_Start_Time = Timer
Let $Upshift_Time_Limit = 120
Let $Upshift_Cat_Temp_High_Limit = 870
Let $Upshift_Vehicle_Speed_Limit = 120

'Start Upshift control loop
Do
	'Update timers
	Let $Elapsed_Upshift_Time = Timer - $Upshift_Start_Time
	Let $Elapsed_Heat_Engine_Oil_Time = Timer - $Heat_Engine_Oil_Start_Time
	'Exit loop without holding pedal if vehicle speed exceeds time limit
	If $Elapsed_Upshift_Time > $Upshift_Time_Limit Then Goto Skip_Heat_Engine_Oil_Pedal_Hold:	
	'Exit active warmup if cat temp flag is active
	If $Cat_Temp_High_Flag = 1
		Let $Warmup_Failed_Flag = 1
		Let $Warmup_Flag = 0
		'Exit loop
		Goto Skip_Heat_Engine_Oil_Pedal_Hold:
	End
	'Exit loop when Boiling Flag has been set
	If $Engine_Boiling_Flag = 1
		Let $Elapsed_TempAction_Time = $Elapsed_Heat_Engine_Oil_Time
		Log_Message (Heat Engine Oil took %%$Elapsed_Heat_Engine_Oil_Time,1D%% seconds to warm from %%$Starting_Heat_Engine_Oil_Temp,0D%% DegC to %%$EOT_Boil_Temp,0D%% DegC.)
		Goto Skip_Heat_Engine_Oil_Pedal_Hold:
	End
	'Capture PRNDL position
	Let $THMI_ST_PRND_DES = THMI_ST_PRND_DES
	'Capture gear command
	Let $RMIP_GR_CMD = RMIP_GR_CMD
	'Capture cat temp
	Let $Upshift_Cat_Temp = CatTemp
	'Capture vehicle speed
	Let $Vehicle_Speed = Vehicle_Speed_Feedback
	
	'Heat Engine Oil user interaction
	Message_Box (Message_Time = 5, Title = Heat_Engine_Oil... , Buttons = 2 , Entry_Field = 0 , Message = %%New_Line%%Attempting to achieve %%$CurrentRunTemp, 0D%% DegC TFT.%%New_Line%%TCTFT_TFT is currently %%$TCTFT_TFT, 1D%% DegC.%%New_Line%%%%New_Line%%If you would like to shut down the test to manually reach the desired TFT, press "Yes".%%New_Line%%%%New_Line%% Press "No" to skip warmup and TFT check., Height = 3800 , Width = 5000)
	Wait (0.1)
	'Capture operator response
	Let $Operator_Response = Response
	If $Operator_Response = 2
		'No (Skip HEAT ENGINE OIL Check)
		Log_Message (HEAT ENGINE OIL ROUTINE SKIPPED BY USER.)
		Screen_Message (Yellow,HEAT ENGINE OIL ROUTINE SKIPPED BY USER.)
		'Exit Heat Engine Oil
		Goto Skip_Heat_Engine_Oil_Pedal_Hold:
	End
	If $Operator_Response = 1
		'Yes/OK (Shut down test to manually reach temp)
		Screen_Message (Yellow, Test was stopped by the user.)
		'Terminate test
		Gosub Terminate_Test
		End_Test
	End
	'Exit loop if vehicle speed exceeds limit
	If $Vehicle_Speed > $Upshift_Vehicle_Speed_Limit Then Goto Skip_Heat_Engine_Oil_Pedal_Hold:
	'Hold pedal if top gear is achieved
	If $RMIP_GR_CMD = $Final_Gear
		'If PRNDL is in Overdrive, exit loop and hold accelerator pedal 
		If $THMI_ST_PRND_DES = 4
			Goto Heat_Engine_Oil_Pedal_Hold:
		Else
			Log_Message (PRNDL is not in Overdrive. Re-attempt engagement to Drive)
			Goto Reheat_Engine_Oil:
		End
	End
	'Exit loop if cat temp exceeds limit
	If $Upshift_Cat_Temp > $Upshift_Cat_Temp_High_Limit Then Goto Skip_Heat_Engine_Oil_Pedal_Hold:
	Wait (1)
Loop

Heat_Engine_Oil_Pedal_Hold:
Screen_Message (Green,%%New_Line%%HEAT ENGINE OIL is now in final gear.)

'Wait hold time
Wait (5)

Skip_Heat_Engine_Oil_Pedal_Hold:

'Stop vehicle
Gosub Slowdown

'Record temperature data
Let !Temp_Action = Heat_Engine_Oil
Gosub TFT_Data

'Interrupt Heat Engine Oil cycle and navigate to beginning of routine
If $Engine_Boiling_Flag ~= 1
	Let $Elapsed_Heat_Engine_Oil_Spot_Check_Time = Timer - $Heat_Engine_Oil_Spot_Check_Start_Time
	If $Elapsed_Heat_Engine_Oil_Spot_Check_Time > $Heat_Engine_Oil_Spot_Check_Time_Limit
		Let $Heat_Engine_Oil_Spot_Check_Temp = EOT
		If $Heat_Engine_Oil_Spot_Check_Temp < $Heat_Engine_Oil_Spot_Check_Starting_Temp
			Log_Message (Active Warmup is not warming transmission. Heat_Engine_Oil_Spot_Check_Temp is %%$Heat_Engine_Oil_Spot_Check_Temp,0D%% DegC compared to starting spot check temp of %%$Heat_Engine_Oil_Spot_Check_Starting_Temp,0D%% DegC.)
			Log_Message (******************************************************)
			Log_Message (Terminating test.)
			Log_Message (******************************************************)
			'Send text message
			Let !Text_Message = Soak Air has shut down during a soak. Terminating Test.
			Gosub Send_Text_Message
			'Terminate test
			Gosub Terminate_Test
		Else
			Let $Heat_Engine_Oil_Spot_Check_Starting_Temp = EOT
			Log_Message (New Spot Check Starting Temp is %%$Heat_Engine_Oil_Spot_Check_Starting_Temp,0D%% DegC.)
			'Reinitialize timer
			Let $Elapsed_Heat_Engine_Oil_Spot_Check_Time = 0
			Let $Heat_Engine_Oil_Spot_Check_Start_Time = Timer
		End
	Else
		Log_Message (Completed Heat_Engine_Oil cycle %%$Heat_Engine_Oil_Count,0D%% of %%$Heat_Engine_Oil_Count_Limit,0D%%. Engine Oil Temp is %%$Heat_Engine_Oil_Spot_Check_Temp,0D%% DegC.)
	    Goto Reheat_Engine_Oil:
	End	
End
	
End_Sub

'*******************************************************
Sub Wait_For_Wait_Time
'*******************************************************
Log_Message (Running Wait_For_Wait_Time subroutine)

'Initialize wait timer
Let $Elapsed_Wait_Time = 0
Let $Wait_Time_Start_Time = Timer

'Start wait for wait time control loop
Do
	'Update timer
	Let $Elapsed_Wait_Time = Timer - $Wait_Time_Start_Time
	'Exit loop when Wait_Time_Seconds is reached
	If $Elapsed_Wait_Time > $Wait_Time_Seconds Then Goto Done_Wait_For_Wait_Time:
	'Calculate remaining wait time
	Let $Wait_Time_Remaining = $Wait_Time_Seconds - $Elapsed_Wait_Time
	'Screen Message remaining wait time
	Screen_Message (Green, Waiting for %%$Wait_Time_Remaining%% seconds.)
Loop	

Done_Wait_For_Wait_Time:
Log_Message (Waited for %%$Wait_Time_Seconds%% seconds)

End_Sub

'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Monitor Soak_Air
'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

'Capture soak-air switch state
Let $plc_soakair_on_fbk = plc_soakair_on_fbk

'If soak-air is not on, set flag
If $plc_soakair_on_fbk ~= 1
	'Set soak air off flag
	Let $Soak_Air_Off_Flag = 1
End

End_Monitor

'*******************************************************
Sub Set_Trans_Temp
'*******************************************************
Log_Message (Running Set_Trans_Temp subroutine)

'Capture TFT
Let $TCTFT_TFT = TCTFT_TFT
'Calculate delta from measured temp to desired temp
Let $Delta_Temp = $TCTFT_TFT - $Desired_Trans_Temp

'Establish commanded trans temp setpoint
If $Warmup_Flag = 1
	'For Active Warmup
	If $Delta_Temp < 0
		'For cold setpoints, set Warmup temp setpoint to 10 DegC above desired temp
		Let $Trans_Temp_Setpoint = $Desired_Trans_Temp + 50
	Else
		'For warm setpoints, set Warmup temp setpoint to 5 DegC below desired temp
		Let $Trans_Temp_Setpoint = $Desired_Trans_Temp - 10
	End
Else
	'For Active Cooldown
	If $Cooldown_Flag = 1
		Let $Trans_Temp_Setpoint = $Desired_Trans_Temp - 10
	Else
		'For setting trans temp outside of cooldown/warmup procedure
		If $Desired_Trans_Temp < 90
			Let $Trans_Temp_Setpoint = $Desired_Trans_Temp
		Else	
			Let $Trans_Temp_Setpoint = $Desired_Trans_Temp  + 50
		End	
	End
End

Screen_Message (Green,%%New_Line%%%%New_Line%%Setting Transmission Fluid Temperature to %%$Trans_Temp_Setpoint,0D%%DegC.)

'Establish low and high temperature threshold to confirm setpoint and allow for PLC rounding error
Let $Trans_Temp_Low_Threshold = $Trans_Temp_Setpoint - 1
Let $Trans_Temp_High_Threshold = $Trans_Temp_Setpoint + 1

'Skip Standard_Cell PLC switches
If $HIL_Flag = 1 Then Goto Start_HIL_Temp_Set:

'Start PLC for standard cell
If $Standard_Cell = 1
	Gosub Activate_PLC
End	

'Initialize set counter
Let $Set_Counter = 0

'Check status of trans oil enable switch
Let $plc_transoil_ena_fbk = plc_transoil_ena_fbk
'Skip to next plc if trans oil switch is already enabled
If $plc_transoil_ena_fbk = 1 Then Goto Done_TFT_On:
TFT_SET_ON:
'Turn on trans oil enable switch	
Set PLC_TRANSOIL_ENA (1,0)
Log_Message (Enabling Trans Oil PLC control.)

'Initialize timer
Let $Elapsed_Set_Trans_Temp_Time = 0
Let $Set_Trans_Temp_Start_Time = Timer
Let $Set_Trans_Temp_Time_Limit = 15

'Start trans oil enable control loop
Do
	'Update timer
	Let $Elapsed_Set_Trans_Temp_Time = Timer - $Set_Trans_Temp_Start_Time
	'Capture trans oil enable switch feedback
	Let $plc_transoil_ena_fbk = plc_transoil_ena_fbk
	'Exit loop if feedback is on
	If $plc_transoil_ena_fbk = 1
		Log_Message (Trans Oil PLC control successfully enabled. Set_Counter is %%$Set_Counter%%. Elapsed_Set_Trans_Temp_Time is %%$Elapsed_Set_Trans_Temp_Time,1D%% seconds.)
		Goto Done_TFT_On:
	End	
	'If time limit has been exceeded after two attempts to turn on trans oil enable switch, terminate test
	If $Elapsed_Set_Trans_Temp_Time > $Set_Trans_Temp_Time_Limit
		'Increment set counter
		Let $Set_Counter = $Set_Counter + 1
		'Terminate test after second attempt
		If $Set_Counter > 2
			Log_Message (Unable to enable transmission fluid temperature control. plc_transoil_ena_fbk is %%$plc_transoil_ena_fbk%%.)
			Log_Message (******************************************************)
			Log_Message (Terminating test.)
			Log_Message (******************************************************)
			'Send Text Message
			Let !Text_Message = Unable to enable transmission fluid temperature control. plc_transoil_ena_fbk is %%$plc_transoil_ena_fbk%%. Terminating Test.
			Gosub Send_Text_Message
			'Terminate test
			Gosub Terminate_Test
		Else
			'Re-attempt trans oil enable switch
			Goto TFT_SET_ON:
		End
	End
	Wait (1)
Loop
Done_TFT_On:

'Turn transmission oil manual valve off (to enable automatic setpoint)

'Capture trans oil manual valve state 
Let $plc_transoil_man_fbk = plc_transoil_man_fbk

'If manual valve is already off, skip to next plc
If $plc_transoil_man_fbk = 0 Then Goto Done_plc_transoil_man_Off:

'Initialize counter
Let $Trans_Manual_Off_Counter = 0

plc_transoil_man_Off: 

'Set PLC Trans Oil Manual Valve Off
Set plc_transoil_man (0,0)

'Initialize timer
Let $Elapsed_plc_transoil_man_OFF_Time = 0
Let $PLC_TRANSTMP_Start_Time = Timer
Let $Plc_transoil_man_OFF_time_limit = 35

'Start plc trans oil manual valve control loop
Do
	'Update timer
	Let $Elapsed_plc_transoil_man_OFF_Time = Timer - $PLC_TRANSTMP_Start_Time
	'Capture manual valve switch feedback
	Let $plc_transoil_man_fbk = plc_transoil_man_fbk
	'Exit loop if manual valve is off
	If $plc_transoil_man_fbk = 0	
		Log_Message (Transmission oil temperature control is in auto mode. Elapsed_plc_transoil_man_OFF_Time is %%$Elapsed_plc_transoil_man_OFF_Time,1D%% seconds.)
		Goto Done_plc_transoil_man_Off:
	End	
	'If trans oil manual valve timer exceeds timeout limit, increment counter
	If $Elapsed_plc_transoil_man_OFF_Time > $Plc_transoil_man_OFF_time_limit
		'Increment timer
		Let $Trans_Manual_Off_Counter = $Trans_Manual_Off_Counter + 1
		'If counter exceeds two attempts, terminate test
		If $Trans_Manual_Off_Counter > 2
			Log_Message (Unable to set trans fluid control to automatic. plc_transoil_man_fbk is %%$plc_transoil_man_fbk%%.)
			Log_Message (******************************************************)
			Log_Message (Terminating test.)
			Log_Message (******************************************************)	
			'Send text message
			Let !Text_Message = Unable to set trans fluid control to automatic. plc_transoil_man_fbk is %%$plc_transoil_man_fbk%%. Terminating Test
			Gosub Send_Text_Message
			'Terminate test
			Gosub Terminate_Test
		Else
			'Re-attempt trans oil manual valve switch off
			Goto plc_transoil_man_Off:
		End
	End
	Wait (1)
Loop

Done_plc_transoil_man_Off:

'Capture TFT setpoint. Skip loop if within threshold
Let $plc_transoil_set_fbk = plc_transoil_set_fbk
If $plc_transoil_set_fbk > $Trans_Temp_Low_Threshold
	If $plc_transoil_set_fbk < $Trans_Temp_High_Threshold
		Log_Message (Trans temp of %%$Trans_Temp_Setpoint,0D%% DegC is already set to %%$plc_transoil_set_fbk,0D%% DegC.)
		Goto Done_Set_Trans_Temp:
	End
End
Log_Message (Previous setting for desired trans temp of %%$Trans_Temp_Setpoint,6D%% DegC is plc_transoil_set_fbk of %%$plc_transoil_set_fbk,6D%% DegC.)

'Initialize counter
Let $Trans_Temp_Counter = 0

Reset_Trans_Temp:

'Set trans oil setpoint
Set plc_transoil_set ($Trans_Temp_Setpoint,0)
Wait (3)

'Initialize set trans oil setpoint timer
Let $plc_transoil_set_Elapsed_Time = 0
Let $plc_transoil_set_Start_Time = Timer

'Start set trans oil setpoint control loop
Do
	'Update timer
	Let $plc_transoil_set_Elapsed_Time = Timer - $plc_transoil_set_Start_Time
	'Capture PLC feedback values
	Let $plc_transoil_set_fbk = plc_transoil_set_fbk
	Let $plc_screen_ena_fbk = plc_screen_ena_fbk
	Let $plc_transoil_man_fbk = plc_transoil_man_fbk
	Let $plc_transoil_ena_fbk = plc_transoil_ena_fbk
	'Exit loop when TFT setpoint feedback is within acceptance threshold
	If $plc_transoil_set_fbk > $Trans_Temp_Low_Threshold
		If $plc_transoil_set_fbk < $Trans_Temp_High_Threshold
			Log_Message (Trans Fluid has been set to %%$Trans_Temp_Setpoint,0D%% DegC Feedback is %%$plc_transoil_set_fbk,0D%% DegC. Trans_Temp_Counter is %%$Trans_Temp_Counter%%. plc_transoil_set_Elapsed_Time is %%$plc_transoil_set_Elapsed_Time,1D%% seconds.)
			Goto Done_Set_Trans_Temp:
		End
	End
	'If trans oil set exceeds timeout limit, 
	If $plc_transoil_set_Elapsed_Time > 30
		'Increment counter
		Let $Trans_Temp_Counter = $Trans_Temp_Counter + 1
		Log_Message (Unable to set transmission fluid temperature to %%$Trans_Temp_Setpoint,6D%% DegC.  Feedback is %%$plc_transoil_set_fbk,6D%% DegC.  plc_transoil_man_fbk is %%$plc_transoil_man_fbk,0D%%.  plc_transoil_ena_fbk is %%$plc_transoil_ena_fbk%%.)
		Log_Message (******************************************************)
		Log_Message (Terminating test.)
		Log_Message (******************************************************)
		Log_Message (Attempt %%$Trans_Temp_Counter%% to set plc_transoil_set to %%$Trans_Temp_Setpoint,6D%% DegC.  plc_screen_ena_fbk is %%$plc_screen_ena_fbk,0D%%. plc_transoil_set_fbk is %%$plc_transoil_set_fbk,6D%% DegC. plc_transoil_ena_fbk is %%$plc_transoil_ena_fbk%%.)
		'Send text message
		Let !Text_Message = Unable to set transmission fluid temperature to %%$Trans_Temp_Setpoint,6D%% DegC.  Feedback is %%$plc_transoil_set_fbk,6D%% DegC.  plc_transoil_man_fbk is %%$plc_transoil_man_fbk,0D%%.  plc_transoil_ena_fbk is %%$plc_transoil_ena_fbk%%. Terminating Test.
		Gosub Send_Text_Message
		'Terminate test
		Gosub Terminate_Test
	Else
		'Re-set trans oil restart loop
		Goto Reset_Trans_Temp:
	End
    Wait (1)
Loop

Start_HIL_Temp_Set:

'Capture previously commanded TFT setpoint
Let $Last_Commanded_Trans_Tmp = Commanded_Trans_Tmp
Log_Message (Previous setting for desired trans temp of %%$Trans_Temp_Setpoint,6D%% DegC is Commanded_Trans_Tmp of %%$Last_Commanded_Trans_Tmp,6D%% DegC.)

'HIL Dyno Trans Temp set

'Initialize counter
Let $HIL_Trans_Temp_Counter = 0

Reset_HIL_Dyno_Trans_Temp_Set:

'Set TFT setpoint

Set Trans_Temp_Set ($Trans_Temp_Setpoint,0)
Wait (3)

'Initialize timer
Let $HIL_Elapsed_Set_Trans_Temp_Time = 0
Let $HIL_Set_Trans_Temp_Start_Time = Timer
Let $HIL_Trans_Temp_Set_Time_Limit = 30

'Start HIL Dyno trans temp set control loop
Do
	'Update timer
	Let $HIL_Elapsed_Set_Trans_Temp_Time = Timer - $HIL_Set_Trans_Temp_Start_Time
	'Capture commanded TFT setpoint feedback
	Let $Commanded_Trans_Tmp = Commanded_Trans_Tmp
	'Exit loop if commanded TFT setpoint is within acceptance threshold
	If $Commanded_Trans_Tmp > $Trans_Temp_Low_Threshold
		If $Commanded_Trans_Tmp < $Trans_Temp_High_Threshold
			Goto Done_Set_Trans_Temp:
		End
	End
	'Increment counter if set trans temp time limit exceeded. Terminate test after 2 attempts
	If $HIL_Elapsed_Set_Trans_Temp_Time > 30
		'Increment counter
		Let $HIL_Trans_Temp_Counter = $HIL_Trans_Temp_Counter + 1
		Log_Message (Attempt %%$HIL_Trans_Temp_Counter%% to set Trans_Temp_Setpoint to %%$Trans_Temp_Setpoint,6D%% DegC.)
		'Terminate test after 2 attempts
		If $HIL_Trans_Temp_Counter > 2
			Log_Message (Unable to set transmission fluid temperature to %%$Trans_Temp_Setpoint,6D%% DegC.  Feedback is %%$Commanded_Trans_Tmp,6D%% DegC. Terminating Test.)
			Log_Message (******************************************************)
			Log_Message (Terminating test.)
			Log_Message (******************************************************)
			'Send text message
			Let !Text_Message = Unable to set transmission fluid temperature to %%$Trans_Temp_Setpoint,6D%% DegC.  Feedback is %%$Commanded_Trans_Tmp,6D%% DegC. Terminating Test.
			Gosub Send_Text_Message
			'Terminate test
			Gosub Terminate_Test
		Else
			'Reset HIL trans temp set and restart loop
			Goto Reset_HIL_Dyno_Trans_Temp_Set:
		End
	End	
    Wait (1)
Loop

Done_Set_Trans_Temp:
If $HIL_Flag = 1 Then Goto Skip_Trans_Cooler_Valve_Set:
'Set TransClr_Vlv_Ctrl Transmission Heat Exchanger according to Desired Temp

If $Trans_Temp_Setpoint < 0
	Set TransClr_Vlv_Ctrl (0,0)
	Log_Message (Trans Cooler Valve set to bypass heat exchanger.)
Else
	Set TransClr_Vlv_Ctrl (1,0)
	Log_Message (Trans Cooler Valve set to bypass heat exchanger.)
End
	
Skip_Trans_Cooler_Valve_Set:
Log_Message (Trans temp set to %%$Trans_Temp_Setpoint,0D%% DegC. Commanded trans temp feedback is %%$Commanded_Trans_Tmp,0D%% DegC.)

End_Sub

'*******************************************************
Sub Set_Soak_Air
'*******************************************************
Log_Message (Running Set_Soak_Air subroutine)

'For HIL Dyno, run Set_HIL_Dyno_Soak_Air subroutine
If $HIL_Flag = 1
	Gosub Set_HIL_Dyno_Soak_Air
	Goto Set_Soak_Air_Complete:
End

'Start PLC for standard cell
If $Standard_Cell = 1
	Gosub Activate_PLC
End	

'Skip setting soak air if test has terminated
If $Terminate_Test_Flag = 1 Then Goto Set_Soak_Air_Complete:

Screen_Message (Green,%%New_Line%%%%New_Line%%Setting Soak Air to %%$Desired_Soak_Temp,0D%% DegC.)

'Capture soak-air on switch feedback
Let $plc_soakair_on_fbk = plc_soakair_on_fbk
'Capture soak-air setpoint
Let $plc_soakairt_set_fbk = plc_soakairt_set_fbk

'Reset soak-air off flag if soak-air is already on
If $plc_soakair_on_fbk = 1
	Let $Soak_Air_Off_Flag = 0
	If $plc_soakairt_set_fbk = $Desired_Soak_Temp
		Log_Message (Soak Air is on and already at desired soak temp of %%$Desired_Soak_Temp%%.)
		Goto Set_Soak_Air_Complete:
	End
End
		
'Turn Soak Air On
Let $Soak_Set_Counter = 0

Turn_Soak_Air_On:

'Turn on soak-air switch
Set plc_soakair_on (1,0)

'Initialize timer
Let $Elapsed_plc_soakair_on_Time = 0
Let $plc_soakair_on_Start_Time = Timer
Let $plc_soakair_on_time_limit = 25

'Start turn on soak-air control loop
Do
	'Update timer
	Let $Elapsed_plc_soakair_on_Time = Timer - $plc_soakair_on_Start_Time
	'Capture soak-air on feedback
	Let $plc_soakair_on_fbk = plc_soakair_on_fbk
	'Exit loop when soak-air is on
	If $plc_soakair_on_fbk = 1 Then Goto plc_soakair_on_Done:
	'If timer exceeds soak-air on timer
	If $Elapsed_plc_soakair_on_Time > $plc_soakair_on_time_limit
		'Increment counter
		Let $Soak_Set_Counter = $Soak_Set_Counter + 1
		'Terminate test after 2 attempts
		If $Soak_Set_Counter > 2
			Log_Message (Unable to turn on Soak Air. plc_soakair_on_fbk is %%$plc_soakair_on_fbk,0D%%.)
			Log_Message (******************************************************)
			Log_Message (Terminating test.)
			Log_Message (******************************************************)
			'Send text message
			Let !Text_Message = Unable to turn on Soak Air. plc_soakair_on_fbk is %%$plc_soakair_on_fbk,0D%%. Terminating Test
			Gosub Send_Text_Message
			'Terminate test
			Gosub Terminate_Test
		Else
			'Re-attempt to turn on soak-air
			Goto Turn_Soak_Air_On:
		End
	End
	Wait (1)
Loop

plc_soakair_on_Done:

Log_Message (Soak Air on. plc_soakair_on_fbk is %%$plc_soakair_on_fbk%%. Soak_Set_Counter is %%$Soak_Set_Counter%%. Elapsed_plc_soakair_on_Time is %%$Elapsed_plc_soakair_on_Time,1D%% seconds.)

'Turn on combustion air
Let $Comb_Set_Counter = 0

Set_plc_air_on:

'Turn on Combustion air
Set plc_combair_on (1,0)

'Initialize timer
Let $plc_combair_on_Elapsed_Time = 0
Let $plc_combair_on_Start_Time = Timer
Let $plc_combair_on_time_limit = 30

'Start combustion air on control loop
Do
	'Update timer
	Let $plc_combair_on_Elapsed_Time = Timer - $plc_combair_on_Start_Time
	'Capture combustion air switch feedback
	Let $plc_combair_on_fbk = plc_combair_on_fbk
	'If combustion air is on, exit loop
	If $plc_combair_on_fbk = 1 Then Goto plc_combair_on_Done:
	'If timer exceeds time limit, increment counter and retry. Terminate test after 2 attempts
	If $plc_combair_on_Elapsed_Time > $plc_combair_on_time_limit
		'Increment counter
		Let $Comb_Set_Counter = $Comb_Set_Counter + 1
		'Terminate test after attempts
		If $Comb_Set_Counter > 2
			Log_Message (Could not turn on combustion air)
			Goto plc_combair_on_Done:
		Else
			Goto Set_plc_air_on:
		End
	End
	Wait (1)
Loop

plc_combair_on_Done:
Log_Message (Combustion Air on.)

'Turn on Soak Air Temperature Control
Let $Soak_Temp_Threshold = $CurrentRunTemp - 3

'Initialize counter
Let $Soak_Air_Temp_Enable_Counter = 0

PLC_Soak_Air_Temp_Enable_On:

'Initialize timer
Let $Elapsed_plc_soakairt_ena_time = 0
Let $Plc_soakairt_ena_start_time = Timer
Let $Plc_soakairt_ena_time_limit = 25

'Set soak-air temperature control enable switch
Set plc_soakairt_ena (1,0)

'Start soak-air temperature control enable control loop
Do
	'Update timer
	Let $Elapsed_plc_soakairt_ena_time = Timer - $Plc_soakairt_ena_start_time
	'Capture soak-air temp control enable feedback
	Let $plc_soakairt_ena_fbk = plc_soakairt_ena_fbk
	'If soak-air temp control is enabled, exit loop
	If $plc_soakairt_ena_fbk = 1 Then Goto PLC_SOAKAIRT_ENA_Done:
	'If timer exceeds time limit, increment timer and terminate test after 2 attempts
	If $Elapsed_plc_soakairt_ena_Time > 25
		'Increment timer
		Let $Soak_Air_Temp_Enable_Counter = $Soak_Air_Temp_Enable_Counter + 1
		'Terminate test after 2 attempts
		If $Soak_Air_Temp_Enable_Counter > 2
			Log_Message (Unable to turn on Soak Air Temperature Control.  plc_soakairt_ena_fbk is %%$plc_soakairt_ena_fbk,0D%%.)
			Log_Message (******************************************************)
			Log_Message (Terminating test.)
			Log_Message (******************************************************)
			'Send text message
			Let !Text_Message = Unable to turn on Soak Air Temperature Control.  plc_soakairt_ena_fbk is %%$plc_soakairt_ena_fbk,0D%%. Terminating test.
			Gosub Send_Text_Message
			'Terminate test
			Gosub Terminate_Test
		Else
			'Re-attempt soak-air temp control enable
			Goto PLC_Soak_Air_Temp_Enable_On:
		End
	End
Loop

PLC_SOAKAIRT_ENA_Done:
Log_Message (Soak Air Temperature Control Enabled. Soak_Air_Temp_Enable_Counter is %%$Soak_Air_Temp_Enable_Counter%%. Elapsed_PLC_SOAKAIRT_ENA_Time is %%$Elapsed_PLC_SOAKAIRT_ENA_Time,1D%% seconds.)

'Establish low and high thresholds for combustion air setpoint acceptance
Let $Combair_Temp_Threshold_Low = $Desired_Soak_Temp - 1
Let $Combair_Temp_Threshold_High = $Desired_Soak_Temp + 1

'Capture combustion air temp setpoint
Let $plc_combairt_set_fbk = plc_combairt_set_fbk
'If combustion air setpoint feedback is within acceptance threshold, skip combustion air setting
If $plc_combairt_set_fbk >= $Combair_Temp_Threshold_Low
	If $plc_combairt_set_fbk <= $Combair_Temp_Threshold_High
		Goto plc_combairt_set_Done:
	End
End

'Initialize counter
Let $Combairt_Set_Counter = 0

Log_Message (Combustion air setpoint feedback is %%$plc_combairt_set_fbk%% DegC prior to setting to desired temp of %%$Desired_Soak_Temp,0D%%degC.)
Set_Combustion_Temp:

'Initialize timer
Let $Elapsed_Set_Combustion_Air_Temp_Time = 0
Let $Set_Combustion_Air_Temp_Start_Time = Timer
Let $Set_Combustion_Air_Temp_Time_Limit = 25

'Set combustion air temperature setpoint to the desired soak temp
Set plc_combairt_set ($Desired_Soak_Temp,0)

'Start set combustion air temp control loop
Do
	'Update timer
	Let $Elapsed_Set_Combustion_Air_Temp_Time = Timer - $Set_Combustion_Air_Temp_Start_Time
	'Capture combustion air temp setpoint feedback
	Let $plc_combairt_set_fbk = plc_combairt_set_fbk
	'Get integer value of combustion air feedback
	Let $plc_combairt_set_fbk = Int ($plc_combairt_set_fbk)
	'If combustion air setpoint feedback is within acceptance threshold, exit loop
	If $plc_combairt_set_fbk >= $Combair_Temp_Threshold_Low
		If $plc_combairt_set_fbk <= $Combair_Temp_Threshold_High
			Goto plc_combairt_set_Done:
		End
	End
	'If timer exceeds time limit, increment timer and terminate test after 2 attempts
	If $Elapsed_Set_Combustion_Air_Temp_Time > $Set_Combustion_Air_Temp_Time_Limit
		'Increment counter
		Let $Combairt_Set_Counter = $Combairt_Set_Counter + 1
		'Terminate test after 2 attempts
		If $Combairt_Set_Counter > 2
			'Capture plc feedbacks
			Let $plc_screen_ena_fbk = plc_screen_ena_fbk
			Let $plc_combair_on_fbk = plc_combair_on_fbk
			Let $plc_combairt_ena_fbk = plc_combairt_ena_fbk
			Log_Message (Unable to set Combustion Air Temperature to %%$Desired_Soak_Temp%% DegC.  Feedback is %%$plc_combairt_set_fbk%% DegC.)
			Log_Message (Plc_screen_ena_fbk is %%$plc_screen_ena_fbk,0D%%. Plc_combair_on_fbk is %%$plc_combair_on_fbk,0D%%. plc_combairt_ena_fbk is %%$plc_combairt_ena_fbk,0D%%.)
			Log_Message (******************************************************)
			Log_Message (Terminating test.)
			Log_Message (******************************************************)
			'Send text message
			Let !Text_Message = Unable to set Combustion Air Temperature to %%$Desired_Soak_Temp%% DegC.  Feedback is %%$plc_combairt_set_fbk%% DegC.  Terminating test.
			Gosub Send_Text_Message
			'Terminate test
			Gosub Terminate_Test
		Else
			'Re-attempt set combustion temp
			Goto Set_Combustion_Temp:
		End
	End
Loop

plc_combairt_set_Done:

Log_Message (Combustion Air set to %%$Desired_Soak_Temp%% DegC. Feedback value is %%$plc_combairt_set_fbk,0D%% DegC. Combairt_Set_Counter is %%$Combairt_Set_Counter%%. Elapsed_Set_Combustion_Air_Temp_Time is %%$Elapsed_Set_Combustion_Air_Temp_Time,1D%% seconds.)

'Turn Soak Air Manual Mode Off

'Capture soak-air manual feedback
Let $plc_soakairt_man_fbk = plc_soakairt_man_fbk
'If soak-air manual is already off, skip turning soak-air manual off
If $plc_soakairt_man_fbk = 0 Then Goto PLC_SOAKAIRT_MAN_Off_Done:
	
'Initialize counter
Let $Soak_Manual_Set_Counter = 0

PLC_Soak_Air_Temp_Manual_Off:

'Initialize timer
Let $Plc_soakirt_man_Elapsed_Time = 0
Let $Plc_soakirt_man_Start_Time = Timer
Let $Plc_soakirt_man_time_limit = 25

'Set soak-air manual off
Set PLC_SOAKAIRT_MAN (0,0)

'Start soak-air manual off control loop
Do
	'Update timer
	Let $PLC_SOAKAIRT_MAN_Elapsed_Time = Timer - $PLC_SOAKAIRT_MAN_Start_Time
	'Capture soak-air manual feedback
	Let $plc_soakairt_man_fbk = plc_soakairt_man_fbk
	'If soak-air manual is off, 
	If $plc_soakairt_man_fbk = 0 Then Goto PLC_SOAKAIRT_MAN_Off_Done:
	If $PLC_SOAKAIRT_MAN_Elapsed_Time > $Plc_soakirt_man_time_limit
		Let $Soak_Manual_Set_Counter = $Soak_Manual_Set_Counter + 1
		If $Soak_Manual_Set_Counter > 2
			Log_Message (Unable to turn off Soak Air Manual Mode. Terminating test. plc_soakairt_man_fbk is %%$plc_soakairt_man_fbk%%.)
			Log_Message (******************************************************)
			Log_Message (Terminating test.)
			Log_Message (******************************************************)
			'Send text message
			Let !Text_Message = Unable to turn off Soak Air Manual Mode. Terminating test. plc_soakairt_man_fbk is %%$plc_soakairt_man_fbk%%. Terminating test.
			Gosub Send_Text_Message
			'Terminate test
			Gosub Terminate_Test
		Else
			'Re-attempt turning soak-air manual off
			Goto PLC_Soak_Air_Temp_Manual_Off:
		End
	End
Loop

PLC_SOAKAIRT_MAN_Off_Done:
Log_Message (Soak Air Manual Valve turned off. Soak_Manual_Set_Counter is %%$Soak_Manual_Set_Counter%%. PLC_SOAKAIRT_MAN_Elapsed_Time is %%$PLC_SOAKAIRT_MAN_Elapsed_Time,1D%% seconds.)

'Establish low and high threshold for setpoint acceptance
Let $Soak_Temp_Threshold_Low = $Desired_Soak_Temp - 1
Let $Soak_Temp_Threshold_High = $Desired_Soak_Temp + 1

'Capture soak-air feedback
Let $plc_soakairt_set_fbk = plc_soakairt_set_fbk

'If soak-air setpoint feedback is within acceptance threshold, skip setting soak-air
If $plc_soakairt_set_fbk >= $Soak_Temp_Threshold_Low
	If $plc_soakairt_set_fbk <= $Soak_Temp_Threshold_High
		Goto plc_soakairt_set_Done:
	End
End

'Initialize counter
Let $Soak_Temp_Set_Counter = 0
Set_Soak_Temp:

'Initialize timer
Let $Elapsed_Set_Soak_Air_Temp_Time = 0
Let $Set_Soak_Air_Temp_Start_Time = Timer
Let $Set_Soak_Air_Time_Limit = 25

'Set soak-air setpoint to desired soak temperature
Set plc_soakairt_set ($Desired_Soak_Temp,0)

'Start set soak-air setpoint control loop
Do
	'Update timer
	Let $Elapsed_Set_Soak_Air_Temp_Time = Timer - $Set_Soak_Air_Temp_Start_Time
	'Capture soak-air setpoint feedback
	Let $plc_soakairt_set_fbk = plc_soakairt_set_fbk
	'Get integer value of soak-air setpoint feedback
	Let $plc_soakairt_set_fbk = Int ($plc_soakairt_set_fbk)
	'If soak-air setpoint feedback is within acceptance threshold, exit loop
	If $plc_soakairt_set_fbk >= $Soak_Temp_Threshold_Low
		If $plc_soakairt_set_fbk <= $Soak_Temp_Threshold_High
			Goto plc_soakairt_set_Done:
		End
	End
	'If timer exceeds time limit, increment counter and terminate test after 2 attempts
	If $Elapsed_Set_Soak_Air_Temp_Time > $Set_Soak_Air_Time_Limit
		'Increment counter
		Let $Soak_Temp_Set_Counter = $Soak_Temp_Set_Counter + 1
		'Terminate test after 2 attempts
		If $Soak_Temp_Set_Counter > 2
			Log_Message (Unable to set Soak Air Temperature to %%$Desired_Soak_Temp%% DegC.  Feedback is %%$plc_soakairt_set_fbk%% DegC.)
			Log_Message (******************************************************)
			Log_Message (Terminating test.)
			Log_Message (******************************************************)
			'Send text message
			Let !Text_Message = Unable to set Soak Air Temperature to %%$Desired_Soak_Temp%% DegC.  Feedback is %%$plc_soakairt_set_fbk%% DegC.  Terminating test.
			Gosub Send_Text_Message
			'Terminate test
			Gosub Terminate_Test
		Else
			'Re-attempt setting soak-air setpoint
			Goto Set_Soak_Temp:
		End
	End
Loop

plc_soakairt_set_Done:

Log_Message (Soak Air set to %%$Desired_Soak_Temp%% DegC. Feedback value is %%$plc_soakairt_set_fbk,0D%% DegC. Soak_Temp_Set_Counter is %%$Soak_Temp_Set_Counter%%. Elapsed_Set_Soak_Air_Temp_Time is %%$Elapsed_Set_Soak_Air_Temp_Time,1D%% seconds.)

Set_Soak_Air_Complete:

End_Sub

'*******************************************************
Sub Set_HIL_Dyno_Soak_Air
'*******************************************************
Log_Message (Running Set_HIL_Dyno_Soak_Air subroutine)

'Set Chamber Soak Setpoint to desired soak temp
'Set Chamber_Temp_Set ($Desired_Soak_Temp,0)

Log_Message (HIL Dyno Chamber temperature set to %%$Desired_Soak_Temp%%DegC)

'DegF to DegC conversions
'-10DegF = -23.3DegC
'-20DegF = -28.9DegC
'-30DegF = -34.4DegC
'-40DegF = -40.0DegC

End_Sub

'*******************************************************
Sub Slowdown
'*******************************************************
Log_Message (Running Slowdown subroutine)
'Slowdown/ Verify Stop prior to running upshift

'Turn off any PID controls that might be running
PIDs_Off

'Set Road Grade to zero
Set RoadGrade_Set (0,0)
Log_Message (Slowdown RoadGrade set to 0%.)

'Reset engine speed test switches if applied
Gosub Reset_Engine_Speed

'Set Accelerator Pedal to zero
Gosub Reset_Pedal

Wait (5)

'Unlock torque converter
Gosub Unlock_Converter

'Reset TRAM parameters
Select_Case $Trans_Select
	Case = 2
		'8F24
		Gosub TRAM_Reset_8F
	Case = 3
		'10R140
		Gosub TRAM_Reset_10R			
	Case = 4
		'8F57
		Gosub TRAM_Reset_8F			
	Case = 6
		'10R60/80
		Gosub TRAM_Reset_10R
	Case = 7
		'8F35
		Gosub TRAM_Reset_8F
	Case = 8
		'6R80
		Gosub TRAM_Reset_6R	
End_Select

Screen_Message (Yellow, Slowing Down)

'Capture Vehicle Speed.
Let $Vehicle_Speed_Feedback = Vehicle_Speed_Feedback

'Skip slowdown if already stopped
If $Vehicle_Speed_Feedback < 0.5 Then Goto Slowdown_Done:
Log_Message (Slowing down from %%$Vehicle_Speed_Feedback,0D%% kph)
Slowdown:

Wait (1)

'Set EMCON mode for Standard Dyno Cells
If $Standard_Cell = 1
	Let $Desired_Emcon_Mode = 19
	'Road_Grade/Throttle
	Gosub Set_Emcon_Mode
End

'Apply Brake for HIL Dyno
If $HIL_Flag = 1
	Set DynoBrake_Set (50,0)
	Log_Message (Slowdown DynoBrake_Set set to 50.)
End

'For Standard Dyno cells, set Road Grade to 20%
If $Standard_Cell = 1
	Set RoadGrade_Set (20,10)
End

'Initialize timer
Let $Elapsed_Slowdown_Time = 0
Let $Slowdown_Start_Time = Timer
Let $Slowdown_Time_Limit = 15

'Start Slowdown control loop
Do
	'Update timer
	Let $Elapsed_Slowdown_Time = Timer - $Slowdown_Start_Time
	'Capture Vehicle Speed
	Let $Vehicle_Speed_Feedback = Vehicle_Speed_Feedback
	'Set screen message during slowdown
	If $Vehicle_Speed_Feedback > 0.5
		If $Vehicle_Flag = 1
			Screen_Message (Yellow, %%New_Line%%%%New_Line%%Apply Brake.%%New_Line%%%%New_Line%%Vehicle Speed is %%$Vehicle_Speed_Feedback,0D%% kph.)
		Else	
			Screen_Message (Green, %%New_Line%%Waiting for vehicle to return to a stop...%%New_Line%%%%New_Line%%Vehicle Speed is %%$Vehicle_Speed_Feedback,0D%% kph.)
		End	
	Else
		'If Vehicle Speed is ~0 kph, exit loop
		Goto Slowdown_Done:
	End
	Wait (1)
Loop

Slowdown_Done:
'Apply Brake for HIL Dyno
If $HIL_Flag = 1
	Set DynoBrake_Set (100,0)
	Log_Message (Slowdown DynoBrake_Set set to 50.)
End

'Reset gear switch
Set RMSC_D_GR_TYP_SW_S ($RMSC_D_GR_TYP_SW_S_Base,0)

Wait (2)

End_Sub

'********************************************************************************************
Sub Enable_Rolling_Engagements
'********************************************************************************************
Log_Message (Running Enable_Rolling_Engagements subroutine)

'Set Rolling Engagement Enable Switch
Set Rolling_Engagment_Enable_Sw (1,0)

'Initialize timer
Let $Elapsed_Rolling_Engagement_Enable_Time = 0
Let $Rolling_Engagement_Enable_Start_Time = Timer
Let $Rolling_Engagement_Enable_Time_Limit = 10

'Start Rolling Engagement Enable Control loop
Do
	'Update timer
	Let $Elapsed_Rolling_Engagement_Enable_Time = Timer - $Rolling_Engagement_Enable_Start_Time
	'If timer exceeds time limit, terminate test
	If $Elapsed_Rolling_Engagement_Enable_Time > $Rolling_Engagement_Enable_Time_Limit
 	    Log_Message (Elapsed_Rolling_Engagement_Enable_Time exceeded time limit of %%$Rolling_Engagement_Enable_Time_Limit,0D%% seconds.)
		Log_Message (******************************************************)
		Log_Message (Terminating test.)
		Log_Message (******************************************************)
		'Send text message
		Let !Text_Message = Elapsed_Rolling_Engagement_Enable_Time exceeded time limit. Terminating test
		Gosub Send_Text_Message
		'Terminate test
 	    Gosub Terminate_Test
	End
	Let $Rolling_Engagements_Enabled = rolling_engagement_fbk
	If $Rolling_Engagements_Enabled = 1
		Log_Message (Rolling Engagements Enabled)
		Goto Done_Rolling_Engagements_Enabled:
	End	
Loop

Done_Rolling_Engagements_Enabled:

End_Sub

'********************************************************************************************
Sub Disable_Rolling_Engagements
'********************************************************************************************
Log_Message (Running Disable_Rolling_Engagements subroutine)

'Set Rolling Engagement Enable Switch
Set Rolling_Engagment_Enable_Sw (0,0)

'Initialize timer
Let $Elapsed_Rolling_Engagement_Disable_Time = 0
Let $Rolling_Engagement_Disable_Start_Time = Timer
Let $Rolling_Engagement_Disable_Time_Limit = 10

'Start Rolling Engagement Enable Control loop
Do
	'Update timer
	Let $Elapsed_Rolling_Engagement_Disable_Time = Timer - $Rolling_Engagement_Disable_Start_Time
	'If timer exceeds time limit, terminate test
	If $Elapsed_Rolling_Engagement_Disable_Time > $Rolling_Engagement_Disable_Time_Limit
 	    Log_Message (Elapsed_Rolling_Engagement_Disable_Time exceeded time limit of %%$Rolling_Engagement_Disable_Time_Limit,0D%% seconds.)
		Log_Message (******************************************************)
		Log_Message (Terminating test.)
		Log_Message (******************************************************)
		'Send text message
		Let !Text_Message = Elapsed_Rolling_Engagement_Disable_Time exceeded time limit. Terminating test.
		Gosub Send_Text_Message
		'Terminate test
 	    Gosub Terminate_Test
	End
	Let $Rolling_Engagements_Enabled = rolling_engagement_fbk
	If $Rolling_Engagements_Enabled = 0
		Log_Message (Rolling Engagements Disabled)
		Goto Done_Rolling_Engagements_Disabled:
	End	
Loop

Done_Rolling_Engagements_Disabled:

End_Sub
'********************************************************************************************
Sub Set_PRNDL_Position
'********************************************************************************************
Log_Message (Running Set_PRNDL_Position subroutine)

'Establish string for standard cell desired PRNDL position
If $Vehicle_Flag = 1
	Select_Case $Desired_PRNDL_Position
		Case = 0
			'Park	
			Let !Desired_PRNDL_Position = Park
		Case = 1
			'Reverse
			Let !Desired_PRNDL_Position = Reverse
		Case = 2
			'Neutral		
			Let !Desired_PRNDL_Position = Neutral
		Case = 3
			'Overdrive	
			Let !Desired_PRNDL_Position = Overdrive
		Case = 4
			'Drive	
			Let !Desired_PRNDL_Position = Drive
	End_Select	
End
'Establish string for HIL Dyno desired PRNDL position
If $HIL_Flag = 1
	Select_Case $Desired_PRNDL_Position
		Case = 0
			'Park	
			Let !Desired_PRNDL_Position = Park
		Case = 1
			'Reverse
			Let !Desired_PRNDL_Position = Reverse
		Case = 2
			'Neutral
			Let !Desired_PRNDL_Position = Neutral
			Case = 3
			'Overdrive		
			Let !Desired_PRNDL_Position = Overdrive
		Case = 4
			'Overdrive	
			Let !Desired_PRNDL_Position = Overdrive
		Case = 5
			'Drive	
			Let !Desired_PRNDL_Position = Drive
	End_Select	
End
Log_Message (Set_PRNDL_Position. Setting_PRNDL_Position = %%$Desired_PRNDL_Position,0D%%)
Log_Message (Set_PRNDL_Position. Setting_PRNDL_Position = %%!Desired_PRNDL_Position%%)

'Skip set PRNDL for Desktop mode
If $Desktop_Mode = 1 Then Goto Exit_Set_PRNDL_Position:

'Check PRNDL position and prompt driver to shift to desired PRNDL position
If $Vehicle_Flag = 1
	Screen_Message (Yellow, Please put PRNDL in %%!Desired_PRNDL_Position%% position. Press 'Resume Test' when ready.)
	Pause
	PRNDL_Recheck:
	'Capture PRNDL position in Vision
	Let $THMI_ST_PRND_DES = THMI_ST_PRND_DES
	'Prompt driver if not in desired PRNDL position
	Select_Case $Desired_PRNDL_Position
		Case = 0
			'Park
			If $THMI_ST_PRND_DES = 1 Then Goto Exit_Set_PRNDL_Position:
		Case = 1
			'Reverse
			If $THMI_ST_PRND_DES = 2 Then Goto Exit_Set_PRNDL_Position:
		Case = 2
			'Neutral
			If $THMI_ST_PRND_DES = 3 Then Goto Exit_Set_PRNDL_Position:
		Case = 3
			'Drive
			If $THMI_ST_PRND_DES = 4 Then Goto Exit_Set_PRNDL_Position:			
		Case = 4
			'Overdrive
			If $THMI_ST_PRND_DES = 4 Then Goto Exit_Set_PRNDL_Position:		
		Case = 5
			'1st_Gear
			If $THMI_ST_PRND_DES = 0 Then Goto Exit_Set_PRNDL_Position:		
		Case = 6
			'2nd_Gear
			If $THMI_ST_PRND_DES = 0 Then Goto Exit_Set_PRNDL_Position:			
		Case = 7
			'3rd_Gear
			If $THMI_ST_PRND_DES = 0 Then Goto Exit_Set_PRNDL_Position:			
		Case = 8
			'4th_Gear-Using PRNDL_Position.sel for feedback there is no feedback parameter for 4th gear. Future use PRNDL_Position.fbk for feedback.
			If $THMI_ST_PRND_DES = 999 Then Goto Exit_Set_PRNDL_Position:
	End_Select	
	If $THMI_ST_PRND_DES ~= $Desired_PRNDL_Position
		Screen_Message (Yellow, Incorrect PRNDL position. Please put PRNDL in %%!Desired_PRNDL_Position%% position. Press 'Resume Test' when ready.)
		Pause
		Goto PRNDL_Recheck:
	Else
		Goto Exit_Set_PRNDL_Position:
	End
End

'For standard dyno cell, check emcon state and start PLC
If $Standard_Cell = 1
	'Check emcon state
	Let $EMCON_SYSSTATE = EMCON_SYSSTATE
	'If not in auto mode, start plc
	If $EMCON_SYSSTATE ~= 7
		Log_Message (emcon_sysstate is %%$EMCON_SYSSTATE%%)
		'Start PLC
		Gosub Activate_PLC
	End
End

'Capture current PRNDL position
Let $CurrentPRNDL = THMI_ST_PRND_DES
	
'Call send PRNDL position command subroutine	
Gosub Send_PRNDL_Position_Command

'Initialize timer
Let $Elapsed_Check_PRNDL_Position_Status_Time = 0
Let $Start_Check_PRNDL_Position_Status_Time = Timer
Let $PC_Time_Between_Caltool_Commands = 5
Let $PC_PRNDL_Position_Status_Time = 40

'Start Check PRNDL position control loop
Do
	'Update check PRNDL position timer
	Let $Elapsed_Check_PRNDL_Position_Status_Time = Timer - $Start_Check_PRNDL_Position_Status_Time
	'Terminate test if time limit exceeded
	If $Elapsed_Check_PRNDL_Position_Status_Time > $PC_PRNDL_Position_Status_Time
		Pause_Off
		Log_Message (******************************************************)
		Log_Message (Terminating test.)
		Log_Message (******************************************************)
		Log_Message (The PRNDL_Position Could Not Be Set Before The Timeout Expired.)
		Log_Message (The Caltool Command Timeout = %%$PC_PRNDL_Position_Status_Time,0D%% seconds.)
		'Capture engine speed
		Let $TCRPM_NE_BAR = TCRPM_NE_BAR
		Let $THMI_ST_PRND_DES = THMI_ST_PRND_DES
		Log_Message (Engine Speed is %%$TCRPM_NE_BAR,0D%%)
		Log_Message (The Desired Adacs PRNDL_Position = %%$Desired_PRNDL_Position,0D%%)
		Log_Message (The Current Adacs PRNDL_Position = %%$Stored_PRNDL_Position_Fbk,0D%%)
		Log_Message (PCM THMI_ST_PRND_DES = %%$THMI_ST_PRND_DES,0D%%)
		Log_Message (Note: The Current Value Does Not Have To Match Desired Value!!)
		Log_Message (Please Correct This Problem And Restart The Test.)
		'If terminate test flag is not already set, terminate test. If terminate test flag is set, skip setting PRNDL position command
		If $Terminate_Test_Flag = 0
			'Save Debug File
			Save_Debug_Files
			Log_Message (Debug File Saved)
			'Send text message
			Let !Text_Message = The PRNDL_Position Could Not Be Set Before The Timeout Expired. Desired PRNDL_Position = %%$Desired_PRNDL_Position,0D%%. Current PRNDL_Position = %%$Stored_PRNDL_Position_Fbk,0D%%. Terminating Test.
			Gosub Send_Text_Message
			'Terminate test
			Gosub Terminate_Test
		Else
			'Skip setting PRNDL position
			Goto Exit_Set_PRNDL_Position:
		End
	End
	'Update send PRNDL position timer
	Let $Elapsed_Last_Sent_PRNDL_Position_Command_Time = Timer - $Last_Sent_PRNDL_Position_Command_Time
	'If send PRNDL position timer exceeds time limit, re-send PRNDL position command
	If $Elapsed_Last_Sent_PRNDL_Position_Command_Time > $PC_Time_Between_Caltool_Commands Then Gosub Send_PRNDL_Position_Command
	Wait (.5)
	'Capture PRNDL position
	Let $Stored_PRNDL_Position_Fbk = PRNDL_Feedback
	'For HIL Dyno, check PCM PRNDL position
	'If $HIL_Flag = 1
		'Capture PCM PRNDL position
		Let $THMI_ST_PRND_DES = THMI_ST_PRND_DES
		'Exit loop if measured PRNDL position meets desired PRNDL position
		Select_Case $Desired_PRNDL_Position
			Case = 0
				'Park
				If $THMI_ST_PRND_DES = 1 Then Goto Exit_Set_PRNDL_Position:
			Case = 1
				'Reverse
				If $THMI_ST_PRND_DES = 2 Then Goto Exit_Set_PRNDL_Position:
			Case = 2
				'Neutral
				If $THMI_ST_PRND_DES = 3 Then Goto Exit_Set_PRNDL_Position:
			Case = 3
				'Drive
				If $THMI_ST_PRND_DES = 4 Then Goto Exit_Set_PRNDL_Position:			
			Case = 4
				'Overdrive
				If $THMI_ST_PRND_DES = 4 Then Goto Exit_Set_PRNDL_Position:		
			Case = 5
				'1st_Gear
				If $THMI_ST_PRND_DES = 0 Then Goto Exit_Set_PRNDL_Position:		
			Case = 6
				'2nd_Gear
				If $THMI_ST_PRND_DES = 0 Then Goto Exit_Set_PRNDL_Position:			
			Case = 7
				'3rd_Gear
				If $THMI_ST_PRND_DES = 0 Then Goto Exit_Set_PRNDL_Position:			
			Case = 8
				'4th_Gear-Using PRNDL_Position.sel for feedback there is no feedback parameter for 4th gear. Future use PRNDL_Position.fbk for feedback.
				If $THMI_ST_PRND_DES = 999 Then Goto Exit_Set_PRNDL_Position:
		End_Select
		' Let $Stored_PRNDL_Position_Fbk = PRNDL_Feedback
		' Select_Case $Desired_PRNDL_Position
			' Case = 0
				' 'Park
				' If $Stored_PRNDL_Position_Fbk = 0 Then Goto Exit_Set_PRNDL_Position:
			' Case = 1
				' 'Reverse
				' If $Stored_PRNDL_Position_Fbk = 1 Then Goto Exit_Set_PRNDL_Position:		
			' Case = 2
				' 'Neutral
				' If $Stored_PRNDL_Position_Fbk = 2 Then Goto Exit_Set_PRNDL_Position:		
			' Case = 3
				' 'Drive
				' If $Stored_PRNDL_Position_Fbk = 3 Then Goto Exit_Set_PRNDL_Position:			
			' Case = 4
				' 'Overdrive
				' If $Stored_PRNDL_Position_Fbk = 3 Then Goto Exit_Set_PRNDL_Position:			
		' End_Select
	' Else
		' 'For Standard dyno cell
		' Select_Case $Desired_PRNDL_Position
			' Case = 0
				' 'Park
				' If $Stored_PRNDL_Position_Fbk = 1 Then Goto Exit_Set_PRNDL_Position:
			' Case = 1
				' 'Reverse
				' If $Stored_PRNDL_Position_Fbk = 2 Then Goto Exit_Set_PRNDL_Position:		
			' Case = 2
				' 'Neutral
				' If $Stored_PRNDL_Position_Fbk = 0 Then Goto Exit_Set_PRNDL_Position:		
			' Case = 3
				' 'Drive
				' If $Stored_PRNDL_Position_Fbk = 5 Then Goto Exit_Set_PRNDL_Position:			
			' Case = 4
				' 'Overdrive
				' If $Stored_PRNDL_Position_Fbk = 3 Then Goto Exit_Set_PRNDL_Position:			
			' Case = 5
				' '1st_Gear
				' If $Stored_PRNDL_Position_Fbk = 6 Then Goto Exit_Set_PRNDL_Position:			
			' Case = 6
				' '2nd_Gear
				' If $Stored_PRNDL_Position_Fbk = 0 Then Goto Exit_Set_PRNDL_Position:			
			' Case = 7
				' '3rd_Gear
				' If $Stored_PRNDL_Position_Fbk = 7 Then Goto Exit_Set_PRNDL_Position:			
			' Case = 8
				' '4th_Gear-Using PRNDL_Position.sel for feedback there is no feedback parameter for 4th gear. Future use PRNDL_Position.fbk for feedback.
				' 'Pause
				' If $Stored_PRNDL_Position_Fbk = 999 Then Goto Exit_Set_PRNDL_Position:
		' End_Select
	'End	
Loop

Exit_Set_PRNDL_Position:

Wait (5)

Let $THMI_ST_PRND_DES = THMI_ST_PRND_DES
'Establish PRNDL position string based on numeric PRNDL position for HIL dyno
'If $HIL_Flag = 1
Select_Case $THMI_ST_PRND_DES
	Case = 0
		'Neutral	
		Let !PRNDL_Position = ShouldBeNothing
	Case = 1
		'Park	
		Let !PRNDL_Position = Park
	Case = 2
		'Reverse	
		Let !PRNDL_Position = Reverse
	Case = 3
		'Neutral	
		Let !PRNDL_Position = Neutral			
	Case = 4
		'Overdrive	
		Let !PRNDL_Position = Overdrive
	Case = 5
		'Drive	
		Let !PRNDL_Position = Drive
	Case = 6
		'1st_Gear	
		Let !PRNDL_Position = 1st_Gear
	Case = 7
		'3rd_Gear	
		Let !PRNDL_Position = 3rd_Gear
	Case = 999
		'4th_Gear-Using PRNDL_Position.sel for feedback there is no feedback parameter for 4th gear. Future use PRNDL_Position.fbk for feedback.	
		Let !PRNDL_Position = Broken
End_Select

	' 'Establish PRNDL position string based on numeric PRNDL position for standard cell
	' Select_Case $Stored_PRNDL_Position_Fbk
		' Case = 0
			' 'Neutral	
			' Let !PRNDL_Position = Neutral
		' Case = 1
			' 'Park	
			' Let !PRNDL_Position = Park
		' Case = 2
			' 'Reverse	
			' Let !PRNDL_Position = Reverse
		' Case = 3
			' 'Overdrive	
			' Let !PRNDL_Position = Overdrive
		' Case = 5
			' 'Drive	
			' Let !PRNDL_Position = Drive
		' Case = 6
			' '1st_Gear	
			' Let !PRNDL_Position = 1st_Gear
		' Case = 7
			' '3rd_Gear	
			' Let !PRNDL_Position = 3rd_Gear
		' Case = 999
			' '4th_Gear-Using PRNDL_Position.sel for feedback there is no feedback parameter for 4th gear. Future use PRNDL_Position.fbk for feedback.	
			' Let !PRNDL_Position = Broken
	' End_Select

Log_Message (PRNDL set to %%!PRNDL_Position%%. Elapsed_Check_PRNDL_Position_Status_Time is %%$Elapsed_Check_PRNDL_Position_Status_Time,4D%% seconds.)
Save_Variables

End_Sub

'********************************************************************************************
Sub Send_PRNDL_Position_Command
'********************************************************************************************
Log_Message (Running Send_PRNDL_Position_Command subroutine)

'Capture emcon mode
Let $Stored_Emcon_Mode_Fbk = Dyno_Mode_Feedback
Select_Case $Desired_PRNDL_Position
	Case = 0
		'Park
		'If in Overdrive, shift PRNDL to Neutral before shifting to Park
		If $CurrentPRNDL = 4
			Set PRNDL_cmd (2,0)
			Wait (0.05)
		End	
		Set PRNDL_cmd (0,0)	
	Case = 1
		'Reverse
		If $CurrentPRNDL = 4
			Set PRNDL_cmd (2,0)
			Wait (0.5)
		End	
		Set PRNDL_cmd (1,0)
	Case = 2
		'Neutral
		'Set dyno mode to Road_Grade/Throttle for standard dyno cell
		If $Standard_Cell = 1
			'If in speed/throttle, switch to Road_Grade/Throttle
			If $Stored_Emcon_Mode_Fbk = 1
				Let $Desired_Emcon_Mode = 19
				'Road_Grade/Throttle
				Gosub Set_Emcon_Mode
			End
		End	
		Set PRNDL_cmd (2,0)
	Case = 3
		'Drive
		Set PRNDL_cmd (3,0)
	Case = 4
		'Overdrive
		Set PRNDL_cmd (4,0)
	Case = 5
		'1st_Gear
		Set PRNDL_cmd (5,0)
	Case = 6
		'2nd_Gear
		Set PRNDL_cmd (6,0)
	Case = 7
		'3rd_Gear
		Set PRNDL_cmd (7,0)
	Case = 8
		'4th_Gear
		Set PRNDL_cmd (8,0)
End_Select
Wait (1)

'Initialize timer
Let $Last_Sent_PRNDL_Position_Command_Time = Timer

End_Sub

' ********************************************************************************************
Sub Send_Emcon_Mode_Command
' ********************************************************************************************
Log_Message (Running Send_Emcon_Mode_Command subroutine)

'Set EMCON mode command
Select_Case $Desired_Emcon_Mode
	Case = 0
		'Controlled Idle
		'Capture PRNDL position
		Let $THMI_ST_PRND_DES = THMI_ST_PRND_DES
		'If PRNDL is in Neutral, exit loop
		If $THMI_ST_PRND_DES = 3
			Goto Exit_Send_Emcon_Mode:
		Else
			Set emcon_mode_cmd (0,0)
		End
	Case = 1
		'Speed/Throttle
		Set emcon_mode_cmd (1,0)
	Case = 4
		'Speed/Man_Press
		Set emcon_mode_cmd (4,0)
	Case = 5
		'Speed/Torque
		Set emcon_mode_cmd (5,0)
	Case = 7
		'Speed/EEC
		Set emcon_mode_cmd (7,0)
	Case = 15
		'Torque/Throttle
		Set emcon_mode_cmd (15,0)
	Case = 17
		'Torque/Speed
		Set emcon_mode_cmd (17,0)	
	Case = 19
		'Road_Grade/Throttle
		Set emcon_mode_cmd (19,0)
	Case = 21
		'Road_Grade/Vehicle_Speed
		Set emcon_mode_cmd (21,0)
	Case = 22
		'Road_Grade/Man_Press
		Set emcon_mode_cmd (22,0)
End_Select

'Initialize timer
Let $Last_Sent_Emcon_Mode_Command_Time = Timer

Exit_Send_Emcon_Mode:

End_Sub

' ********************************************************************************************
Sub Set_Emcon_Mode
' ********************************************************************************************
Log_Message (Running Set_Emcon_Mode subroutine. Setting_Emcon_Mode = %%$Desired_Emcon_Mode,0D%%)

'Skip setting dyno mode if in desktop mode
If $Desktop_Mode = 1 Then Goto Exit_Set_Emcon_Mode:
'Capture dyno mode
Let $Stored_Emcon_Mode_Fbk = Dyno_Mode_Feedback
'Set dyno mode label if in the appropriate dyno mode. If not, set dyno mode
Select_Case $Desired_Emcon_Mode
	Case = 0
		'Controlled Idle
		If $Stored_Emcon_Mode_Fbk = 0
			Goto Emcon_Mode_Set_Label:
		Else
			Goto Set_Emcon_Mode:
		End
	Case = 1
		'Speed/Throttle
		If $Stored_Emcon_Mode_Fbk = 1
			Goto Emcon_Mode_Set_Label:
		Else
			Goto Set_Emcon_Mode:
		End
	Case = 4
		'Speed/Man_Press
		If $Stored_Emcon_Mode_Fbk = 5
			Goto Emcon_Mode_Set_Label:
		Else
			Goto Set_Emcon_Mode:
		End		
	Case = 5
		'Speed/Torque
		If $Stored_Emcon_Mode_Fbk = 3
			Goto Emcon_Mode_Set_Label:
		Else
			Goto Set_Emcon_Mode:
		End		
	Case = 7
		'Speed/EEC
		If $Stored_Emcon_Mode_Fbk = 7
			Goto Emcon_Mode_Set_Label:
		Else
			Goto Set_Emcon_Mode:
		End		
	Case = 15
		'Torque/Throttle
		If $Stored_Emcon_Mode_Fbk = 2
			Goto Emcon_Mode_Set_Label:
		Else
			Goto Set_Emcon_Mode:
		End		
	Case = 17
		'Torque/Speed
		If $Stored_Emcon_Mode_Fbk = 4
			Goto Emcon_Mode_Set_Label:
		Else
			Goto Set_Emcon_Mode:
		End		
	Case = 19
		'Road_Grade/Throttle
		If $Stored_Emcon_Mode_Fbk = 9
			Goto Emcon_Mode_Set_Label:
		Else
			Goto Set_Emcon_Mode:
		End				
	Case = 21
		'Road_Grade/Vehicle_Speed
		If $Stored_Emcon_Mode_Fbk = 10
			Goto Emcon_Mode_Set_Label:
		Else
			Goto Set_Emcon_Mode:
		End		
	Case = 22
		'Road_Grade/Man_Press
		If $Stored_Emcon_Mode_Fbk = 8
			Goto Emcon_Mode_Set_Label:
		Else
			Goto Set_Emcon_Mode:
		End		
End_Select

Emcon_Mode_Set_Label:

'Set dyno mode label
Gosub Emcon_Mode_Label
Log_Message (EMCON Mode already set to %%!Emcon_Mode%%.)

Goto Emcon_Mode_Already_Set:

'Capture engine speed and start engine if not running
Let $TCRPM_NE_BAR = TCRPM_NE_BAR
If $TCRPM_NE_BAR < 100
	Log_Message (Engine_Speed not detected while setting EMCON mode.  TCRPM_NE_BAR = %%$TCRPM_NE_BAR,0D%% rpm.))
	Gosub Start_Engine
End

Set_Emcon_Mode:
'Capture PRNDL position
Let $THMI_ST_PRND_DES = THMI_ST_PRND_DES
'If PRNDL is not in Overdrive, shift to Overdrive
If $THMI_ST_PRND_DES ~= 4
	'For HIL dyno, set desired PRNDL position
	If $HIL_Flag = 1
		Let $Desired_PRNDL_Position = 3
	Else	
		Let $Desired_PRNDL_Position = 4
	End	
	'Set PRNDL position
	Gosub Set_PRNDL_Position
End
'Send dyno mode command
Gosub Send_Emcon_Mode_Command

'Initialize timer
Let $Elapsed_Check_Emcon_Mode_Status_Time = 0
Let $Start_Check_Emcon_Mode_Status_Time = Timer
Let $PC_Caltool_Command_Timeout = 15

'Start check dyno mode control loop
Do
	'Update check dyno mode timer
	Let $Elapsed_Check_Emcon_Mode_Status_Time = Timer - $Start_Check_Emcon_Mode_Status_Time
	'If timer exceeds time limit, exit loop
	If $Elapsed_Check_Emcon_Mode_Status_Time > $PC_Caltool_Command_Timeout
		Pause_Off
		Log_Message (******************************************************)
		Log_Message (Terminating test.)
		Log_Message (******************************************************)
		Log_Message (The Emcon Mode Could Not Be Set Before The Timeout Expired.)
		Log_Message (The Caltool Command Timeout = %%$PC_Caltool_Command_Timeout,0D%% seconds.)
		Log_Message (The Desired Emcon Mode = %%$Desired_Emcon_Mode,0D%%)
		Log_Message (The Current Emcon Mode = %%$Stored_Emcon_Mode_Fbk,0D%%)
		Log_Message (Note: The Current Value Does Not Have To Match Desired Value!!)
		Log_Message (Please Correct This Problem And Restart The Test.)
		'If terminate test flag has not been set, terminate test
		If $Terminate_Test_Flag = 0
			'Send text message
			Let !Text_Message = The Emcon Mode Could Not Be Set Before The Timeout Expired. The Desired Emcon Mode = %%$Desired_Emcon_Mode,0D%%. The Current Emcon Mode = %%$Stored_Emcon_Mode_Fbk,0D%%. Terminating Test.
			Gosub Send_Text_Message
			'Terminate test
			Gosub Terminate_Test
		Else
			'If test has already terminated, skip setting dyno mode
			Goto Exit_Set_Emcon_Mode:
		End
	End
	'Update last send dyno mode command timer
	Let $Elapsed_Last_Sent_Emcon_Mode_Command_Time = Timer - $Last_Sent_Emcon_Mode_Command_Time
	'Re-send dyno mode command if last sent command timer exceeds time limit
	If $Elapsed_Last_Sent_Emcon_Mode_Command_Time > $PC_Time_Between_Caltool_Commands Then Gosub Send_Emcon_Mode_Command
	Wait (0.05)
	'Capture dyno mode
	Let $Stored_Emcon_Mode_Fbk = Dyno_Mode_Feedback
	'Capture PRNDL position
	Let $THMI_ST_PRND_DES = THMI_ST_PRND_DES
	'Capture Ignition voltage
 	Let $IGNITION_VLT = IGNITION_VLT
	'If Ignition is not on, terminate test
 	If $IGNITION_VLT < 1
 	    Log_Message (Ignition to %%$IGNITION_VLT,1D%%V while setting Emcon Mode. TCRPM_NE_BAR is %%$TCRPM_NE_BAR,0D%%rpm. )
		Log_Message (******************************************************)
		Log_Message (Terminating test.)
		Log_Message (******************************************************)
		'Send text message
		Let !Text_Message = Ignition to %%$IGNITION_VLT,1D%% while setting Emcon Mode. Terminating test
		Gosub Send_Text_Message
		'Terminate test
 	    Gosub Terminate_Test
 	End
	'Check for proper dyno mode feedback
	Select_Case $Desired_Emcon_Mode
		Case = 0
			'Controlled Idle
			If $Stored_Emcon_Mode_Fbk = 0 Then Goto Exit_Set_Emcon_Mode:
			'If already in neutral, exit loop
			If $THMI_ST_PRND_DES = 3 Then Goto Exit_Set_Emcon_Mode:
		Case = 1
			'Speed/Throttle
			If $Stored_Emcon_Mode_Fbk = 1 Then Goto Exit_Set_Emcon_Mode:
		Case = 4
			'Speed/Man_Press
			If $Stored_Emcon_Mode_Fbk = 5 Then Goto Exit_Set_Emcon_Mode:
		Case = 5
			'Speed/Torque
			If $Stored_Emcon_Mode_Fbk = 3 Then Goto Exit_Set_Emcon_Mode:
		Case = 7
			'Speed/EEC
			If $Stored_Emcon_Mode_Fbk = 7 Then Goto Exit_Set_Emcon_Mode:
		Case = 15
			'Torque/Throttle
			If $Stored_Emcon_Mode_Fbk = 2 Then Goto Exit_Set_Emcon_Mode:
		Case = 17
			'Torque/Speed
			If $Stored_Emcon_Mode_Fbk = 4 Then Goto Exit_Set_Emcon_Mode:
		Case = 19
			'Road_Grade/Throttle
			If $Stored_Emcon_Mode_Fbk = 9 Then Goto Exit_Set_Emcon_Mode:
		Case = 21
			'Road_Grade/Vehicle_Speed
			If $Stored_Emcon_Mode_Fbk = 10 Then Goto Exit_Set_Emcon_Mode:
		Case = 22
			'Road_Grade/Man_Press
			If $Stored_Emcon_Mode_Fbk = 8 Then Goto Exit_Set_Emcon_Mode:
	End_Select
Loop
Exit_Set_Emcon_Mode:

'Set dyno mode label
Gosub Emcon_Mode_Label

Log_Message (EMCON set to %%!Emcon_Mode%%. Elapsed_Check_Emcon_Mode_Status_Time is %%$Elapsed_Check_Emcon_Mode_Status_Time,1D%% seconds.)

Emcon_Mode_Already_Set:
End_Sub
'*******************************************************
Sub Emcon_Mode_Label
'*******************************************************
Log_Message (Running Emcon_Mode_Label Subroutine)

'Set string for dyno mode
Select_Case $Stored_Emcon_Mode_Fbk
	Case = 0
		'Controlled Idle
		Let !Emcon_Mode = Controlled Idle
	Case = 1
		'Speed/Throttle
		Let !Emcon_Mode = Speed/Throttle
	Case = 2
		'Torque/Throttle
		Let !Emcon_Mode = Torque/Throttle
	Case = 3
		'Speed/Torque
		Let !Emcon_Mode = Speed/Torque	
	Case = 4
		'Torque/Speed
		Let !Emcon_Mode = Torque/Speed		
	Case = 5
		'Speed/Man_Press
		Let !Emcon_Mode = Speed/Man_Press
	Case = 7
		'Speed/EEC
		Let !Emcon_Mode = Speed/EEC
	Case = 8
		'Road_Grade/Man_Press
		Let !Emcon_Mode = Road_Grade/Man_Press	
	Case = 9
		'Road_Grade/Throttle
		Let !Emcon_Mode = Road_Grade/Throttle
	Case = 10
		'Road_Grade/Vehicle_Speed
		Let !Emcon_Mode = Road_Grade/Vehicle_Speed
End_Select

End_Sub
'*******************************************************
Sub Test_Completed
'*******************************************************
Log_Message (Running Test_Completed Subroutine)

'Put test into Safe Mode
Gosub Safe_Mode

Log_Message (Starting Test_Completed Sub Routine.)
Screen_Message (Yellow,This Automated Test Procedure Is Finished.%%New_Line%%%%New_Line%%Note: This Automated Test Has Stopped All Control Of The Engine And Test Room. )

'Turn off skip points
Skip_Point_Off
'Turn Calibrate Off
Calibrate_Off
'Save_Variables
Save_Variables
'End Test
End_Test

End_Sub
'*******************************************************
Sub Stop_Test
'*******************************************************
'Subroutine to reset parameters if test is stopped by the user.  Also puts the transmission in Neutral.
Log_Message (Running Stop_test subroutine)

Screen_Message (Yellow,%%New_Line%%Stopping Test)

'Reset Recheck_TFT_Flag
Let $Recheck_TFT_Flag = 0

'Set terminate test flag to skip some shutdown steps
Let $Terminate_Test_Flag = 1
Log_Message (Terminate_Test_Flag set.)

'Put test into Safe Mode
Gosub Safe_Mode
Log_Message (Test was stopped by user.)

'Send Text Message
Let !Text_Message = Test was stopped by user
Gosub Send_Text_Message

Screen_Message (Red,%%New_Line%%Test was stopped by user.)

'End Test
End_Test

End_Sub

'*******************************************************
Sub Safe_Mode
'*******************************************************
Log_Message (Running Safe_Mode subroutine)

Screen_Message (Red,%%New_Line%%%%New_Line%%Entering Safe Mode)

'Turn off any active PID controls
PIDs_Off

'End Vision recorder if in the middle of recording a data file
If $Sampling_Started = 1
	Gosub Record_End
End

'For desktop mode, skip PRNDL and environmental controls
If $Desktop_Mode = 1 Then Goto Desktop_End:	

'Stop Dyno Powertrain or skip engine speed check for vehicle
If $Vehicle_Flag ~= 1
	'Stop vehicle
	Gosub Slowdown
Else
	Goto Engine_Off:
End

'Reset Drive Route
If $HIL_Flag = 1
	Set DriveRoute_set (0,0)
	Log_Message (Safe_Mode Drive_Route set to 0.)
End

Screen_Message (Red,%%New_Line%%%%New_Line%%Entering Safe Mode)

'Capture engine speed
Let $TCRPM_NE_BAR = TCRPM_NE_BAR
Log_Message (Safe_Mode TCRPM_NE_BAR is %%$TCRPM_NE_BAR,0D%%rpm.)

'If engine is already off, skip setting soak air
If $TCRPM_NE_BAR < 100
	Goto Engine_Off:
End	

'Set screen message during safe mode
Screen_Message (Red,%%New_Line%%%%New_Line%%Entering Safe Mode)

'For HIL Dyno
If $HIL_Flag = 1
	'If test has terminated, set chamber temp above 0DegF
	If $Terminate_Test_Flag = 1
		'Establish soak temp
		Let $Desired_Soak_Temp = 10
		'Set chamber temp
		Gosub Set_HIL_Dyno_Soak_Air
	End	
Else
	'For standard dyno cells, if test has terminated, 
	If $Terminate_Test_Flag = 1
		'Set desired soak temp to room temperature
		Let $Desired_Soak_Temp = 70
		'Set soak-air
		Gosub Set_Soak_Air
	End
End

'Resume safe mode screen message
Screen_Message (Red,%%New_Line%%%%New_Line%%Entering Safe Mode)

'Capture PRNDL position
Let $Stored_PRNDL_Position_Fbk = PRNDL_Feedback

'If PRNDL is not in Neutral, shift PRNDL to Neutral
If $Stored_PRNDL_Position_Fbk ~= 0
	Let $Desired_PRNDL_Position = 2
	Gosub Set_PRNDL_Position
End

'Disable Rolling Engagements if enabled
Let $rolling_engagement_fbk = rolling_engagement_fbk
If $rolling_engagement_fbk = 1
	Gosub Disable_Rolling_Engagements
End

'Resume screen message
Screen_Message (Red,%%New_Line%%%%New_Line%%Entering Safe Mode)
Engine_Off:

'Capture Ignition Voltage
Let $IGNITION_VLT = IGNITION_VLT

'Reset PCM Parameters if Ignition is on
If $IGNITION_VLT > 0
	Select_Case $Trans_Select
		Case = 2
			'8F24
			Gosub TRAM_Reset_8F
		Case = 3
			'10R140
			Gosub TRAM_Reset_10R			
		Case = 4
			'8F57
			Gosub TRAM_Reset_8F		
		Case = 6
			'10R60/80
			Gosub TRAM_Reset_10R
		Case = 7
			'8F35
			Gosub TRAM_Reset_8F
		Case = 8
			'6R80
			Gosub TRAM_Reset_6R			
	End_Select
Else
	Log_Message (Safe_Mode TRAM reset cancelled. IGNITION_VLT is %%$IGNITION_VLT,0D%%V.)
End

'Skip environmental safe mode for in-vehicle
If $Vehicle_Flag = 1 Then Goto Desktop_End:

'Set HIL Dyno Chamber cold soak off
If $HIL_Flag = 1
	Let $Desired_Soak_Temp = 10
	Gosub Set_HIL_Dyno_Soak_Air
End

'For Standard dyno cell, turn off soak air
If $Standard_Cell = 1
	
	'Initialize counter
	Let $Soak_Off_Counter = 0

	Turn_Soak_Air_Off:

	'Capture soak-air on feedback
	Let $plc_soakair_on_fbk = plc_soakair_on_fbk
	
	'If soak-air is off, skip turning it off
	If $plc_soakair_on_fbk = 0 Then Goto plc_soakair_off_Done:

	'Set soak-air off
	Set plc_soakair_on (0,0)
	
	'Initialize timer
	Let $Elapsed_plc_soakair_off_Time = 0
	Let $plc_soakair_on_Start_Time = Timer
	Let $plc_soakair_off_time_limit = 30
	
	'Start soak-air off control loop
	Do
		'Update timer
		Let $Elapsed_plc_soakair_off_Time = Timer - $plc_soakair_on_Start_Time
		'Capture soak-air on feedback
		Let $plc_soakair_on_fbk = plc_soakair_on_fbk
		'If soak-air is off, exit loop
		If $plc_soakair_on_fbk = 0
			Log_Message (Soak Air off. Soak_Off_Counter is %%$Soak_Off_Counter%%. Elapsed_plc_soakair_off_Time is %%$Elapsed_plc_soakair_off_Time,1D%% seconds.)
			Goto plc_soakair_off_Done:
		End	
		'If timer exceeds time limit, increment counter and skip turning soak-air off 
		If $Elapsed_plc_soakair_off_Time > $plc_soakair_off_time_limit
			'Increment counter
			Let $Soak_Off_Counter = $Soak_Off_Counter + 1
			'Log message and skip setting soak-air off
			If $Soak_Off_Counter > 2
				Log_Message (Unable to turn off Soak Air. plc_soakair_on_fbk is %%$plc_soakair_on_fbk,0D%%.)
				'Exit loop
				Goto plc_soakair_off_Done:
			Else
				'Re-attempt turning soak-air off
				Goto Turn_Soak_Air_Off:
			End
		End
		Wait (1)
	Loop
End

'Turn skip points off
Skip_Point_Off
'Turn calibrate off
Calibrate_Off

Desktop_End:
plc_soakair_off_Done:

'Save Variables
Save_Variables

'Reset error flags
Let $Warmup_Flag = 0
Let $Warmed_Up_Flag = 0
Let $Warmup_Failed_Flag = 0
Let $Cooldown_Flag = 0
Let $Cooldown_Fail_Flag = 0
Let $Stop_And_Soak_Flag = 0
Let $Soak_Air_Off_Flag = 0
Let $PCM_Sync_Failed_Flag = 0
Let $ECM_Sync_Failed_Flag = 0
Let $Terminate_Test_Flag = 0

'Shut all active monitors off
Monitors_Off
Log_Message (Ending All monitors)
Screen_Message (Red,%%New_Line%%%%New_Line%%Entering Safe Mode)

'Turn off PLC, disable alarms and heartbeat
If $Vehicle_Flag ~= 1
	Gosub Disable_Autoshutdown
End

'Reset HIL Dyno run request
If $HIL_Flag = 1
	Set ATcmd.runreq (0,0)
End

End_Sub

'*******************************************************
Sub Terminate_Test
'*******************************************************
Log_Message (Running Terminate_Test subroutine)

'Disable alarms and heartbeat
If $Vehicle_Flag = 1
	Goto Done_Shutdown:
Else
	Gosub Disable_Autoshutdown
End

'For Adacs alarms, skip safe mode
If $Stored_Caltool_Priority ~= 3 Then Goto Immediate_Test_End:

'Save Debug Files
Save_Debug_Files
Log_Message (Debug File Saved)

'If no ignition during PCM/ECM synchronization, skip safe mode
If $Ignition_Fail_Flag = 1 
	'Reset flag
	Let $Ignition_Fail_Flag = 0
	Goto Immediate_Test_End:
End
'If PCM/ECM does not synchronize, skip safe mode
If $PCM_Sync_Failed_Flag = 1
	Let $PCM_Sync_Failed_Flag = 0
	Goto Immediate_Test_End:
End

'Set Terminate_Test_Flag
Let $Terminate_Test_Flag = 1
Log_Message (Terminate_Test_Flag set.)

'Reset Point-Running flag
Let $Current_Point_Running = 0

'Put test in safe mode
Gosub Safe_Mode

'Set screen message during test termination
Screen_Message (Red,The AutoTEST was stopped due to a fault condition. Check the log file for this test for information about the shut down. )

'Turn off PCM_Sync monitor
Monitor_Off PCM_Sync
Log_Message (Stopping PCM_Sync monitor. Terminate_Test.)

'Reset Terminate_Test_Flag once test has completed safe mode
Let $Terminate_Test_Flag = 0

'Disable alarms and heartbeat
' If $Vehicle_Flag = 1
	' Goto Done_Shutdown:
' Else
	' Gosub Disable_Autoshutdown
' End

Immediate_Test_End:

'Initialize Shutdown Screen timer
Let $Elapsed_Shutdown_Time = 0
Let $Shutdown_Start_Time = Timer
Let $Shutdown_Screen_Time_Limit = 1800

'Start Shutdown Screen control loop
Do
	'Update timer
	Let $Elapsed_Shutdown_Time = Timer - $Shutdown_Start_Time
	'Calculate remaining time
	Let $Shutdown_Time_Remaining = $Shutdown_Screen_Time_Limit - $Elapsed_Shutdown_Time
	'If timer exceeds time limit, set shutdown trigger
	If $Elapsed_Shutdown_Time > $Shutdown_Screen_Time_Limit
		Log_Message (No response from user. Shutting down test cell.)
		Set Testcell_Shutdown_Trig (1,0)
		Goto Done_Shutdown:
	End
	'Message Box
	Message_Box (Message_Time = 5, Title = TEST CELL SHUTDOWN... , Entry_Field = 0 , Message = %%New_Line%%Test Cell will shut down in %%$Shutdown_Time_Remaining,0D%% seconds.%%New_Line%%%%New_Line%%Press YES to keep Test Cell active.)
	Wait (0.1)
	'Manage user interaction
	Let $Operator_Response = Response
	If $Operator_Response = 1
		Log_Message (Test cell kept active by user.)
		'Skip test cell shutdown
		Set Testcell_Shutdown_Trig (0,0)
		Goto Done_Shutdown:
	End
Loop

Done_Shutdown:
Screen_Message (Red,%%New_Line%%Test was Terminated.)
'End Test
End_Test

End_Sub

'********************************************************************************************
Sub Start_Engine
'********************************************************************************************
Log_Message (Running Start_Engine subroutine)

'Shut off engine speed monitor
Monitor_Off Engine_Running
Log_Message (Stopping Engine_Running monitor. Start_Engine.)

'If test has terminated, skip engine start
If $Terminate_Test_Flag = 1
	Log_Message (Test is terminated. Engine will not be restarted.)
	Goto Engine_Started_Sub_End:
End	

'Skip engine start for desktop mode
If $Desktop_Mode = 1
	Log_Message (Desktop_Mode. Skipping Engine Start.)
	Goto Engine_Started_Sub_End:
End	

'Initialize engine start attempt counter
Let $Engine_Start_Attempts = 0

'Capture ignition voltage
Let $IGNITION_VLT = IGNITION_VLT
'Capture engine speed
Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2

'If engine is running, skip engine-crank
If $TCRPM_NE_BAR_AVE2 > 500 Then Goto Engine_Started:

Log_Message (Starting Engine. IGNITION_VLT is %%$IGNITION_VLT,1D%%V.)	

'If PCM is already synchronized, skip turning on PLC and PCM/ECM synchronization
If $TCRPM_NE_BAR_AVE2 > -10000 Then Goto Crank_Starter:

Attempt_Start:

'Set emcon mode to Auto
If $Standard_Cell = 1
	Let $EMCON_SYSSTATE = EMCON_SYSSTATE
	If $EMCON_SYSSTATE ~= 7
		'Start PLC for standard cell
		Gosub Activate_PLC
	End
End

'Turn on ignition
Screen_Message (Green, Turning on ignition and injectors...)
If $IGNITION_VLT < 1
	Set IGNITION_CMD (1,0)
	Log_Message (Ignition On. StartEngine)
End	
Log_Message (Ignition On. StartEngine)
'Turn on injectors
If $HIL_Flag ~= 1
	Set EMCON_INJECTOR_CMD (1,0)
	Log_Message (Injectors On. StartEngine)
End
Wait (3)

'Shift PRNDL to Park in HIL Dyno
If $HIL_Flag = 1
	'Set HIL dyno to Park to start engine
	Let $Desired_PRNDL_Position = 0
	Gosub Set_PRNDL_Position
End

'Synchronize ECM and PCM
Gosub PCM_Synchronize
Gosub ECM_Synchronize
	
Crank_Starter:

'Capture ignition voltage
Let $IGNITION_VLT = IGNITION_VLT

'If ignition is not on, turn on ignition
If $IGNITION_VLT < 1
	Set IGNITION_CMD (1,0)
	Log_Message (Ignition On. StartEngine)
	'Turn on injectors
	If $HIL_Flag ~= 1
		Set EMCON_INJECTOR_CMD (1,0)
		Log_Message (Injectors On. StartEngine)
		Wait (5)
	End
End	

'Wait longer before starting for additional crank attempts
If $Engine_Start_Attempts <= 1
	Wait (2)
Else
	Wait (20)
End

'Start Engine
Set ENG_START_STOP_CMD (1,0)
Wait (2)

'Increment start attempt counter
Let $Engine_Start_Attempts = $Engine_Start_Attempts + 1

'Initialize timer
Let $Engine_Start_Time = Timer
Let $Elapsed_Engine_Start_Time = 0

'Initialize manual start timer
Let $Manual_Start_Time = 0
Let $Elapsed_Manual_Start_Time = 0
Let $Start_Engine_Time_Limit = 15
Let $Manual_Engine_Start_Time_Limit = 120

'Start Engine Start control loop
Do
	'Update timer
	Let $Elapsed_Engine_Start_Time = Timer - $Engine_Start_Time
	'Capture Ignition Voltage
	Let $IGNITION_VLT = IGNITION_VLT
	'Capture engine speed
	Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2
	'If engine is running, exit loop
	If $TCRPM_NE_BAR_AVE2 > 500
		Log_Message (Engine Started. TCRPM_NE_BAR_AVE2 is %%$TCRPM_NE_BAR_AVE2,0D%%. Engine_Start_Attempts is %%$Engine_Start_Attempts%%. Elapsed_Engine_Start_Time is %%$Elapsed_Engine_Start_Time,1D%% seconds.)
		Goto Engine_Started:
	End		
	'After 5 attempts, start manual start timer
	If $Engine_Start_Attempts > 5
		'Start timer
		Let $Manual_Start_Time = Timer
		
		'Start manual start control loop
		Do
			'Update timer
			Let $Elapsed_Manual_Start_Time = Timer - $Manual_Start_Time
			'Calculate time remaining
			Let $Manual_Start_Time_Remaining = $Manual_Engine_Start_Time_Limit - $Elapsed_Manual_Start_Time
			'If engine doesn't start, terminate test
			If $Elapsed_Manual_Start_Time > $Manual_Engine_Start_Time_Limit Then Goto Engine_Not_Starting:
			'Message Box
			Message_Box (Message_Time = 5, Title = Manually attempt to start engine., Entry_Field = 0 , Message = %%New_Line%%Test will terminate in %%$Manual_Start_Time_Remaining,0D%% seconds.%%New_Line%%%%New_Line%%Press YES when started.)
			Wait (0.1)
			'User interaction
			Let $Operator_Response = Response
			'If user checks box, exit loop
			If $Operator_Response = 1
				Log_Message (Engine manually started.)
				Goto Check_Manual_Start_Speed:
			End
		Loop
		Check_Manual_Start_Speed:
		'Capture engine speed
		Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2
		'If engine is started, exit loop, if not, terminate test
		If $TCRPM_NE_BAR_AVE2 > 500
			Goto Engine_Started:
		Else	
			Goto Engine_Not_Starting:
		End	
	End
	'If timer exceeds time limit, shut off ignition and re-attempt start
	If $Elapsed_Engine_Start_Time > $Start_Engine_Time_Limit
		'Turn off engine start switch
		Set ENG_START_STOP_CMD (0,0)
		'Turn off ignition
		Set IGNITION_CMD (0,0)
		Log_Message (Ignition Off. StartEngine)
		'Turn off injectors
		If $HIL_Flag ~= 1
			Set EMCON_INJECTOR_CMD (0,0)
		End
		Log_Message (Engine start timed out after 15 seconds. Turning Igntion Off. Turning Injectors Off. Engine start attempt %%$Engine_Start_Attempts%%.. StartEngine)
		Wait (10)
		'Re-attempt start
		Goto Attempt_Start:
	End
Loop
Engine_Not_Starting:

'Turn off engine start switch
Set ENG_START_STOP_CMD (0,0)

'Capture PLC switch feedbacks
Let $plc_fuel_on_fbk = plc_fuel_on_fbk
Let $plc_exhaust_fan_on_fbk = plc_exhaust_fan_on_fbk
Log_Message (Unable to start engine in five attempts.  TCRPM_NE_BAR is %%$TCRPM_NE_BAR%%. Plc_fuel_on_fbk is %%$plc_fuel_on_fbk,0D%%.)
Log_Message (******************************************************)
Log_Message (Terminating test.)
Log_Message (******************************************************)
'Send text message
Let !Text_Message = Unable to start engine in five attempts.  TCRPM_NE_BAR is %%$TCRPM_NE_BAR%%. Plc_fuel_on_fbk is %%$plc_fuel_on_fbk,0D%%. plc_exhaust_fan_on_fbk is %%$plc_exhaust_fan_on_fbk,0D%%.Terminating Test.
Gosub Send_Text_Message
'Terminate test
Gosub Terminate_Test

Engine_Started:
Log_Message (Engine Started. TCRPM_NE_BAR_AVE2 is %%$TCRPM_NE_BAR_AVE2,0D%%)

'Re-initialize EOT Boil Monitor
Gosub Initialize_EOT_Boil_Monitor

'Start Engine Oil Temperature Monitor
Monitor_On EOT_Boil_Time
Log_Message (Starting EOT_Boil_Time monitor. Start_Engine.)

'Reset test switches
Set TVPSC_D_OVRD_TCC_S (0,0)
Set TVPSC_P_CMD_TST_TCC_S (0,0)
Set TVPSC_B_TST_ENBL_S (0,0)
Set RMSC_D_GR_TYP_SW_S ($RMSC_D_GR_TYP_SW_S_Base,0)

'Capture trans temperature
Let $TCTFT_TFT = TCTFT_TFT
'Apply longer wait time if cold
If $TCTFT_TFT < -15
	Wait (30)
Else
	Wait (10)
End

'Capture engine speed
Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2
'If engine is not running, re-attempt start
If $TCRPM_NE_BAR_AVE2 < 500
	Log_Message (Re-attempting start. TCRPM_NE_BAR_AVE2 is %%$TCRPM_NE_BAR_AVE2%%)
	Goto Attempt_Start:
End

Engine_Started_Sub_End:
End_Sub

'********************************************************************************************
Sub PCM_Synchronize
'********************************************************************************************
Log_Message (Running PCM_Synchronize Subroutine)
'Confirm Ignition is on and PCM is synchronized

'Capture ignition voltage and engine speed
Let $IGNITION_VLT = IGNITION_VLT
Let $TCRPM_NE_BAR = TCRPM_NE_BAR

'If engine speed is not -999999999, the PCM is synchronized
If $TCRPM_NE_BAR > -10000
	'Set skip flag
	Let $Skip_PCM_Sync_Flag = 1
	Goto End_PCM_Sync:
End	

'If synchronization fails, skip synchronization
If $PCM_Sync_Failed_Flag = 1
	Goto End_PCM_Sync:
End

'Set Screen Message in-vehicle
If $Vehicle_Flag = 1
	Screen_Message (Yellow,PCM is not synchronized. Check Settings and verify that engine is running.)
	Pause
	Goto Synchronize_PCM:
End

'Initialize ignition fail flag
Let $Ignition_Fail_Flag = 0

'Initialize ignition attempt counter
Let $Ignition_On_Attempts = 0

Rekey_Ignition:

'Initialize timer
Let $Ignition_Start_Time = Timer
Let $Elapsed_Ignition_Time = 0
Let $Ignition_Time_Limit = 5

'Start Ignition control loop
Do
	'Update timer
	Let $Elapsed_Ignition_Time = Timer - $Ignition_Start_Time
	'Capture ignition voltage
	Let $IGNITION_VLT = IGNITION_VLT
	Screen_Message (Green, Checking for ignition voltage, attempt number %%$Ignition_On_Attempts%%...)
	'If ignition is on, exit loop
	If $IGNITION_VLT > 1 Then Goto Synchronize_PCM:
	'If timer exceeds limit, increment counter and terminate test
	If $Elapsed_Ignition_Time > $Ignition_Time_Limit
		'Increment counter
		Let $Ignition_On_Attempts = $Ignition_On_Attempts + 1
		'Set fail flag after 3 attempts
		If $Ignition_On_Attempts > 3
			'Set flag
			Let $Ignition_Fail_Flag = 1
			'Exit loop
			Goto End_PCM_Sync:
		Else
			'Turn ignition on
			Set IGNITION_CMD (1,0)
			'Re-attempt ignition
			Goto Rekey_Ignition:
		End
	End
	Wait (1)
Loop
Synchronize_PCM:

'Initialize timer
Let $PCM_Sync_Start_Time = Timer
Let $Elapsed_PCM_Sync_Time = 0
Let $PCM_Sync_Time_Limit = 45

Screen_Message (Green, Checking for TCRPM_NE_BAR for PCM synchronization, up to 45 seconds...)

'Start PCM Sync control loop
Do
	'Update timer
	Let $Elapsed_PCM_Sync_Time = Timer - $PCM_Sync_Start_Time
	'If timer exceeds limit, set fail flag
	If $Elapsed_PCM_Sync_Time > $PCM_Sync_Time_Limit
		Let $PCM_Sync_Failed_Flag = 1
		Goto End_PCM_Sync:
	End	
	'Capture engine speed
	Let $TCRPM_NE_BAR = TCRPM_NE_BAR
	'If engine speed is not -999999999999, exit loop
	If $TCRPM_NE_BAR > -10000
		Log_Message (PCM Synchronized. Elapsed_PCM_Sync_Time is %%$Elapsed_PCM_Sync_Time,1D%% seconds.)
		'Reset flag
		Let $PCM_Sync_Failed_Flag = 0
		'Exit loop
		Goto End_PCM_Sync:
	End	

	Wait (1)
Loop

End_PCM_Sync:

'Reset skip sync flag
If $Skip_PCM_Sync_Flag = 1
	Let $Skip_PCM_Sync_Flag = 0
	Log_Message (PCM Synchronization skipped. IGNITION_VLT is %%$IGNITION_VLT,1D%%V.)
End	

'If ignition fails, terminate test
If $Ignition_Fail_Flag = 1
	Log_Message (Ignition not responding during PCM_Synchronization.)
	Log_Message (******************************************************)
	Log_Message (Terminating test.)
	Log_Message (******************************************************)
	'Send text message
	Let !Text_Message = Ignition not responding during PCM_Synchronization. Terminating Test.
	Gosub Send_Text_Message
	'Terminate test
	Gosub Terminate_Test
End

'If sync fails, terminate test
If $PCM_Sync_Failed_Flag = 1	
	Log_Message (PCM will not synchronize.)
	Log_Message (******************************************************)
	Log_Message (Terminating test.)
	Log_Message (******************************************************)
	Screen_Message (Red, PCM did not synchronize, make sure the PCM is checked on the ATI Device Manager page.)
	Wait (3)
	'Send text message
	Let !Text_Message = PCM will not synchronize. Terminating Test.
	Gosub Send_Text_Message
	'Terminate test
	Gosub Terminate_Test
End	

End_Sub

'********************************************************************************************
Sub ECM_Synchronize
'********************************************************************************************
Log_Message (Running ECM_Synchronize Subroutine)
'Confirm Ignition is on and ECM is synchronized

'Capture ECM engine speed
Let $NEBART = NEBART

'If engine speed is not -9999999999 skip synchronization
If $NEBART > -10000
	'Set flag
	Let $Skip_ECM_Sync_Flag = 1
	'Skip synchronization
	Goto End_ECM_Sync:
End	

'Set Screen Message in-vehicle
If $Vehicle_Flag = 1
	Screen_Message (Yellow,ECM is not synchronized. Check Settings and verify that engine is running.)
	Pause
	Goto Synchronize_ECM:
End

'If fail flag is set, skip synchronization
If $ECM_Sync_Failed_Flag = 1 Then Goto End_ECM_Sync:

'Initialize ignition and sync attempt counters
Let $ECM_Ignition_On_Attempts = 0
Let $ECM_Sync_Attempts = 0

ECM_Rekey_Ignition:

'Initialize timer
Let $ECM_Ignition_Start_Time = Timer
Let $ECM_Elapsed_Ignition_Time = 0
Let $ECM_Ignition_Time_Limit = 45

'Start ECM ignition control loop
Do
	'Update timer
	Let $ECM_Elapsed_Ignition_Time = Timer - $ECM_Ignition_Start_Time
	'If timer exceeds time limit, increment counter and terminate test
	If $ECM_Elapsed_Ignition_Time > $ECM_Ignition_Time_Limit
		'Increment counter
		Let $ECM_Ignition_On_Attempts = $ECM_Ignition_On_Attempts + 1
		'Set flag and terminate test after 3 attempts
		If $ECM_Ignition_On_Attempts > 3
			'Set fail flag
			Let $Ignition_Fail_Flag = 1
			'Exit loop
			Goto End_ECM_Sync:
		Else
			'Turn on ignition
			Set IGNITION_CMD (1,0)
			Log_Message (Ignition On. ECM_Synchronize)
			Wait (5)
			'Re-attempt synchronization
			Goto ECM_Rekey_Ignition:
		End	
	End	
	'Capture ignition voltage
	Let $IGNITION_VLT = IGNITION_VLT
	Screen_Message (Green, Checking ignition voltage and TCRPM_NE_BAR to verify ECM synchronization, up to 90 seconds...)
	'If ignition is on, exit loop
	If $IGNITION_VLT > 1 Then Goto Synchronize_ECM:

Loop
Synchronize_ECM:

'Initialize timer
Let $Elapsed_ECM_Sync_Time = 0
Let $ECM_Sync_Start_Time = Timer
Let $ECM_Sync_Time_Limit = 90

'Start ECM sync control loop
Do
	'Update timer
	Let $Elapsed_ECM_Sync_Time = Timer - $ECM_Sync_Start_Time
	'If timer exceeds limit, increment counter and terminate test after 2 attempts
	If $Elapsed_ECM_Sync_Time > $ECM_Sync_Time_Limit
		Let $ECM_Sync_Attempts = $ECM_Sync_Attempts + 1
		If $ECM_Sync_Attempts > 2
			Let $ECM_Sync_Failed_Flag = 1
			Goto End_ECM_Sync:
		Else
			Set IGNITION_CMD (1,0)
			Log_Message (Ignition On. ECM_Synchronize)
			Wait (5)
			Goto ECM_Rekey_Ignition:
		End
	End	
	'Capture engine speed and ignition voltage
	Let $NEBART = NEBART
	Let $IGNITION_VLT = IGNITION_VLT
	'If ECM engine speed is not -99999999999, reset flag and exit loop
	If $NEBART > -10000 
		Log_Message (ECM Synchronized. IGNITION_VLT is %%$IGNITION_VLT,2D%%V. Elapsed_ECM_Sync_Time is %%$Elapsed_ECM_Sync_Time,1D%% seconds.)
		'Reset fail flag
		Let $ECM_Sync_Failed_Flag = 0
		Wait (1)
		Goto ECM_Synchronized:
	End

	Wait (1)
Loop

ECM_Synchronized:

'Capture ignition voltage
Let $IGNITION_VLT = IGNITION_VLT
Log_Message (ECM synchronized. IGNITION_VLT is %%$IGNITION_VLT%%.)
End_ECM_Sync:

'Terminate test if ignition does not turn on 
If $Ignition_Fail_Flag = 1
	'Reset fail flag
	Let $Ignition_Fail_Flag = 0
	'Save Flight Recorder
	Save_Flight_Recorder
	Log_Message (Ignition not responding. Terminating Test.)
	Log_Message (******************************************************)
	Log_Message (Terminating test.)
	Log_Message (******************************************************)
	'Send text message
	Let !Text_Message = Ignition not responding. Terminating test
	Gosub Send_Text_Message
	'Terminate test
	Gosub Terminate_Test
End

'Terminate test if ECM synchronization fails
If $ECM_Sync_Failed_Flag = 1
	'Save Flight Recorder
	Save_Flight_Recorder
	Log_Message (ECM will not synchronize.)
	Log_Message (******************************************************)
	Log_Message (Terminating test.)
	Log_Message (******************************************************)
	Screen_Message (Red, ECM did not synchronize, make sure the ECM is checked on the ATI Device Manager page. Terminating Test.)
	'Send text message
	Let !Text_Message = ECM will not synchronize. Terminating Test.
	Gosub Send_Text_Message
	'Terminate test
	Gosub Terminate_Test
End			

'If ECM sync is skipped, reset flag
If $Skip_ECM_Sync_Flag = 1
	Let $Skip_ECM_Sync_Flag = 0
	Log_Message (ECM Synchronization skipped. IGNITION_VLT is %%$IGNITION_VLT,2D%%V.)
End

End_Sub

'*******************************************************
Sub Apply_Dither_Settings
'*******************************************************
Log_Message (Running Apply_Dither_Settings Subroutine)

'Set Dither Amplitude and Frequency tables for Dither testing
If $DitherType = 2
    Select_Case $CurrentRunElement
		Case = 1
			'Line Pressure
			Set_Function_Table TVPSC_IA_DTHR_LNP_A_M = $CurrentRunDitA
			Set_Function_Table TVPSC_FQ_DTHR_LNP_A_M = $CurrentRunDitF
		Case = 2
			'Clutch A
			Set_Function_Table TVPSC_IA_DTHR_CLC_01_A_M = $CurrentRunDitA
			Set_Function_Table TVPSC_FQ_DTHR_CLC_01_A_M = $CurrentRunDitF
		Case = 3
			'Clutch B
			Set_Function_Table TVPSC_IA_DTHR_CLC_02_A_M = $CurrentRunDitA
			Set_Function_Table TVPSC_FQ_DTHR_CLC_02_A_M = $CurrentRunDitF
		Case = 4
			'Clutch C
			Set_Function_Table TVPSC_IA_DTHR_CLC_03_A_M = $CurrentRunDitA
			Set_Function_Table TVPSC_FQ_DTHR_CLC_03_A_M = $CurrentRunDitF
		Case = 5
			'Clutch D
			Select_Case $Trans_Select 
				Case = 2
					'8F24	
					Set_Function_Table TVPSC_IA_DTHR_CLC_04_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_04_M = $CurrentRunDitF			
				Case = 3
					'10R140
					Set_Function_Table TVPSC_IA_DTHR_CLC_04_LO_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_04_LO_A_M = $CurrentRunDitF
					Set_Function_Table TVPSC_IA_DTHR_CLC_04_HI_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_04_HI_A_M = $CurrentRunDitF			
				Case = 4
					'8F57	
					Set_Function_Table TVPSC_IA_DTHR_CLC_04_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_04_M = $CurrentRunDitF		
				Case = 6
					'10R60/80
					Set_Function_Table TVPSC_IA_DTHR_CLC_04_LO_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_04_LO_A_M = $CurrentRunDitF
					Set_Function_Table TVPSC_IA_DTHR_CLC_04_HI_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_04_HI_A_M = $CurrentRunDitF
				Case = 7
					'8F35
					Set_Function_Table TVPSC_IA_DTHR_CLC_04_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_04_M = $CurrentRunDitF
				Case = 8
					'6R80
					Set_Function_Table TVPSC_IA_DTHR_CLC_04_LO_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_04_LO_A_M = $CurrentRunDitF
					Set_Function_Table TVPSC_IA_DTHR_CLC_04_HI_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_04_HI_A_M = $CurrentRunDitF	
					End_Select
		Case = 6
			'Clutch E
			Select_Case $Trans_Select 
				Case = 2
					'8F24
					Set_Function_Table TVPSC_IA_DTHR_CLC_05_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_05_A_M = $CurrentRunDitF
				Case = 3
					'10R140
					Set_Function_Table TVPSC_IA_DTHR_CLC_05_LO_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_05_LO_A_M = $CurrentRunDitF
					Set_Function_Table TVPSC_IA_DTHR_CLC_05_HI_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_05_HI_A_M = $CurrentRunDitF
				Case = 4
					'8F57
					Set_Function_Table TVPSC_IA_DTHR_CLC_05_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_05_A_M = $CurrentRunDitF
				Case = 6
				'10R60/80
					Set_Function_Table TVPSC_IA_DTHR_CLC_05_LO_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_05_LO_A_M = $CurrentRunDitF
					Set_Function_Table TVPSC_IA_DTHR_CLC_05_HI_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_05_HI_A_M = $CurrentRunDitF
				Case = 7
					'8F35
					Set_Function_Table TVPSC_IA_DTHR_CLC_05_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_05_A_M = $CurrentRunDitF
				Case = 8
					'6R80
					Set_Function_Table TVPSC_IA_DTHR_CLC_05_LO_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_05_LO_A_M = $CurrentRunDitF
					Set_Function_Table TVPSC_IA_DTHR_CLC_05_HI_A_M = $CurrentRunDitA
					Set_Function_Table TVPSC_FQ_DTHR_CLC_05_HI_A_M = $CurrentRunDitF
			End_Select
		Case = 7
			'Clutch F
			Set_Function_Table TVPSC_IA_DTHR_CLC_06_A_M = $CurrentRunDitA
			Set_Function_Table TVPSC_FQ_DTHR_CLC_06_A_M = $CurrentRunDitF
		Case = 8
			'TCC
			Set_Function_Table TVPSC_IA_DTHR_TCC_A_M = $CurrentRunDitA
			Set_Function_Table TVPSC_FQ_DTHR_TCC_A_M = $CurrentRunDitF
			' Set TVPSC_MUL_TCC_GAIN_S (1.132,0)
			' Set TVPSC_P_TCC_OFS_S (-280,0)
	End_Select
	Set_Activate
End

End_Sub

'*******************************************************
Sub Save_Engine_And_Pedal_Values
'*******************************************************
Log_Message (Saving Engine_Pedal_Values)

'Save base values for engine speed test switches and clips

Select_Case $Engine_Strategy 
	Case = 1
		'New Gas
		Let $DSDN_NE_TST_Base = Calibration_Values DSDN_NE_TST
		Let $DSDN_SW_TST_Base = Calibration_Values DSDN_SW_TST
		Let $FNDSDN_NE_MAX_DRV_Base = Calibration_Values FNDSDN_NE_MAX_DRV	
		Let $SPKSAF_SA_ADD_S_Base = Calibration_Values SPKSAF_SA_ADD_S
		Let $ETC_TA_MULT_Base = Calibration_Values ETC_TA_MULT
		Let $ETC_TA_ADDER_Base = Calibration_Values ETC_TA_ADDER
	Case = 2
		'Old Gas
		Let $APP_THETA_ADD_Base = Calibration_Values APP_THETA_ADD
		Let $APP_THETA_MUL_Base = Calibration_Values APP_THETA_MUL
		Let $DSDRPM_TST_RPM_Base = Calibration_Values DSDRPM_TST_RPM
		Let $DSDRPM_SW_TST_Base = Calibration_Values DSDRPM_SW_TST
		Let $SPK_MUL_Base = Calibration_Values SPK_MUL
	Case = 3
		'Diesel
		Let $HLSDem_nSetPLoGear_MAP_Base = Calibration_Values HLSDem_nSetPLoGear_MAP
		Let $HLSDem_nSetPLoGearClnt_MAP_Base = Calibration_Values HLSDem_nSetPLoGearClnt_MAP
		Let $HLSDem_nSetPLoDia_C_Base = Calibration_Values HLSDem_nSetPLoDia_C
		' Let $APP_rLinAPPLeft_CUR_Base = Calibration_Values APP_rLinAPPLeft_CUR
		' Let $APP_rLinAPPRht_CUR_Base = Calibration_Values APP_rLinAPPRht_CUR
End_Select

End_Sub

'*******************************************************
Sub Save_6R_TRAM_Values
'*******************************************************
Screen_Message (Green,%%New_Line%%%%New_Line%%Saving TRAM Calibration Values)
Log_Message (Saving 6R Base Calibration Values)

'TRAM Solenoid Override Modes
Let $TVPSC_D_OVRD_CLC_01_S_Base = 0
Let $TVPSC_D_OVRD_CLC_02_S_Base = 0
Let $TVPSC_D_OVRD_CLC_03_S_Base = 0
Let $TVPSC_D_OVRD_CLC_04_S_Base = 0
Let $TVPSC_D_OVRD_CLC_05_S_Base = 0
Let $TVPSC_D_OVRD_CLC_06_S_Base = 0
Let $TVPSC_D_OVRD_LNP_S_Base = 0
Let $TVPSC_D_OVRD_TCC_S_Base = 0

'OBDII Disable 
Let $OBDII_TST_SW_Base = Calibration_Values OBDII_TST_SW

'TRAM Manual Gear override
Let $RMSC_D_GR_TYP_SW_S_Base = Calibration_Values RMSC_D_GR_TYP_SW_S
Let $RMSC_GR_TYP_CMD_S_Base = Calibration_Values RMSC_GR_TYP_CMD_S

'TRAM Solenoid Time Normalizer
Let $TVPSC_TM_TST_CLC_01_N_Base = Calibration_Values TVPSC_TM_TST_CLC_01_N
Let $TVPSC_TM_TST_CLC_02_N_Base = Calibration_Values TVPSC_TM_TST_CLC_02_N
Let $TVPSC_TM_TST_CLC_03_N_Base = Calibration_Values TVPSC_TM_TST_CLC_03_N
Let $TVPSC_TM_TST_CLC_04_N_Base = Calibration_Values TVPSC_TM_TST_CLC_04_N
Let $TVPSC_TM_TST_CLC_05_N_Base = Calibration_Values TVPSC_TM_TST_CLC_05_N
Let $TVPSC_TM_TST_CLC_06_N_Base = Calibration_Values TVPSC_TM_TST_CLC_06_N
Let $TVPSC_TM_TST_LNP_N_Base = Calibration_Values TVPSC_TM_TST_LNP_N
Let $TVPSC_TM_TST_TCC_N_Base = Calibration_Values TVPSC_TM_TST_TCC_N

'TRAM Current command
Let $TVPSC_IA_CMD_TST_CLC_01_S_Base = Calibration_Values TVPSC_IA_CMD_TST_CLC_01_S
Let $TVPSC_IA_CMD_TST_CLC_02_S_Base = Calibration_Values TVPSC_IA_CMD_TST_CLC_02_S
Let $TVPSC_IA_CMD_TST_CLC_03_S_Base = Calibration_Values TVPSC_IA_CMD_TST_CLC_03_S
Let $TVPSC_IA_CMD_TST_CLC_04_S_Base = Calibration_Values TVPSC_IA_CMD_TST_CLC_04_S
Let $TVPSC_IA_CMD_TST_CLC_05_S_Base = Calibration_Values TVPSC_IA_CMD_TST_CLC_05_S
Let $TVPSC_IA_CMD_TST_CLC_06_S_Base = Calibration_Values TVPSC_IA_CMD_TST_CLC_06_S
Let $TVPSC_IA_CMD_TST_LNP_S_Base = Calibration_Values TVPSC_IA_CMD_TST_LNP_S
Let $TVPSC_IA_CMD_TST_TCC_S_Base = Calibration_Values TVPSC_IA_CMD_TST_TCC_S

'TRAM Current Profile
Let $TVPSC_IA_TST_CLC_01_T_Base = Calibration_Values TVPSC_IA_TST_CLC_01_T
Let $TVPSC_IA_TST_CLC_02_T_Base = Calibration_Values TVPSC_IA_TST_CLC_02_T
Let $TVPSC_IA_TST_CLC_03_T_Base = Calibration_Values TVPSC_IA_TST_CLC_03_T
Let $TVPSC_IA_TST_CLC_04_T_Base = Calibration_Values TVPSC_IA_TST_CLC_04_T
Let $TVPSC_IA_TST_CLC_05_T_Base = Calibration_Values TVPSC_IA_TST_CLC_05_T
Let $TVPSC_IA_TST_CLC_06_T_Base = Calibration_Values TVPSC_IA_TST_CLC_06_T
Let $TVPSC_IA_TST_LNP_T_Base = Calibration_Values TVPSC_IA_TST_LNP_T
Let $TVPSC_IA_TST_TCC_T_Base = Calibration_Values TVPSC_IA_TST_TCC_T

'TRAM Pressure Override
Let $TVPSC_P_CMD_TST_CLC_01_S_Base = Calibration_Values TVPSC_P_CMD_TST_CLC_01_S
Let $TVPSC_P_CMD_TST_CLC_02_S_Base = Calibration_Values TVPSC_P_CMD_TST_CLC_02_S
Let $TVPSC_P_CMD_TST_CLC_03_S_Base = Calibration_Values TVPSC_P_CMD_TST_CLC_03_S
Let $TVPSC_P_CMD_TST_CLC_04_S_Base = Calibration_Values TVPSC_P_CMD_TST_CLC_04_S
Let $TVPSC_P_CMD_TST_CLC_05_S_Base = Calibration_Values TVPSC_P_CMD_TST_CLC_05_S
Let $TVPSC_P_CMD_TST_CLC_06_S_Base = Calibration_Values TVPSC_P_CMD_TST_CLC_06_S
Let $TVPSC_P_CMD_TST_LNP_S_Base = Calibration_Values TVPSC_P_CMD_TST_LNP_S
Let $TVPSC_P_CMD_TST_TCC_S_Base = Calibration_Values TVPSC_P_CMD_TST_TCC_S

'TRAM Pressure Profile
Let $TVPSC_P_TST_CLC_01_T_Base = Calibration_Values TVPSC_P_TST_CLC_01_T
Let $TVPSC_P_TST_CLC_02_T_Base = Calibration_Values TVPSC_P_TST_CLC_02_T
Let $TVPSC_P_TST_CLC_03_T_Base = Calibration_Values TVPSC_P_TST_CLC_03_T
Let $TVPSC_P_TST_CLC_04_T_Base = Calibration_Values TVPSC_P_TST_CLC_04_T
Let $TVPSC_P_TST_CLC_05_T_Base = Calibration_Values TVPSC_P_TST_CLC_05_T
Let $TVPSC_P_TST_CLC_06_T_Base = Calibration_Values TVPSC_P_TST_CLC_06_T
Let $TVPSC_P_TST_LNP_T_Base = Calibration_Values TVPSC_P_TST_LNP_T
Let $TVPSC_P_TST_TCC_T_Base = Calibration_Values TVPSC_P_TST_TCC_T

'TRAM Transfer Functions
Let $TVPSC_IA_TRGT_LNP_A_M_Base = Calibration_Values TVPSC_IA_TRGT_LNP_A_M
Let $TVPSC_IA_TRGT_CLC_01_ONC_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_01_ONC_A_M
Let $TVPSC_IA_TRGT_CLC_02_ONC_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_02_ONC_A_M
Let $TVPSC_IA_TRGT_CLC_03_ONC_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_03_ONC_A_M
Let $TVPSC_IA_TRGT_CLC_04_ONC_LO_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_04_ONC_LO_A_M
Let $TVPSC_IA_TRGT_CLC_04_ONC_HI_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_04_ONC_HI_A_M
Let $TVPSC_IA_TRGT_CLC_05_ONC_LO_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_05_ONC_LO_A_M
Let $TVPSC_IA_TRGT_CLC_05_ONC_HI_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_05_ONC_HI_A_M
Let $TVPSC_IA_TRGT_CLC_06_ONC_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_06_ONC_A_M
Let $TVPSC_IA_TRGT_TCC_A_M_Base = Calibration_Values TVPSC_IA_TRGT_TCC_A_M
Let $TVPSC_IA_TRGT_CLC_01_OFG_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_01_OFG_A_M
Let $TVPSC_IA_TRGT_CLC_02_OFG_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_02_OFG_A_M
Let $TVPSC_IA_TRGT_CLC_03_OFG_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_03_OFG_A_M
Let $TVPSC_IA_TRGT_CLC_04_OFG_LO_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_04_OFG_LO_A_M
Let $TVPSC_IA_TRGT_CLC_04_OFG_HI_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_04_OFG_HI_A_M
Let $TVPSC_IA_TRGT_CLC_05_OFG_LO_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_05_OFG_LO_A_M
Let $TVPSC_IA_TRGT_CLC_05_OFG_HI_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_05_OFG_HI_A_M
Let $TVPSC_IA_TRGT_CLC_06_OFG_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_06_OFG_A_M

'TRAM Dither Amplitude and Frequencies
Let $TVPSC_IA_DTHR_LNP_A_M_Base = Calibration_Values TVPSC_IA_DTHR_LNP_A_M
Let $TVPSC_FQ_DTHR_LNP_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_LNP_A_M
Let $TVPSC_IA_DTHR_CLC_01_A_M_Base = Calibration_Values TVPSC_IA_DTHR_CLC_01_A_M
Let $TVPSC_FQ_DTHR_CLC_01_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_CLC_01_A_M
Let $TVPSC_IA_DTHR_CLC_02_A_M_Base = Calibration_Values TVPSC_IA_DTHR_CLC_02_A_M
Let $TVPSC_FQ_DTHR_CLC_02_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_CLC_02_A_M
Let $TVPSC_IA_DTHR_CLC_03_A_M_Base = Calibration_Values TVPSC_IA_DTHR_CLC_03_A_M
Let $TVPSC_FQ_DTHR_CLC_03_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_CLC_03_A_M
Let $TVPSC_IA_DTHR_CLC_04_LO_A_M_Base = Calibration_Values TVPSC_IA_DTHR_CLC_04_LO_A_M
Let $TVPSC_FQ_DTHR_CLC_04_LO_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_CLC_04_LO_A_M
Let $TVPSC_IA_DTHR_CLC_05_LO_A_M_Base = Calibration_Values TVPSC_IA_DTHR_CLC_05_LO_A_M
Let $TVPSC_FQ_DTHR_CLC_05_LO_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_CLC_05_LO_A_M
Let $TVPSC_IA_DTHR_CLC_04_HI_A_M_Base = Calibration_Values TVPSC_IA_DTHR_CLC_04_HI_A_M
Let $TVPSC_FQ_DTHR_CLC_04_HI_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_CLC_04_HI_A_M
Let $TVPSC_IA_DTHR_CLC_05_HI_A_M_Base = Calibration_Values TVPSC_IA_DTHR_CLC_05_HI_A_M
Let $TVPSC_FQ_DTHR_CLC_05_HI_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_CLC_05_HI_A_M
Let $TVPSC_IA_DTHR_CLC_06_A_M_Base = Calibration_Values TVPSC_IA_DTHR_CLC_06_A_M
Let $TVPSC_FQ_DTHR_CLC_06_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_CLC_06_A_M
Let $TVPSC_IA_DTHR_TCC_A_M_Base = Calibration_Values TVPSC_IA_DTHR_TCC_A_M
Let $TVPSC_FQ_DTHR_TCC_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_TCC_A_M

'TRAM Master Test Switch
Let $TVPSC_B_TST_ENBL_S_Base = Calibration_Values TVPSC_B_TST_ENBL_S

'TRAM Test Switch Timer Reset
Let $TVPSC_B_TST_STRT_ALL_S_Base = Calibration_Values TVPSC_B_TST_STRT_ALL_S
Let $TVPSC_B_TST_RST_ALL_S_Base = Calibration_Values TVPSC_B_TST_RST_ALL_S

'Line Pressure Gain Switch Point
Let $SAPRC_P_LNP_GR_TYP_MIN_V_Base = Calibration_Values SAPRC_P_LNP_GR_TYP_MIN_V

'TRAM Torque converter gain and offset values
' Let $TVPSC_MUL_TCC_GAIN_S_Base = Calibration_Values TVPSC_MUL_TCC_GAIN_S
' Let $TVPSC_P_TCC_OFS_S_Base = Calibration_Values TVPSC_P_TCC_OFS_S

'Boost Pressure Tables
Let $SAPRC_P_BST_TFT_NE_ELEA_M_Base = Calibration_Values SAPRC_P_BST_TFT_NE_ELEA_M
Let $SAPRC_P_BST_TFT_NE_ELEB_M_Base = Calibration_Values SAPRC_P_BST_TFT_NE_ELEB_M
Let $SAPRC_P_BST_TFT_NE_ELEC_M_Base = Calibration_Values SAPRC_P_BST_TFT_NE_ELEC_M
Let $SAPRC_P_BST_TFT_NE_ELED_M_Base = Calibration_Values SAPRC_P_BST_TFT_NE_ELED_M
'Let $SAPRC_P_BST_TFT_NE_ELED_HGAIN_M_Base = Calibration_Values SAPRC_P_BST_TFT_NE_ELED_HGAIN_M
Let $SAPRC_P_BST_TFT_NE_ELEE_M_Base = Calibration_Values SAPRC_P_BST_TFT_NE_ELEE_M
'Let $SAPRC_P_BST_TFT_NE_ELEE_HGAIN_M_Base = Calibration_Values SAPRC_P_BST_TFT_NE_ELEE_HGAIN_M
Let $SAPRC_P_BST_TFT_NE_ELEF_M_Base = Calibration_Values SAPRC_P_BST_TFT_NE_ELEA_M

'Short Boost Pressure Tables
Let $SAPRC_P_SHORT_BST_ELEA_M_Base = Calibration_Values SAPRC_P_SHORT_BST_ELEA_M
Let $SAPRC_P_SHORT_BST_ELEB_M_Base = Calibration_Values SAPRC_P_SHORT_BST_ELEB_M
Let $SAPRC_P_SHORT_BST_ELEC_M_Base = Calibration_Values SAPRC_P_SHORT_BST_ELEC_M
Let $SAPRC_P_SHORT_BST_ELED_M_Base = Calibration_Values SAPRC_P_SHORT_BST_ELED_M
Let $SAPRC_P_SHORT_BST_ELEE_M_Base = Calibration_Values SAPRC_P_SHORT_BST_ELEE_M
Let $SAPRC_P_SHORT_BST_ELEF_M_Base = Calibration_Values SAPRC_P_SHORT_BST_ELEF_M

'Boost Time Tables
Let $SACOR_TM_BST_BASE_LO_ELEA_Base = Calibration_Values SACOR_TM_BST_BASE_LO_ELEA
Let $SACOR_TM_BST_BASE_LO_ELEB_Base = Calibration_Values SACOR_TM_BST_BASE_LO_ELEB
Let $SACOR_TM_BST_BASE_LO_ELEC_Base = Calibration_Values SACOR_TM_BST_BASE_LO_ELEC
Let $SACOR_TM_BST_BASE_LO_ELED_Base = Calibration_Values SACOR_TM_BST_BASE_LO_ELED
Let $SACOR_TM_BST_BASE_LO_ELEE_Base = Calibration_Values SACOR_TM_BST_BASE_LO_ELEE
Let $SACOR_TM_BST_BASE_LO_ELEF_Base = Calibration_Values SACOR_TM_BST_BASE_LO_ELEF
' Let $SACOR_TM_BST_BASE_HI_ELEA_Base = Calibration_Values SACOR_TM_BST_BASE_HI_ELEA
' Let $SACOR_TM_BST_BASE_HI_ELEB_Base = Calibration_Values SACOR_TM_BST_BASE_HI_ELEB
' Let $SACOR_TM_BST_BASE_HI_ELEC_Base = Calibration_Values SACOR_TM_BST_BASE_HI_ELEC
' Let $SACOR_TM_BST_BASE_HI_ELED_Base = Calibration_Values SACOR_TM_BST_BASE_HI_ELED
' Let $SACOR_TM_BST_BASE_HI_ELEE_Base = Calibration_Values SACOR_TM_BST_BASE_HI_ELEE
' Let $SACOR_TM_BST_BASE_HI_ELEF_Base = Calibration_Values SACOR_TM_BST_BASE_HI_ELEF

'Short Boost Time Tables
Let $SACOR_TM_SHORT_BST_BASE_ELEA_M_Base = Calibration_Values SACOR_TM_SHORT_BST_BASE_ELEA_M
Let $SACOR_TM_SHORT_BST_BASE_ELEB_M_Base = Calibration_Values SACOR_TM_SHORT_BST_BASE_ELEB_M
Let $SACOR_TM_SHORT_BST_BASE_ELEC_M_Base = Calibration_Values SACOR_TM_SHORT_BST_BASE_ELEC_M
Let $SACOR_TM_SHORT_BST_BASE_ELED_M_Base = Calibration_Values SACOR_TM_SHORT_BST_BASE_ELED_M
Let $SACOR_TM_SHORT_BST_BASE_ELEE_M_Base = Calibration_Values SACOR_TM_SHORT_BST_BASE_ELEE_M
Let $SACOR_TM_SHORT_BST_BASE_ELEF_M_Base = Calibration_Values SACOR_TM_SHORT_BST_BASE_ELEF_M

'Minimum Torque Converter Lock speed
Let $RMCSH_NE_MIN_LCK_S_Base = Calibration_Values RMCSH_NE_MIN_LCK_S

'Sport Mode Switches
'Let $cVcDi_D_PtDrvMdeReq_sw_Base = Calibration_Values cVcDi_D_PtDrvMdeReq_sw
'Let $cVcDi_D_PtDrvMdeReq_db_Base = Calibration_Values cVcDi_D_PtDrvMdeReq_db

Save_Variables
End_Sub

'*******************************************************
Sub Save_8F_TRAM_Values
'*******************************************************
Screen_Message (Green,%%New_Line%%%%New_Line%%Saving TRAM Calibration Values)
Log_Message (Saving 8F Base Calibration Values)

'TRAM Solenoid Modes
Let $TVPSC_D_OVRD_CLC_01_S_Base = 0
Let $TVPSC_D_OVRD_CLC_02_S_Base = 0
Let $TVPSC_D_OVRD_CLC_03_S_Base = 0
Let $TVPSC_D_OVRD_CLC_04_S_Base = 0
Let $TVPSC_D_OVRD_CLC_05_S_Base = 0
Let $TVPSC_D_OVRD_CLC_06_S_Base = 0
Let $TVPSC_D_OVRD_LNP_S_Base = 0
Let $TVPSC_D_OVRD_TCC_S_Base = 0

'OBDII Disable 
Let $OBDII_TST_SW_Base = Calibration_Values OBDII_TST_SW

'TRAM Gear Override Switches
Let $RMSC_D_GR_TYP_SW_S_Base = Calibration_Values RMSC_D_GR_TYP_SW_S
Let $RMSC_GR_TYP_CMD_S_Base = Calibration_Values RMSC_GR_TYP_CMD_S

'TRAM Solenoid Time Normalizer
Let $TVPSC_TM_TST_CLC_01_N_Base = Calibration_Values TVPSC_TM_TST_CLC_01_N
Let $TVPSC_TM_TST_CLC_02_N_Base = Calibration_Values TVPSC_TM_TST_CLC_02_N
Let $TVPSC_TM_TST_CLC_03_N_Base = Calibration_Values TVPSC_TM_TST_CLC_03_N
Let $TVPSC_TM_TST_CLC_04_N_Base = Calibration_Values TVPSC_TM_TST_CLC_04_N
Let $TVPSC_TM_TST_CLC_05_N_Base = Calibration_Values TVPSC_TM_TST_CLC_05_N
Let $TVPSC_TM_TST_CLC_06_N_Base = Calibration_Values TVPSC_TM_TST_CLC_06_N
Let $TVPSC_TM_TST_LNP_N_Base = Calibration_Values TVPSC_TM_TST_LNP_N
Let $TVPSC_TM_TST_TCC_N_Base = Calibration_Values TVPSC_TM_TST_TCC_N
Wait (1)

'TRAM Current Override
Let $TVPSC_IA_CMD_TST_CLC_01_S_Base = Calibration_Values TVPSC_IA_CMD_TST_CLC_01_S
Let $TVPSC_IA_CMD_TST_CLC_02_S_Base = Calibration_Values TVPSC_IA_CMD_TST_CLC_02_S
Let $TVPSC_IA_CMD_TST_CLC_03_S_Base = Calibration_Values TVPSC_IA_CMD_TST_CLC_03_S
Let $TVPSC_IA_CMD_TST_CLC_04_S_Base = Calibration_Values TVPSC_IA_CMD_TST_CLC_04_S
Let $TVPSC_IA_CMD_TST_CLC_05_S_Base = Calibration_Values TVPSC_IA_CMD_TST_CLC_05_S
Let $TVPSC_IA_CMD_TST_CLC_06_S_Base = Calibration_Values TVPSC_IA_CMD_TST_CLC_06_S
Let $TVPSC_IA_CMD_TST_LNP_S_Base = Calibration_Values TVPSC_IA_CMD_TST_LNP_S
Let $TVPSC_IA_CMD_TST_TCC_S_Base = Calibration_Values TVPSC_IA_CMD_TST_TCC_S

'TRAM Current Profile
Let $TVPSC_IA_TST_CLC_01_T_Base = Calibration_Values TVPSC_IA_TST_CLC_01_T
Let $TVPSC_IA_TST_CLC_02_T_Base = Calibration_Values TVPSC_IA_TST_CLC_02_T
Let $TVPSC_IA_TST_CLC_03_T_Base = Calibration_Values TVPSC_IA_TST_CLC_03_T
Let $TVPSC_IA_TST_CLC_04_T_Base = Calibration_Values TVPSC_IA_TST_CLC_04_T
Let $TVPSC_IA_TST_CLC_05_T_Base = Calibration_Values TVPSC_IA_TST_CLC_05_T
Let $TVPSC_IA_TST_CLC_06_T_Base = Calibration_Values TVPSC_IA_TST_CLC_06_T
Let $TVPSC_IA_TST_LNP_T_Base = Calibration_Values TVPSC_IA_TST_LNP_T
Let $TVPSC_IA_TST_TCC_T_Base = Calibration_Values TVPSC_IA_TST_TCC_T
Wait (1)

'TRAM Pressure Override
Let $TVPSC_P_CMD_TST_CLC_01_S_Base = Calibration_Values TVPSC_P_CMD_TST_CLC_01_S
Let $TVPSC_P_CMD_TST_CLC_02_S_Base = Calibration_Values TVPSC_P_CMD_TST_CLC_02_S
Let $TVPSC_P_CMD_TST_CLC_03_S_Base = Calibration_Values TVPSC_P_CMD_TST_CLC_03_S
Let $TVPSC_P_CMD_TST_CLC_04_S_Base = Calibration_Values TVPSC_P_CMD_TST_CLC_04_S
Let $TVPSC_P_CMD_TST_CLC_05_S_Base = Calibration_Values TVPSC_P_CMD_TST_CLC_05_S
Let $TVPSC_P_CMD_TST_CLC_06_S_Base = Calibration_Values TVPSC_P_CMD_TST_CLC_06_S
Let $TVPSC_P_CMD_TST_LNP_S_Base = Calibration_Values TVPSC_P_CMD_TST_LNP_S
Let $TVPSC_P_CMD_TST_TCC_S_Base = Calibration_Values TVPSC_P_CMD_TST_TCC_S

'TRAM Pressure Profile
Let $TVPSC_P_TST_CLC_01_T_Base = Calibration_Values TVPSC_P_TST_CLC_01_T
Let $TVPSC_P_TST_CLC_02_T_Base = Calibration_Values TVPSC_P_TST_CLC_02_T
Let $TVPSC_P_TST_CLC_03_T_Base = Calibration_Values TVPSC_P_TST_CLC_03_T
Let $TVPSC_P_TST_CLC_04_T_Base = Calibration_Values TVPSC_P_TST_CLC_04_T
Let $TVPSC_P_TST_CLC_05_T_Base = Calibration_Values TVPSC_P_TST_CLC_05_T
Let $TVPSC_P_TST_CLC_06_T_Base = Calibration_Values TVPSC_P_TST_CLC_06_T
Let $TVPSC_P_TST_LNP_T_Base = Calibration_Values TVPSC_P_TST_LNP_T
Let $TVPSC_P_TST_TCC_T_Base = Calibration_Values TVPSC_P_TST_TCC_T
Wait (1)

'TRAM Transfer Functions
Let $TVPSC_IA_TRGT_LNP_A_M_Base = Calibration_Values TVPSC_IA_TRGT_LNP_A_M
Let $TVPSC_IA_TRGT_CLC_01_ONC_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_01_ONC_A_M
Let $TVPSC_IA_TRGT_CLC_02_ONC_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_02_ONC_A_M
Let $TVPSC_IA_TRGT_CLC_03_ONC_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_03_ONC_A_M
Let $TVPSC_IA_TRGT_CLC_04_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_04_M
Let $TVPSC_IA_TRGT_CLC_05_ONC_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_05_ONC_A_M
Let $TVPSC_IA_TRGT_CLC_06_ONC_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_06_ONC_A_M
Let $TVPSC_IA_TRGT_TCC_A_M_Base = Calibration_Values TVPSC_IA_TRGT_TCC_A_M
Let $TVPSC_IA_TRGT_CLC_01_OFG_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_01_OFG_A_M
Let $TVPSC_IA_TRGT_CLC_02_OFG_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_02_OFG_A_M
Let $TVPSC_IA_TRGT_CLC_03_OFG_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_03_OFG_A_M
Let $TVPSC_IA_TRGT_CLC_05_OFG_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_05_OFG_A_M
Let $TVPSC_IA_TRGT_CLC_06_OFG_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_06_OFG_A_M

'TRAM Dither Functions
Let $TVPSC_IA_DTHR_LNP_A_M_Base = Calibration_Values TVPSC_IA_DTHR_LNP_A_M
Let $TVPSC_FQ_DTHR_LNP_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_LNP_A_M
Let $TVPSC_IA_DTHR_CLC_01_A_M_Base = Calibration_Values TVPSC_IA_DTHR_CLC_01_A_M
Let $TVPSC_FQ_DTHR_CLC_01_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_CLC_01_A_M
Let $TVPSC_IA_DTHR_CLC_02_A_M_Base = Calibration_Values TVPSC_IA_DTHR_CLC_02_A_M
Let $TVPSC_FQ_DTHR_CLC_02_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_CLC_02_A_M
Let $TVPSC_IA_DTHR_CLC_03_A_M_Base = Calibration_Values TVPSC_IA_DTHR_CLC_03_A_M
Let $TVPSC_FQ_DTHR_CLC_03_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_CLC_03_A_M
Let $TVPSC_IA_DTHR_CLC_04_M_Base = Calibration_Values TVPSC_IA_DTHR_CLC_04_M
Let $TVPSC_FQ_DTHR_CLC_04_M_Base = Calibration_Values TVPSC_FQ_DTHR_CLC_04_M
Let $TVPSC_IA_DTHR_CLC_05_A_M_Base = Calibration_Values TVPSC_IA_DTHR_CLC_05_A_M
Let $TVPSC_FQ_DTHR_CLC_05_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_CLC_05_A_M
Let $TVPSC_IA_DTHR_CLC_06_A_M_Base = Calibration_Values TVPSC_IA_DTHR_CLC_06_A_M
Let $TVPSC_FQ_DTHR_CLC_06_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_CLC_06_A_M
Let $TVPSC_IA_DTHR_TCC_A_M_Base = Calibration_Values TVPSC_IA_DTHR_TCC_A_M
Let $TVPSC_FQ_DTHR_TCC_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_TCC_A_M
Wait (1)

'TRAM Master Test Switch
Let $TVPSC_B_TST_ENBL_S_Base = 0

'TRAM Test Switch Timer Reset
Let $TVPSC_B_TST_STRT_ALL_S_Base = 0
Let $TVPSC_B_TST_RST_ALL_S_Base = 0

'Line Pressure Gain Switch Point
Let $SAPRC_P_LNP_GR_TYP_MIN_V_Base = Calibration_Values SAPRC_P_LNP_GR_TYP_MIN_V

' Let $TVPSC_MUL_TCC_GAIN_S_Base = Calibration_Values TVPSC_MUL_TCC_GAIN_S
' Let $TVPSC_P_TCC_OFS_S_Base = Calibration_Values TVPSC_P_TCC_OFS_S

'Boost Pressure Tables
Let $SAPRC_P_BST_TFT_NE_ELEA_M_Base = Calibration_Values SAPRC_P_BST_TFT_NE_ELEA_M
Let $SAPRC_P_BST_TFT_NE_ELEB_M_Base = Calibration_Values SAPRC_P_BST_TFT_NE_ELEB_M
Let $SAPRC_P_BST_TFT_NE_ELEC_M_Base = Calibration_Values SAPRC_P_BST_TFT_NE_ELEC_M
Let $SAPRC_P_BST_TFT_NE_ELED_M_Base = Calibration_Values SAPRC_P_BST_TFT_NE_ELED_M
'Let $SAPRC_P_BST_TFT_NE_ELED_HGAIN_M_Base = Calibration_Values SAPRC_P_BST_TFT_NE_ELED_HGAIN_M
Let $SAPRC_P_BST_TFT_NE_ELEE_M_Base = Calibration_Values SAPRC_P_BST_TFT_NE_ELEE_M
'Let $SAPRC_P_BST_TFT_NE_ELEE_HGAIN_M_Base = Calibration_Values SAPRC_P_BST_TFT_NE_ELEE_HGAIN_M
Let $SAPRC_P_BST_TFT_NE_ELEF_M_Base = Calibration_Values SAPRC_P_BST_TFT_NE_ELEA_M

'Short Boost Pressure Tables
Let $SAPRC_P_SHORT_BST_ELEA_M_Base = Calibration_Values SAPRC_P_SHORT_BST_ELEA_M
Let $SAPRC_P_SHORT_BST_ELEB_M_Base = Calibration_Values SAPRC_P_SHORT_BST_ELEB_M
Let $SAPRC_P_SHORT_BST_ELEC_M_Base = Calibration_Values SAPRC_P_SHORT_BST_ELEC_M
Let $SAPRC_P_SHORT_BST_ELED_M_Base = Calibration_Values SAPRC_P_SHORT_BST_ELED_M
Let $SAPRC_P_SHORT_BST_ELEE_M_Base = Calibration_Values SAPRC_P_SHORT_BST_ELEE_M
Let $SAPRC_P_SHORT_BST_ELEF_M_Base = Calibration_Values SAPRC_P_SHORT_BST_ELEF_M

'Boost Time Tables
Let $SACOR_TM_BST_BASE_LO_ELEA_Base = Calibration_Values SACOR_TM_BST_BASE_LO_ELEA
Let $SACOR_TM_BST_BASE_LO_ELEB_Base = Calibration_Values SACOR_TM_BST_BASE_LO_ELEB
Let $SACOR_TM_BST_BASE_LO_ELEC_Base = Calibration_Values SACOR_TM_BST_BASE_LO_ELEC
Let $SACOR_TM_BST_BASE_LO_ELED_Base = Calibration_Values SACOR_TM_BST_BASE_LO_ELED
Let $SACOR_TM_BST_BASE_LO_ELEE_Base = Calibration_Values SACOR_TM_BST_BASE_LO_ELEE
Let $SACOR_TM_BST_BASE_LO_ELEF_Base = Calibration_Values SACOR_TM_BST_BASE_LO_ELEF
' Let $SACOR_TM_BST_BASE_HI_ELEA_Base = Calibration_Values SACOR_TM_BST_BASE_HI_ELEA
' Let $SACOR_TM_BST_BASE_HI_ELEB_Base = Calibration_Values SACOR_TM_BST_BASE_HI_ELEB
' Let $SACOR_TM_BST_BASE_HI_ELEC_Base = Calibration_Values SACOR_TM_BST_BASE_HI_ELEC
' Let $SACOR_TM_BST_BASE_HI_ELED_Base = Calibration_Values SACOR_TM_BST_BASE_HI_ELED
' Let $SACOR_TM_BST_BASE_HI_ELEE_Base = Calibration_Values SACOR_TM_BST_BASE_HI_ELEE
' Let $SACOR_TM_BST_BASE_HI_ELEF_Base = Calibration_Values SACOR_TM_BST_BASE_HI_ELEF

'Short Boost Time Tables
Let $SACOR_TM_SHORT_BST_BASE_ELEA_M_Base = Calibration_Values SACOR_TM_SHORT_BST_BASE_ELEA_M
Let $SACOR_TM_SHORT_BST_BASE_ELEB_M_Base = Calibration_Values SACOR_TM_SHORT_BST_BASE_ELEB_M
Let $SACOR_TM_SHORT_BST_BASE_ELEC_M_Base = Calibration_Values SACOR_TM_SHORT_BST_BASE_ELEC_M
Let $SACOR_TM_SHORT_BST_BASE_ELED_M_Base = Calibration_Values SACOR_TM_SHORT_BST_BASE_ELED_M
Let $SACOR_TM_SHORT_BST_BASE_ELEE_M_Base = Calibration_Values SACOR_TM_SHORT_BST_BASE_ELEE_M
Let $SACOR_TM_SHORT_BST_BASE_ELEF_M_Base = Calibration_Values SACOR_TM_SHORT_BST_BASE_ELEF_M

'Minimum Torque Converter Lock speed
Let $RMCSH_NE_MIN_LCK_S_Base = Calibration_Values RMCSH_NE_MIN_LCK_S

'Sport Mode Switches
' Let $cVcDi_D_PtDrvMdeReq_sw_Base = Calibration_Values cVcDi_D_PtDrvMdeReq_sw
' Let $cVcDi_D_PtDrvMdeReq_db_Base = Calibration_Values cVcDi_D_PtDrvMdeReq_db

Save_Variables
End_Sub

'*******************************************************
Sub Save_10R_TRAM_Values
'*******************************************************
Screen_Message (Green,%%New_Line%%%%New_Line%%Saving TRAM Calibration Values)
Log_Message (Saving 10R Base Calibration Values)

'TRAM Solenoid Override Modes
Let $TVPSC_D_OVRD_CLC_01_S_Base = 0
Let $TVPSC_D_OVRD_CLC_02_S_Base = 0
Let $TVPSC_D_OVRD_CLC_03_S_Base = 0
Let $TVPSC_D_OVRD_CLC_04_S_Base = 0
Let $TVPSC_D_OVRD_CLC_05_S_Base = 0
Let $TVPSC_D_OVRD_CLC_06_S_Base = 0
Let $TVPSC_D_OVRD_LNP_S_Base = 0
Let $TVPSC_D_OVRD_TCC_S_Base = 0

'TRAM OBDII test switch
Let $OBDII_TST_SW_Base = Calibration_Values OBDII_TST_SW

'TRAM Manual Gear override
Let $RMSC_D_GR_TYP_SW_S_Base = Calibration_Values RMSC_D_GR_TYP_SW_S
Let $RMSC_GR_TYP_CMD_S_Base = Calibration_Values RMSC_GR_TYP_CMD_S

'TRAM Solenoid Time Normalizer
Let $TVPSC_TM_TST_CLC_01_N_Base = Calibration_Values TVPSC_TM_TST_CLC_01_N
Let $TVPSC_TM_TST_CLC_02_N_Base = Calibration_Values TVPSC_TM_TST_CLC_02_N
Let $TVPSC_TM_TST_CLC_03_N_Base = Calibration_Values TVPSC_TM_TST_CLC_03_N
Let $TVPSC_TM_TST_CLC_04_N_Base = Calibration_Values TVPSC_TM_TST_CLC_04_N
Let $TVPSC_TM_TST_CLC_05_N_Base = Calibration_Values TVPSC_TM_TST_CLC_05_N
Let $TVPSC_TM_TST_CLC_06_N_Base = Calibration_Values TVPSC_TM_TST_CLC_06_N
Let $TVPSC_TM_TST_LNP_N_Base = Calibration_Values TVPSC_TM_TST_LNP_N
Let $TVPSC_TM_TST_TCC_N_Base = Calibration_Values TVPSC_TM_TST_TCC_N

'TRAM Current command
Let $TVPSC_IA_CMD_TST_CLC_01_S_Base = Calibration_Values TVPSC_IA_CMD_TST_CLC_01_S
Let $TVPSC_IA_CMD_TST_CLC_02_S_Base = Calibration_Values TVPSC_IA_CMD_TST_CLC_02_S
Let $TVPSC_IA_CMD_TST_CLC_03_S_Base = Calibration_Values TVPSC_IA_CMD_TST_CLC_03_S
Let $TVPSC_IA_CMD_TST_CLC_04_S_Base = Calibration_Values TVPSC_IA_CMD_TST_CLC_04_S
Let $TVPSC_IA_CMD_TST_CLC_05_S_Base = Calibration_Values TVPSC_IA_CMD_TST_CLC_05_S
Let $TVPSC_IA_CMD_TST_CLC_06_S_Base = Calibration_Values TVPSC_IA_CMD_TST_CLC_06_S
Let $TVPSC_IA_CMD_TST_LNP_S_Base = Calibration_Values TVPSC_IA_CMD_TST_LNP_S
Let $TVPSC_IA_CMD_TST_TCC_S_Base = Calibration_Values TVPSC_IA_CMD_TST_TCC_S

'TRAM Current Profile
Let $TVPSC_IA_TST_CLC_01_T_Base = Calibration_Values TVPSC_IA_TST_CLC_01_T
Let $TVPSC_IA_TST_CLC_02_T_Base = Calibration_Values TVPSC_IA_TST_CLC_02_T
Let $TVPSC_IA_TST_CLC_03_T_Base = Calibration_Values TVPSC_IA_TST_CLC_03_T
Let $TVPSC_IA_TST_CLC_04_T_Base = Calibration_Values TVPSC_IA_TST_CLC_04_T
Let $TVPSC_IA_TST_CLC_05_T_Base = Calibration_Values TVPSC_IA_TST_CLC_05_T
Let $TVPSC_IA_TST_CLC_06_T_Base = Calibration_Values TVPSC_IA_TST_CLC_06_T
Let $TVPSC_IA_TST_LNP_T_Base = Calibration_Values TVPSC_IA_TST_LNP_T
Let $TVPSC_IA_TST_TCC_T_Base = Calibration_Values TVPSC_IA_TST_TCC_T

'TRAM Pressure Override
Let $TVPSC_P_CMD_TST_CLC_01_S_Base = Calibration_Values TVPSC_P_CMD_TST_CLC_01_S
Let $TVPSC_P_CMD_TST_CLC_02_S_Base = Calibration_Values TVPSC_P_CMD_TST_CLC_02_S
Let $TVPSC_P_CMD_TST_CLC_03_S_Base = Calibration_Values TVPSC_P_CMD_TST_CLC_03_S
Let $TVPSC_P_CMD_TST_CLC_04_S_Base = Calibration_Values TVPSC_P_CMD_TST_CLC_04_S
Let $TVPSC_P_CMD_TST_CLC_05_S_Base = Calibration_Values TVPSC_P_CMD_TST_CLC_05_S
Let $TVPSC_P_CMD_TST_CLC_06_S_Base = Calibration_Values TVPSC_P_CMD_TST_CLC_06_S
Let $TVPSC_P_CMD_TST_LNP_S_Base = Calibration_Values TVPSC_P_CMD_TST_LNP_S
Let $TVPSC_P_CMD_TST_TCC_S_Base = Calibration_Values TVPSC_P_CMD_TST_TCC_S

'TRAM Pressure Profile
Let $TVPSC_P_TST_CLC_01_T_Base = Calibration_Values TVPSC_P_TST_CLC_01_T
Let $TVPSC_P_TST_CLC_02_T_Base = Calibration_Values TVPSC_P_TST_CLC_02_T
Let $TVPSC_P_TST_CLC_03_T_Base = Calibration_Values TVPSC_P_TST_CLC_03_T
Let $TVPSC_P_TST_CLC_04_T_Base = Calibration_Values TVPSC_P_TST_CLC_04_T
Let $TVPSC_P_TST_CLC_05_T_Base = Calibration_Values TVPSC_P_TST_CLC_05_T
Let $TVPSC_P_TST_CLC_06_T_Base = Calibration_Values TVPSC_P_TST_CLC_06_T
Let $TVPSC_P_TST_LNP_T_Base = Calibration_Values TVPSC_P_TST_LNP_T
Let $TVPSC_P_TST_TCC_T_Base = Calibration_Values TVPSC_P_TST_TCC_T

'TRAM Transfer Functions
Let $TVPSC_IA_TRGT_LNP_A_M_Base = Calibration_Values TVPSC_IA_TRGT_LNP_A_M
Let $TVPSC_IA_TRGT_CLC_01_ONC_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_01_ONC_A_M
Let $TVPSC_IA_TRGT_CLC_02_ONC_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_02_ONC_A_M
Let $TVPSC_IA_TRGT_CLC_03_ONC_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_03_ONC_A_M
Let $TVPSC_IA_TRGT_CLC_04_ONC_LO_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_04_ONC_LO_A_M
Let $TVPSC_IA_TRGT_CLC_04_ONC_HI_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_04_ONC_HI_A_M
Let $TVPSC_IA_TRGT_CLC_05_ONC_LO_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_05_ONC_LO_A_M
Let $TVPSC_IA_TRGT_CLC_05_ONC_HI_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_05_ONC_HI_A_M
Let $TVPSC_IA_TRGT_CLC_06_ONC_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_06_ONC_A_M
Let $TVPSC_IA_TRGT_TCC_A_M_Base = Calibration_Values TVPSC_IA_TRGT_TCC_A_M
Let $TVPSC_IA_TRGT_CLC_01_OFG_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_01_OFG_A_M
Let $TVPSC_IA_TRGT_CLC_02_OFG_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_02_OFG_A_M
Let $TVPSC_IA_TRGT_CLC_03_OFG_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_03_OFG_A_M
Let $TVPSC_IA_TRGT_CLC_04_OFG_LO_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_04_OFG_LO_A_M
Let $TVPSC_IA_TRGT_CLC_04_OFG_HI_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_04_OFG_HI_A_M
Let $TVPSC_IA_TRGT_CLC_05_OFG_LO_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_05_OFG_LO_A_M
Let $TVPSC_IA_TRGT_CLC_05_OFG_HI_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_05_OFG_HI_A_M
Let $TVPSC_IA_TRGT_CLC_06_OFG_A_M_Base = Calibration_Values TVPSC_IA_TRGT_CLC_06_OFG_A_M

'TRAM Dither Amplitude and Frequencies
Let $TVPSC_IA_DTHR_LNP_A_M_Base = Calibration_Values TVPSC_IA_DTHR_LNP_A_M
Let $TVPSC_FQ_DTHR_LNP_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_LNP_A_M
Let $TVPSC_IA_DTHR_CLC_01_A_M_Base = Calibration_Values TVPSC_IA_DTHR_CLC_01_A_M
Let $TVPSC_FQ_DTHR_CLC_01_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_CLC_01_A_M
Let $TVPSC_IA_DTHR_CLC_02_A_M_Base = Calibration_Values TVPSC_IA_DTHR_CLC_02_A_M
Let $TVPSC_FQ_DTHR_CLC_02_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_CLC_02_A_M
Let $TVPSC_IA_DTHR_CLC_03_A_M_Base = Calibration_Values TVPSC_IA_DTHR_CLC_03_A_M
Let $TVPSC_FQ_DTHR_CLC_03_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_CLC_03_A_M
Let $TVPSC_IA_DTHR_CLC_04_LO_A_M_Base = Calibration_Values TVPSC_IA_DTHR_CLC_04_LO_A_M
Let $TVPSC_FQ_DTHR_CLC_04_LO_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_CLC_04_LO_A_M
Let $TVPSC_IA_DTHR_CLC_05_LO_A_M_Base = Calibration_Values TVPSC_IA_DTHR_CLC_05_LO_A_M
Let $TVPSC_FQ_DTHR_CLC_05_LO_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_CLC_05_LO_A_M
Let $TVPSC_IA_DTHR_CLC_04_HI_A_M_Base = Calibration_Values TVPSC_IA_DTHR_CLC_04_HI_A_M
Let $TVPSC_FQ_DTHR_CLC_04_HI_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_CLC_04_HI_A_M
Let $TVPSC_IA_DTHR_CLC_05_HI_A_M_Base = Calibration_Values TVPSC_IA_DTHR_CLC_05_HI_A_M
Let $TVPSC_FQ_DTHR_CLC_05_HI_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_CLC_05_HI_A_M
Let $TVPSC_IA_DTHR_CLC_06_A_M_Base = Calibration_Values TVPSC_IA_DTHR_CLC_06_A_M
Let $TVPSC_FQ_DTHR_CLC_06_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_CLC_06_A_M
Let $TVPSC_IA_DTHR_TCC_A_M_Base = Calibration_Values TVPSC_IA_DTHR_TCC_A_M
Let $TVPSC_FQ_DTHR_TCC_A_M_Base = Calibration_Values TVPSC_FQ_DTHR_TCC_A_M

'TRAM Master Test Switch
Let $TVPSC_B_TST_ENBL_S_Base = Calibration_Values TVPSC_B_TST_ENBL_S

'TRAM Test Switch Timer Reset
Let $TVPSC_B_TST_STRT_ALL_S_Base = Calibration_Values TVPSC_B_TST_STRT_ALL_S
Let $TVPSC_B_TST_RST_ALL_S_Base = Calibration_Values TVPSC_B_TST_RST_ALL_S

'Line Pressure Gain Switch Point
Let $SAPRC_P_LNP_GR_TYP_MIN_V_Base = Calibration_Values SAPRC_P_LNP_GR_TYP_MIN_V

'TRAM Torque converter gain and offset values
' Let $TVPSC_MUL_TCC_GAIN_S_Base = Calibration_Values TVPSC_MUL_TCC_GAIN_S
' Let $TVPSC_P_TCC_OFS_S_Base = Calibration_Values TVPSC_P_TCC_OFS_S

'Boost Pressure Tables
Let $SAPRC_P_BST_TFT_NE_ELEA_M_Base = Calibration_Values SAPRC_P_BST_TFT_NE_ELEA_M
Let $SAPRC_P_BST_TFT_NE_ELEB_M_Base = Calibration_Values SAPRC_P_BST_TFT_NE_ELEB_M
Let $SAPRC_P_BST_TFT_NE_ELEC_M_Base = Calibration_Values SAPRC_P_BST_TFT_NE_ELEC_M
Let $SAPRC_P_BST_TFT_NE_ELED_M_Base = Calibration_Values SAPRC_P_BST_TFT_NE_ELED_M
'Let $SAPRC_P_BST_TFT_NE_ELED_HGAIN_M_Base = Calibration_Values SAPRC_P_BST_TFT_NE_ELED_HGAIN_M
Let $SAPRC_P_BST_TFT_NE_ELEE_M_Base = Calibration_Values SAPRC_P_BST_TFT_NE_ELEE_M
'Let $SAPRC_P_BST_TFT_NE_ELEE_HGAIN_M_Base = Calibration_Values SAPRC_P_BST_TFT_NE_ELEE_HGAIN_M
Let $SAPRC_P_BST_TFT_NE_ELEF_M_Base = Calibration_Values SAPRC_P_BST_TFT_NE_ELEA_M

'Short Boost Pressure Tables
Let $SAPRC_P_SHORT_BST_ELEA_M_Base = Calibration_Values SAPRC_P_SHORT_BST_ELEA_M
Let $SAPRC_P_SHORT_BST_ELEB_M_Base = Calibration_Values SAPRC_P_SHORT_BST_ELEB_M
Let $SAPRC_P_SHORT_BST_ELEC_M_Base = Calibration_Values SAPRC_P_SHORT_BST_ELEC_M
Let $SAPRC_P_SHORT_BST_ELED_M_Base = Calibration_Values SAPRC_P_SHORT_BST_ELED_M
Let $SAPRC_P_SHORT_BST_ELEE_M_Base = Calibration_Values SAPRC_P_SHORT_BST_ELEE_M
Let $SAPRC_P_SHORT_BST_ELEF_M_Base = Calibration_Values SAPRC_P_SHORT_BST_ELEF_M

'Boost Time Tables
Let $SACOR_TM_BST_BASE_LO_ELEA_Base = Calibration_Values SACOR_TM_BST_BASE_LO_ELEA
Let $SACOR_TM_BST_BASE_LO_ELEB_Base = Calibration_Values SACOR_TM_BST_BASE_LO_ELEB
Let $SACOR_TM_BST_BASE_LO_ELEC_Base = Calibration_Values SACOR_TM_BST_BASE_LO_ELEC
Let $SACOR_TM_BST_BASE_LO_ELED_Base = Calibration_Values SACOR_TM_BST_BASE_LO_ELED
Let $SACOR_TM_BST_BASE_LO_ELEE_Base = Calibration_Values SACOR_TM_BST_BASE_LO_ELEE
Let $SACOR_TM_BST_BASE_HI_ELED_Base = Calibration_Values SACOR_TM_BST_BASE_HI_ELED
Let $SACOR_TM_BST_BASE_HI_ELEE_Base = Calibration_Values SACOR_TM_BST_BASE_HI_ELEE
Let $SACOR_TM_BST_BASE_LO_ELEF_Base = Calibration_Values SACOR_TM_BST_BASE_LO_ELEF
' Let $SACOR_TM_BST_BASE_HI_ELEA_Base = Calibration_Values SACOR_TM_BST_BASE_HI_ELEA
' Let $SACOR_TM_BST_BASE_HI_ELEB_Base = Calibration_Values SACOR_TM_BST_BASE_HI_ELEB
' Let $SACOR_TM_BST_BASE_HI_ELEC_Base = Calibration_Values SACOR_TM_BST_BASE_HI_ELEC
' Let $SACOR_TM_BST_BASE_HI_ELED_Base = Calibration_Values SACOR_TM_BST_BASE_HI_ELED
' Let $SACOR_TM_BST_BASE_HI_ELEE_Base = Calibration_Values SACOR_TM_BST_BASE_HI_ELEE
' Let $SACOR_TM_BST_BASE_HI_ELEF_Base = Calibration_Values SACOR_TM_BST_BASE_HI_ELEF

'Short Boost Time Tables
Let $SACOR_TM_SHORT_BST_BASE_ELEA_M_Base = Calibration_Values SACOR_TM_SHORT_BST_BASE_ELEA_M
Let $SACOR_TM_SHORT_BST_BASE_ELEB_M_Base = Calibration_Values SACOR_TM_SHORT_BST_BASE_ELEB_M
Let $SACOR_TM_SHORT_BST_BASE_ELEC_M_Base = Calibration_Values SACOR_TM_SHORT_BST_BASE_ELEC_M
Let $SACOR_TM_SHORT_BST_BASE_ELED_M_Base = Calibration_Values SACOR_TM_SHORT_BST_BASE_ELED_M
Let $SACOR_TM_SHORT_BST_BASE_ELEE_M_Base = Calibration_Values SACOR_TM_SHORT_BST_BASE_ELEE_M
Let $SACOR_TM_SHORT_BST_BASE_ELEF_M_Base = Calibration_Values SACOR_TM_SHORT_BST_BASE_ELEF_M

'Minimum Torque Converter Lock speed
Let $RMCSH_NE_MIN_LCK_S_Base = Calibration_Values RMCSH_NE_MIN_LCK_S

'Sport Mode Switches
'Let $cVcDi_D_PtDrvMdeReq_sw_Base = Calibration_Values cVcDi_D_PtDrvMdeReq_sw
'Let $cVcDi_D_PtDrvMdeReq_db_Base = Calibration_Values cVcDi_D_PtDrvMdeReq_db

Save_Variables
End_Sub

'*******************************************************
Sub TRAM_Reset_6R
'*******************************************************
Log_Message (Starting TRAM_Reset_6R subroutine.)
If $TRAM_Set = 0 Then Goto TRAM_Reset_6R_Complete:

'Synchronize ECM and PCM
Gosub PCM_Synchronize
Gosub ECM_Synchronize

'Close accelerator pedal and reset engine speed test switches
Gosub Reset_Engine_Speed
Gosub Reset_Pedal

'Reset manual gear override switches
Set RMSC_D_GR_TYP_SW_S ($RMSC_D_GR_TYP_SW_S_Base,0)
Set RMSC_GR_TYP_CMD_S ($RMSC_GR_TYP_CMD_S_Base,0)

'TRAM Solenoid Override codes
Set TVPSC_D_OVRD_CLC_01_S ($TVPSC_D_OVRD_CLC_01_S_Base,0)
Set TVPSC_D_OVRD_CLC_02_S ($TVPSC_D_OVRD_CLC_02_S_Base,0)
Set TVPSC_D_OVRD_CLC_03_S ($TVPSC_D_OVRD_CLC_03_S_Base,0)
Set TVPSC_D_OVRD_CLC_04_S ($TVPSC_D_OVRD_CLC_04_S_Base,0)
Set TVPSC_D_OVRD_CLC_05_S ($TVPSC_D_OVRD_CLC_05_S_Base,0)
Set TVPSC_D_OVRD_CLC_06_S ($TVPSC_D_OVRD_CLC_06_S_Base,0)
Set TVPSC_D_OVRD_LNP_S ($TVPSC_D_OVRD_LNP_S_Base,0)
Set TVPSC_D_OVRD_TCC_S ($TVPSC_D_OVRD_TCC_S_Base,0)

'TRAM Solenoid Time Normalizer
Set_Function_Table TVPSC_TM_TST_CLC_01_N =  $TVPSC_TM_TST_CLC_01_N_Base
Set_Function_Table TVPSC_TM_TST_CLC_02_N = $TVPSC_TM_TST_CLC_02_N_Base
Set_Function_Table TVPSC_TM_TST_CLC_03_N = $TVPSC_TM_TST_CLC_03_N_Base
Set_Function_Table TVPSC_TM_TST_CLC_04_N = $TVPSC_TM_TST_CLC_04_N_Base
Set_Function_Table TVPSC_TM_TST_CLC_05_N = $TVPSC_TM_TST_CLC_05_N_Base
Set_Function_Table TVPSC_TM_TST_CLC_06_N = $TVPSC_TM_TST_CLC_06_N_Base
Set_Function_Table TVPSC_TM_TST_LNP_N = $TVPSC_TM_TST_LNP_N_Base
Set_Function_Table TVPSC_TM_TST_TCC_N = $TVPSC_TM_TST_TCC_N_Base
Set_Activate

'TRAM Current Override
Set TVPSC_IA_CMD_TST_CLC_01_S ($TVPSC_IA_CMD_TST_CLC_01_S_Base,0)
Set TVPSC_IA_CMD_TST_CLC_02_S ($TVPSC_IA_CMD_TST_CLC_02_S_Base,0)
Set TVPSC_IA_CMD_TST_CLC_03_S ($TVPSC_IA_CMD_TST_CLC_03_S_Base,0)
Set TVPSC_IA_CMD_TST_CLC_04_S ($TVPSC_IA_CMD_TST_CLC_04_S_Base,0)
Set TVPSC_IA_CMD_TST_CLC_05_S ($TVPSC_IA_CMD_TST_CLC_05_S_Base,0)
Set TVPSC_IA_CMD_TST_CLC_06_S ($TVPSC_IA_CMD_TST_CLC_06_S_Base,0)
Set TVPSC_IA_CMD_TST_LNP_S ($TVPSC_IA_CMD_TST_LNP_S_Base,0)
Set TVPSC_IA_CMD_TST_TCC_S ($TVPSC_IA_CMD_TST_TCC_S_Base,0)

'TRAM Current Profile
Set_Function_Table TVPSC_IA_TST_CLC_01_T = $TVPSC_IA_TST_CLC_01_T_Base
Set_Function_Table TVPSC_IA_TST_CLC_02_T = $TVPSC_IA_TST_CLC_02_T_Base
Set_Function_Table TVPSC_IA_TST_CLC_03_T = $TVPSC_IA_TST_CLC_03_T_Base
Set_Function_Table TVPSC_IA_TST_CLC_04_T = $TVPSC_IA_TST_CLC_04_T_Base
Set_Function_Table TVPSC_IA_TST_CLC_05_T = $TVPSC_IA_TST_CLC_05_T_Base
Set_Function_Table TVPSC_IA_TST_CLC_06_T = $TVPSC_IA_TST_CLC_06_T_Base
Set_Function_Table TVPSC_IA_TST_LNP_T = $TVPSC_IA_TST_LNP_T_Base
Set_Function_Table TVPSC_IA_TST_TCC_T = $TVPSC_IA_TST_TCC_T_Base
Set_Activate

'TRAM Pressure Override
Set TVPSC_P_CMD_TST_CLC_01_S ($TVPSC_P_CMD_TST_CLC_01_S_Base,0)
Set TVPSC_P_CMD_TST_CLC_02_S ($TVPSC_P_CMD_TST_CLC_02_S_Base,0)
Set TVPSC_P_CMD_TST_CLC_03_S ($TVPSC_P_CMD_TST_CLC_03_S_Base,0)
Set TVPSC_P_CMD_TST_CLC_04_S ($TVPSC_P_CMD_TST_CLC_04_S_Base,0)
Set TVPSC_P_CMD_TST_CLC_05_S ($TVPSC_P_CMD_TST_CLC_05_S_Base,0)
Set TVPSC_P_CMD_TST_CLC_06_S ($TVPSC_P_CMD_TST_CLC_06_S_Base,0)
Set TVPSC_P_CMD_TST_LNP_S ($TVPSC_P_CMD_TST_LNP_S_Base,0)
Set TVPSC_P_CMD_TST_TCC_S ($TVPSC_P_CMD_TST_TCC_S_Base,0)

'TRAM Pressure Profile
Set_Function_Table TVPSC_P_TST_CLC_01_T = $TVPSC_P_TST_CLC_01_T_Base
Set_Function_Table TVPSC_P_TST_CLC_02_T = $TVPSC_P_TST_CLC_02_T_Base
Set_Function_Table TVPSC_P_TST_CLC_03_T = $TVPSC_P_TST_CLC_03_T_Base
Set_Function_Table TVPSC_P_TST_CLC_04_T = $TVPSC_P_TST_CLC_04_T_Base
Set_Function_Table TVPSC_P_TST_CLC_05_T = $TVPSC_P_TST_CLC_05_T_Base
Set_Function_Table TVPSC_P_TST_CLC_06_T = $TVPSC_P_TST_CLC_06_T_Base
Set_Function_Table TVPSC_P_TST_LNP_T = $TVPSC_P_TST_LNP_T_Base
Set_Function_Table TVPSC_P_TST_TCC_T = $TVPSC_P_TST_TCC_T_Base
Set_Activate

'TRAM Transfer Functions
Set_Function_Table TVPSC_IA_TRGT_LNP_A_M = $TVPSC_IA_TRGT_LNP_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_01_ONC_A_M = $TVPSC_IA_TRGT_CLC_01_ONC_A_M_Base
Set_Function_Table TVPSC_IA_TRGT_CLC_02_ONC_A_M = $TVPSC_IA_TRGT_CLC_02_ONC_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_03_ONC_A_M = $TVPSC_IA_TRGT_CLC_03_ONC_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_04_ONC_LO_A_M = $TVPSC_IA_TRGT_CLC_04_ONC_LO_A_M_Base
Set_Function_Table TVPSC_IA_TRGT_CLC_04_ONC_HI_A_M = $TVPSC_IA_TRGT_CLC_04_ONC_HI_A_M_Base
Set_Function_Table TVPSC_IA_TRGT_CLC_05_ONC_LO_A_M = $TVPSC_IA_TRGT_CLC_05_ONC_LO_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_05_ONC_HI_A_M = $TVPSC_IA_TRGT_CLC_05_ONC_HI_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_06_ONC_A_M = $TVPSC_IA_TRGT_CLC_06_ONC_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_TCC_A_M = $TVPSC_IA_TRGT_TCC_A_M_Base
Set_Function_Table TVPSC_IA_TRGT_CLC_01_OFG_A_M = $TVPSC_IA_TRGT_CLC_01_OFG_A_M_Base
Set_Function_Table TVPSC_IA_TRGT_CLC_02_OFG_A_M = $TVPSC_IA_TRGT_CLC_02_OFG_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_03_OFG_A_M = $TVPSC_IA_TRGT_CLC_03_OFG_A_M_Base
Set_Function_Table TVPSC_IA_TRGT_CLC_04_OFG_LO_A_M = $TVPSC_IA_TRGT_CLC_04_OFG_LO_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_04_OFG_HI_A_M = $TVPSC_IA_TRGT_CLC_04_OFG_HI_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_05_OFG_LO_A_M = $TVPSC_IA_TRGT_CLC_05_OFG_LO_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_05_OFG_HI_A_M = $TVPSC_IA_TRGT_CLC_05_OFG_HI_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_06_OFG_A_M = $TVPSC_IA_TRGT_CLC_06_OFG_A_M_Base
Set_Activate
Wait (1)

'TRAM Dither Frequencies and Amplitudes
Set_Function_Table TVPSC_IA_DTHR_LNP_A_M = $TVPSC_IA_DTHR_LNP_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_LNP_A_M = $TVPSC_FQ_DTHR_LNP_A_M_Base
Set_Function_Table TVPSC_IA_DTHR_CLC_01_A_M = $TVPSC_IA_DTHR_CLC_01_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_CLC_01_A_M = $TVPSC_FQ_DTHR_CLC_01_A_M_Base
Set_Function_Table TVPSC_IA_DTHR_CLC_02_A_M = $TVPSC_IA_DTHR_CLC_02_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_CLC_02_A_M = $TVPSC_FQ_DTHR_CLC_02_A_M_Base
Set_Function_Table TVPSC_IA_DTHR_CLC_03_A_M = $TVPSC_IA_DTHR_CLC_03_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_CLC_03_A_M = $TVPSC_FQ_DTHR_CLC_03_A_M_Base
Set_Function_Table TVPSC_IA_DTHR_CLC_04_LO_A_M = $TVPSC_IA_DTHR_CLC_04_LO_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_CLC_04_LO_A_M = $TVPSC_FQ_DTHR_CLC_04_LO_A_M_Base
Set_Function_Table TVPSC_IA_DTHR_CLC_05_LO_A_M = $TVPSC_IA_DTHR_CLC_05_LO_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_CLC_05_LO_A_M = $TVPSC_FQ_DTHR_CLC_05_LO_A_M_Base
Set_Function_Table TVPSC_IA_DTHR_CLC_04_HI_A_M = $TVPSC_IA_DTHR_CLC_04_HI_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_CLC_04_HI_A_M = $TVPSC_FQ_DTHR_CLC_04_HI_A_M_Base
Set_Function_Table TVPSC_IA_DTHR_CLC_05_HI_A_M = $TVPSC_IA_DTHR_CLC_05_HI_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_CLC_05_HI_A_M = $TVPSC_FQ_DTHR_CLC_05_HI_A_M_Base
Set_Function_Table TVPSC_IA_DTHR_CLC_06_A_M = $TVPSC_IA_DTHR_CLC_06_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_CLC_06_A_M = $TVPSC_FQ_DTHR_CLC_06_A_M_Base
Set_Function_Table TVPSC_IA_DTHR_TCC_A_M = $TVPSC_IA_DTHR_TCC_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_TCC_A_M = $TVPSC_FQ_DTHR_TCC_A_M_Base
Set_Activate

'TRAM Test Switch Timer Reset
Set TVPSC_B_TST_STRT_ALL_S ($TVPSC_B_TST_STRT_ALL_S_Base,0)
Set TVPSC_B_TST_RST_ALL_S ($TVPSC_B_TST_RST_ALL_S_Base,0)

'TRAM Line Pressure Gain Switch Point
Set SAPRC_P_LNP_GR_TYP_MIN_V ($SAPRC_P_LNP_GR_TYP_MIN_V_Base,0)

'Reset OBDII test switch
Set OBDII_TST_SW ($OBDII_TST_SW_Base,0)

'TRAM Master Test Switch
Set TVPSC_B_TST_ENBL_S ($TVPSC_B_TST_ENBL_S_Base,0)

' Set TVPSC_MUL_TCC_GAIN_S ($TVPSC_MUL_TCC_GAIN_S_Base,0)
' Set TVPSC_P_TCC_OFS_S ($TVPSC_P_TCC_OFS_S_Base,0)

'Boost Pressure Tables
Set_Function_Table SAPRC_P_BST_TFT_NE_ELEA_M = $SAPRC_P_BST_TFT_NE_ELEA_M_Base
Set_Function_Table SAPRC_P_BST_TFT_NE_ELEB_M = $SAPRC_P_BST_TFT_NE_ELEB_M_Base
Set_Function_Table SAPRC_P_BST_TFT_NE_ELEC_M = $SAPRC_P_BST_TFT_NE_ELEC_M_Base
Set_Function_Table SAPRC_P_BST_TFT_NE_ELED_M = $SAPRC_P_BST_TFT_NE_ELED_M_Base
'Set_Function_Table SAPRC_P_BST_TFT_NE_ELED_HGAIN_M = $SAPRC_P_BST_TFT_NE_ELED_HGAIN_M_Base
Set_Function_Table SAPRC_P_BST_TFT_NE_ELEE_M = $SAPRC_P_BST_TFT_NE_ELEE_M_Base
'Set_Function_Table SAPRC_P_BST_TFT_NE_ELEE_HGAIN_M = $SAPRC_P_BST_TFT_NE_ELEE_HGAIN_M_Base
Set_Function_Table SAPRC_P_BST_TFT_NE_ELEA_M = $SAPRC_P_BST_TFT_NE_ELEF_M_Base
Set_Activate
Wait (1)

'Boost Time Tables
Set_Function_Table SACOR_TM_BST_BASE_LO_ELEA = $SACOR_TM_BST_BASE_LO_ELEA_Base
Set_Function_Table SACOR_TM_BST_BASE_LO_ELEB = $SACOR_TM_BST_BASE_LO_ELEB_Base
Set_Function_Table SACOR_TM_BST_BASE_LO_ELEC = $SACOR_TM_BST_BASE_LO_ELEC_Base
Set_Function_Table SACOR_TM_BST_BASE_LO_ELED = $SACOR_TM_BST_BASE_LO_ELED_Base
Set_Function_Table SACOR_TM_BST_BASE_LO_ELEE = $SACOR_TM_BST_BASE_LO_ELEE_Base
Set_Function_Table SACOR_TM_BST_BASE_LO_ELEF = $SACOR_TM_BST_BASE_LO_ELEF_Base 
' Set_Function_Table SACOR_TM_BST_BASE_HI_ELEA = $SACOR_TM_BST_BASE_HI_ELEA_Base
' Set_Function_Table SACOR_TM_BST_BASE_HI_ELEB = $SACOR_TM_BST_BASE_HI_ELEB_Base
' Set_Function_Table SACOR_TM_BST_BASE_HI_ELEC = $SACOR_TM_BST_BASE_HI_ELEC_Base 
' Set_Function_Table SACOR_TM_BST_BASE_HI_ELED = $SACOR_TM_BST_BASE_HI_ELED_Base
' Set_Function_Table SACOR_TM_BST_BASE_HI_ELEE = $SACOR_TM_BST_BASE_HI_ELEE_Base
' Set_Function_Table SACOR_TM_BST_BASE_HI_ELEF = $SACOR_TM_BST_BASE_HI_ELEF_Base
Set_Activate

'Short Boost Pressure Tables
Set_Function_Table SAPRC_P_SHORT_BST_ELEA_M = $SAPRC_P_SHORT_BST_ELEA_M_Base
Set_Function_Table SAPRC_P_SHORT_BST_ELEB_M = $SAPRC_P_SHORT_BST_ELEB_M_Base
Set_Function_Table SAPRC_P_SHORT_BST_ELEC_M = $SAPRC_P_SHORT_BST_ELEC_M_Base
Set_Function_Table SAPRC_P_SHORT_BST_ELED_M = $SAPRC_P_SHORT_BST_ELED_M_Base
Set_Function_Table SAPRC_P_SHORT_BST_ELEE_M = $SAPRC_P_SHORT_BST_ELEE_M_Base
Set_Function_Table SAPRC_P_SHORT_BST_ELEF_M = $SAPRC_P_SHORT_BST_ELEF_M_Base
Set_Activate

'Short Boost Time Tables
Set_Function_Table SACOR_TM_SHORT_BST_BASE_ELEA_M = $SACOR_TM_SHORT_BST_BASE_ELEA_M_Base
Set_Function_Table SACOR_TM_SHORT_BST_BASE_ELEA_M = $SACOR_TM_SHORT_BST_BASE_ELEA_M_Base
Set_Function_Table SACOR_TM_SHORT_BST_BASE_ELEA_M = $SACOR_TM_SHORT_BST_BASE_ELEA_M_Base
Set_Function_Table SACOR_TM_SHORT_BST_BASE_ELEA_M = $SACOR_TM_SHORT_BST_BASE_ELEA_M_Base
Set_Function_Table SACOR_TM_SHORT_BST_BASE_ELEA_M = $SACOR_TM_SHORT_BST_BASE_ELEA_M_Base
Set_Function_Table SACOR_TM_SHORT_BST_BASE_ELEA_M = $SACOR_TM_SHORT_BST_BASE_ELEA_M_Base
Set_Activate

'Torque Converter lock schedule
Set RMCSH_NE_MIN_LCK_S ($RMCSH_NE_MIN_LCK_S_Base,0)

'Sport Mode Switches
'Set cVcDi_D_PtDrvMdeReq_sw ($cVcDi_D_PtDrvMdeReq_sw_Base,0)
'Set cVcDi_D_PtDrvMdeReq_db ($cVcDi_D_PtDrvMdeReq_db_Base,0)

Log_Message (PCM TRAM Parameters have been reset to saved base values.)

'Reset TRAM_Set flag
Let $TRAM_Set = 0
Log_Message (TRAM_Set set to 0)

TRAM_Reset_6R_Complete:
End_Sub

'*******************************************************
Sub TRAM_Reset_8F
'*******************************************************
Log_Message (Starting TRAM_Reset_8F subroutine.  TRAM_Set variable is %%$TRAM_Set%%.)

'If TRAM_Set flag is not set, skip reset
If $TRAM_Set = 0 Then Goto TRAM_Reset_8F_Complete:

'Capture engine speed
Let $TCRPM_NE_BAR_AVE2 = TCRPM_NE_BAR_AVE2

'If PCM/ECM has not synchronized, synchronize both modules
If $TCRPM_NE_BAR_AVE2 < -10000
	Gosub PCM_Synchronize
	Gosub ECM_Synchronize
End 

'Close accelerator pedal and reset engine speed test switches
Gosub Reset_Engine_Speed
Gosub Reset_Pedal

'Reset manual gear switches
Set RMSC_D_GR_TYP_SW_S ($RMSC_D_GR_TYP_SW_S_Base,0)
Set RMSC_GR_TYP_CMD_S ($RMSC_GR_TYP_CMD_S_Base,0)

'TRAM Solenoid Modes
Set TVPSC_D_OVRD_CLC_01_S ($TVPSC_D_OVRD_CLC_01_S_Base,0)
Set TVPSC_D_OVRD_CLC_02_S ($TVPSC_D_OVRD_CLC_02_S_Base,0)
Set TVPSC_D_OVRD_CLC_03_S ($TVPSC_D_OVRD_CLC_03_S_Base,0)
Set TVPSC_D_OVRD_CLC_04_S ($TVPSC_D_OVRD_CLC_04_S_Base,0)
Set TVPSC_D_OVRD_CLC_05_S ($TVPSC_D_OVRD_CLC_05_S_Base,0)
Set TVPSC_D_OVRD_CLC_06_S ($TVPSC_D_OVRD_CLC_06_S_Base,0)
Set TVPSC_D_OVRD_LNP_S ($TVPSC_D_OVRD_LNP_S_Base,0)
Set TVPSC_D_OVRD_TCC_S ($TVPSC_D_OVRD_TCC_S_Base,0)

'TRAM Solenoid Time Normalizer
Set_Function_Table TVPSC_TM_TST_CLC_01_N =  $TVPSC_TM_TST_CLC_01_N_Base
Set_Function_Table TVPSC_TM_TST_CLC_02_N = $TVPSC_TM_TST_CLC_02_N_Base
Set_Function_Table TVPSC_TM_TST_CLC_03_N = $TVPSC_TM_TST_CLC_03_N_Base
Set_Function_Table TVPSC_TM_TST_CLC_04_N = $TVPSC_TM_TST_CLC_04_N_Base
Set_Function_Table TVPSC_TM_TST_CLC_05_N = $TVPSC_TM_TST_CLC_05_N_Base
Set_Function_Table TVPSC_TM_TST_CLC_06_N = $TVPSC_TM_TST_CLC_06_N_Base
Set_Function_Table TVPSC_TM_TST_LNP_N = $TVPSC_TM_TST_LNP_N_Base
Set_Function_Table TVPSC_TM_TST_TCC_N = $TVPSC_TM_TST_TCC_N_Base
Set_Activate
Wait (1)

'TRAM Current Override
Set TVPSC_IA_CMD_TST_CLC_01_S ($TVPSC_IA_CMD_TST_CLC_01_S_Base,0)
Set TVPSC_IA_CMD_TST_CLC_02_S ($TVPSC_IA_CMD_TST_CLC_02_S_Base,0)
Set TVPSC_IA_CMD_TST_CLC_03_S ($TVPSC_IA_CMD_TST_CLC_03_S_Base,0)
Set TVPSC_IA_CMD_TST_CLC_04_S ($TVPSC_IA_CMD_TST_CLC_04_S_Base,0)
Set TVPSC_IA_CMD_TST_CLC_05_S ($TVPSC_IA_CMD_TST_CLC_05_S_Base,0)
Set TVPSC_IA_CMD_TST_CLC_06_S ($TVPSC_IA_CMD_TST_CLC_06_S_Base,0)
Set TVPSC_IA_CMD_TST_LNP_S ($TVPSC_IA_CMD_TST_LNP_S_Base,0)
Set TVPSC_IA_CMD_TST_TCC_S ($TVPSC_IA_CMD_TST_TCC_S_Base,0)

'TRAM Current Profile
Set_Function_Table TVPSC_IA_TST_CLC_01_T = $TVPSC_IA_TST_CLC_01_T_Base
Set_Function_Table TVPSC_IA_TST_CLC_02_T = $TVPSC_IA_TST_CLC_01_T_Base
Set_Function_Table TVPSC_IA_TST_CLC_03_T = $TVPSC_IA_TST_CLC_01_T_Base
Set_Function_Table TVPSC_IA_TST_CLC_04_T = $TVPSC_IA_TST_CLC_01_T_Base
Set_Function_Table TVPSC_IA_TST_CLC_05_T = $TVPSC_IA_TST_CLC_01_T_Base
Set_Function_Table TVPSC_IA_TST_CLC_06_T = $TVPSC_IA_TST_CLC_01_T_Base
Set_Function_Table TVPSC_IA_TST_LNP_T = $TVPSC_IA_TST_LNP_T_Base
Set_Function_Table TVPSC_IA_TST_TCC_T = $TVPSC_IA_TST_TCC_T_Base
Set_Activate

'TRAM Pressure Override
Set TVPSC_P_CMD_TST_CLC_01_S ($TVPSC_P_CMD_TST_CLC_01_S_Base,0)
Set TVPSC_P_CMD_TST_CLC_02_S ($TVPSC_P_CMD_TST_CLC_02_S_Base,0)
Set TVPSC_P_CMD_TST_CLC_03_S ($TVPSC_P_CMD_TST_CLC_03_S_Base,0)
Set TVPSC_P_CMD_TST_CLC_04_S ($TVPSC_P_CMD_TST_CLC_04_S_Base,0)
Set TVPSC_P_CMD_TST_CLC_05_S ($TVPSC_P_CMD_TST_CLC_05_S_Base,0)
Set TVPSC_P_CMD_TST_CLC_06_S ($TVPSC_P_CMD_TST_CLC_06_S_Base,0)
Set TVPSC_P_CMD_TST_LNP_S ($TVPSC_P_CMD_TST_LNP_S_Base,0)
Set TVPSC_P_CMD_TST_TCC_S ($TVPSC_P_CMD_TST_TCC_S_Base,0)
Wait (1)

'TRAM Pressure Profile
Set_Function_Table TVPSC_P_TST_CLC_01_T = $TVPSC_P_TST_CLC_01_T_Base
Set_Function_Table TVPSC_P_TST_CLC_02_T = $TVPSC_P_TST_CLC_02_T_Base
Set_Function_Table TVPSC_P_TST_CLC_03_T = $TVPSC_P_TST_CLC_03_T_Base
Set_Function_Table TVPSC_P_TST_CLC_04_T = $TVPSC_P_TST_CLC_04_T_Base
Set_Function_Table TVPSC_P_TST_CLC_05_T = $TVPSC_P_TST_CLC_05_T_Base
Set_Function_Table TVPSC_P_TST_CLC_06_T = $TVPSC_P_TST_CLC_06_T_Base
Set_Function_Table TVPSC_P_TST_LNP_T = $TVPSC_P_TST_LNP_T_Base
Set_Function_Table TVPSC_P_TST_TCC_T = $TVPSC_P_TST_TCC_T_Base
Set_Activate

'TRAM Transfer Functions
Set_Function_Table TVPSC_IA_TRGT_LNP_A_M = $TVPSC_IA_TRGT_LNP_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_01_ONC_A_M = $TVPSC_IA_TRGT_CLC_01_ONC_A_M_Base
Set_Function_Table TVPSC_IA_TRGT_CLC_02_ONC_A_M = $TVPSC_IA_TRGT_CLC_02_ONC_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_03_ONC_A_M = $TVPSC_IA_TRGT_CLC_03_ONC_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_04_M = $TVPSC_IA_TRGT_CLC_04_M_Base
Set_Function_Table TVPSC_IA_TRGT_CLC_05_ONC_A_M = $TVPSC_IA_TRGT_CLC_05_ONC_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_06_ONC_A_M = $TVPSC_IA_TRGT_CLC_06_ONC_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_TCC_A_M = $TVPSC_IA_TRGT_TCC_A_M_Base
Set_Function_Table TVPSC_IA_TRGT_CLC_01_OFG_A_M = $TVPSC_IA_TRGT_CLC_01_OFG_A_M_Base
Set_Function_Table TVPSC_IA_TRGT_CLC_02_OFG_A_M = $TVPSC_IA_TRGT_CLC_02_OFG_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_03_OFG_A_M = $TVPSC_IA_TRGT_CLC_03_OFG_A_M_Base
Set_Function_Table TVPSC_IA_TRGT_CLC_05_OFG_A_M = $TVPSC_IA_TRGT_CLC_05_OFG_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_06_OFG_A_M = $TVPSC_IA_TRGT_CLC_06_OFG_A_M_Base
Set_Activate
Wait (1)

'TRAM Dither Frequencies and Amplitudes
Set_Function_Table TVPSC_IA_DTHR_LNP_A_M = $TVPSC_IA_DTHR_LNP_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_LNP_A_M = $TVPSC_FQ_DTHR_LNP_A_M_Base
Set_Function_Table TVPSC_IA_DTHR_CLC_01_A_M = $TVPSC_IA_DTHR_CLC_01_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_CLC_01_A_M = $TVPSC_FQ_DTHR_CLC_01_A_M_Base
Set_Function_Table TVPSC_IA_DTHR_CLC_02_A_M = $TVPSC_IA_DTHR_CLC_02_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_CLC_02_A_M = $TVPSC_FQ_DTHR_CLC_02_A_M_Base
Set_Function_Table TVPSC_IA_DTHR_CLC_03_A_M = $TVPSC_IA_DTHR_CLC_03_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_CLC_03_A_M = $TVPSC_FQ_DTHR_CLC_03_A_M_Base
Set_Function_Table TVPSC_IA_DTHR_CLC_04_M = $TVPSC_IA_DTHR_CLC_04_M_Base
Set_Function_Table TVPSC_FQ_DTHR_CLC_04_M = $TVPSC_FQ_DTHR_CLC_04_M_Base
Set_Function_Table TVPSC_IA_DTHR_CLC_05_A_M = $TVPSC_IA_DTHR_CLC_05_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_CLC_05_A_M = $TVPSC_FQ_DTHR_CLC_05_A_M_Base
Set_Function_Table TVPSC_IA_DTHR_CLC_06_A_M = $TVPSC_IA_DTHR_CLC_06_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_CLC_06_A_M = $TVPSC_FQ_DTHR_CLC_06_A_M_Base
Set_Function_Table TVPSC_IA_DTHR_TCC_A_M = $TVPSC_IA_DTHR_TCC_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_TCC_A_M = $TVPSC_FQ_DTHR_TCC_A_M_Base
Set_Activate

'Reset OBDII test switch
Set OBDII_TST_SW ($OBDII_TST_SW_Base,0)

'TRAM Test Switch Timer Reset
Set TVPSC_B_TST_STRT_ALL_S (0,0)
Set TVPSC_B_TST_RST_ALL_S (0,0)

'TRAM Line Pressure Gain Switch Point
Set SAPRC_P_LNP_GR_TYP_MIN_V ($SAPRC_P_LNP_GR_TYP_MIN_V_Base,0)

'TRAM Master Test Switch
Set TVPSC_B_TST_ENBL_S (0,0)

'TRAM Torque Converter Gain and offset
' Set TVPSC_MUL_TCC_GAIN_S ($TVPSC_MUL_TCC_GAIN_S_Base,0)
' Set TVPSC_P_TCC_OFS_S ($TVPSC_P_TCC_OFS_S_Base,0)

'Boost Pressure Tables
Set_Function_Table SAPRC_P_BST_TFT_NE_ELEA_M = $SAPRC_P_BST_TFT_NE_ELEA_M_Base
Set_Function_Table SAPRC_P_BST_TFT_NE_ELEB_M = $SAPRC_P_BST_TFT_NE_ELEB_M_Base
Set_Function_Table SAPRC_P_BST_TFT_NE_ELEC_M = $SAPRC_P_BST_TFT_NE_ELEC_M_Base
Set_Function_Table SAPRC_P_BST_TFT_NE_ELED_M = $SAPRC_P_BST_TFT_NE_ELED_M_Base
'Set_Function_Table SAPRC_P_BST_TFT_NE_ELED_HGAIN_M = $SAPRC_P_BST_TFT_NE_ELED_HGAIN_M_Base
Set_Function_Table SAPRC_P_BST_TFT_NE_ELEE_M = $SAPRC_P_BST_TFT_NE_ELEE_M_Base
'Set_Function_Table SAPRC_P_BST_TFT_NE_ELEE_HGAIN_M = $SAPRC_P_BST_TFT_NE_ELEE_HGAIN_M_Base
Set_Function_Table SAPRC_P_BST_TFT_NE_ELEA_M = $SAPRC_P_BST_TFT_NE_ELEF_M_Base
Set_Activate
Wait (1)

'Short Boost Pressure Tables
Set_Function_Table SAPRC_P_SHORT_BST_ELEA_M = $SAPRC_P_SHORT_BST_ELEA_M_Base
Set_Function_Table SAPRC_P_SHORT_BST_ELEB_M = $SAPRC_P_SHORT_BST_ELEB_M_Base
Set_Function_Table SAPRC_P_SHORT_BST_ELEC_M = $SAPRC_P_SHORT_BST_ELEC_M_Base
Set_Function_Table SAPRC_P_SHORT_BST_ELED_M = $SAPRC_P_SHORT_BST_ELED_M_Base
Set_Function_Table SAPRC_P_SHORT_BST_ELEE_M = $SAPRC_P_SHORT_BST_ELEE_M_Base
Set_Function_Table SAPRC_P_SHORT_BST_ELEF_M = $SAPRC_P_SHORT_BST_ELEF_M_Base
Set_Activate

'Boost Time Tables
Set_Function_Table SACOR_TM_BST_BASE_LO_ELEA = $SACOR_TM_BST_BASE_LO_ELEA_Base
Set_Function_Table SACOR_TM_BST_BASE_LO_ELEB = $SACOR_TM_BST_BASE_LO_ELEB_Base
Set_Function_Table SACOR_TM_BST_BASE_LO_ELEC = $SACOR_TM_BST_BASE_LO_ELEC_Base
Set_Function_Table SACOR_TM_BST_BASE_LO_ELED = $SACOR_TM_BST_BASE_LO_ELED_Base
Set_Function_Table SACOR_TM_BST_BASE_LO_ELEE = $SACOR_TM_BST_BASE_LO_ELEE_Base
Set_Function_Table SACOR_TM_BST_BASE_LO_ELEF = $SACOR_TM_BST_BASE_LO_ELEF_Base 
' Set_Function_Table SACOR_TM_BST_BASE_HI_ELEA = $SACOR_TM_BST_BASE_HI_ELEA_Base
' Set_Function_Table SACOR_TM_BST_BASE_HI_ELEB = $SACOR_TM_BST_BASE_HI_ELEB_Base
' Set_Function_Table SACOR_TM_BST_BASE_HI_ELEC = $SACOR_TM_BST_BASE_HI_ELEC_Base 
' Set_Function_Table SACOR_TM_BST_BASE_HI_ELED = $SACOR_TM_BST_BASE_HI_ELED_Base
' Set_Function_Table SACOR_TM_BST_BASE_HI_ELEE = $SACOR_TM_BST_BASE_HI_ELEE_Base
' Set_Function_Table SACOR_TM_BST_BASE_HI_ELEF = $SACOR_TM_BST_BASE_HI_ELEF_Base
Set_Activate

'Short Boost Time Tables
Set_Function_Table SACOR_TM_SHORT_BST_BASE_ELEA_M = $SACOR_TM_SHORT_BST_BASE_ELEA_M_Base
Set_Function_Table SACOR_TM_SHORT_BST_BASE_ELEB_M = $SACOR_TM_SHORT_BST_BASE_ELEB_M_Base
Set_Function_Table SACOR_TM_SHORT_BST_BASE_ELEC_M = $SACOR_TM_SHORT_BST_BASE_ELEC_M_Base
Set_Function_Table SACOR_TM_SHORT_BST_BASE_ELED_M = $SACOR_TM_SHORT_BST_BASE_ELED_M_Base
Set_Function_Table SACOR_TM_SHORT_BST_BASE_ELEE_M = $SACOR_TM_SHORT_BST_BASE_ELEE_M_Base
Set_Function_Table SACOR_TM_SHORT_BST_BASE_ELEF_M = $SACOR_TM_SHORT_BST_BASE_ELEF_M_Base
Set_Activate

'Torque Converter lock schedule
Set RMCSH_NE_MIN_LCK_S ($RMCSH_NE_MIN_LCK_S_Base,0)

'Sport Mode Switches
Set cVcDi_D_PtDrvMdeReq_sw ($cVcDi_D_PtDrvMdeReq_sw_Base,0)
Set cVcDi_D_PtDrvMdeReq_db ($cVcDi_D_PtDrvMdeReq_db_Base,0)

Log_Message (PCM TRAM Parameters have been reset to saved base values.)

'Reset TRAM_Set flag
Let $TRAM_Set = 0
Log_Message (TRAM_Set set to 0)

TRAM_Reset_8F_Complete:

End_Sub

'*******************************************************
Sub TRAM_Reset_10R
'*******************************************************
Log_Message (Starting TRAM_Reset_10R subroutine.  TRAM_Set variable is %%$TRAM_Set%%.)
If $TRAM_Set = 0 Then Goto TRAM_Reset_10R_Complete:

'Synchronize ECM and PCM
Gosub PCM_Synchronize
Gosub ECM_Synchronize

'Close accelerator pedal and reset engine speed test switches
Gosub Reset_Engine_Speed
Gosub Reset_Pedal

'Reset OBDII test switch
Set OBDII_TST_SW ($OBDII_TST_SW_Base,0)

'Reset manual gear override switches
Set RMSC_D_GR_TYP_SW_S ($RMSC_D_GR_TYP_SW_S_Base,0)
Set RMSC_GR_TYP_CMD_S ($RMSC_GR_TYP_CMD_S_Base,0)

'TRAM Solenoid Override codes
Set TVPSC_D_OVRD_CLC_01_S ($TVPSC_D_OVRD_CLC_01_S_Base,0)
Set TVPSC_D_OVRD_CLC_02_S ($TVPSC_D_OVRD_CLC_02_S_Base,0)
Set TVPSC_D_OVRD_CLC_03_S ($TVPSC_D_OVRD_CLC_03_S_Base,0)
Set TVPSC_D_OVRD_CLC_04_S ($TVPSC_D_OVRD_CLC_04_S_Base,0)
Set TVPSC_D_OVRD_CLC_05_S ($TVPSC_D_OVRD_CLC_05_S_Base,0)
Set TVPSC_D_OVRD_CLC_06_S ($TVPSC_D_OVRD_CLC_06_S_Base,0)
Set TVPSC_D_OVRD_LNP_S ($TVPSC_D_OVRD_LNP_S_Base,0)
Set TVPSC_D_OVRD_TCC_S ($TVPSC_D_OVRD_TCC_S_Base,0)

'TRAM Solenoid Time Normalizer
Set_Function_Table TVPSC_TM_TST_CLC_01_N =  $TVPSC_TM_TST_CLC_01_N_Base
Set_Function_Table TVPSC_TM_TST_CLC_02_N = $TVPSC_TM_TST_CLC_02_N_Base
Set_Function_Table TVPSC_TM_TST_CLC_03_N = $TVPSC_TM_TST_CLC_03_N_Base
Set_Function_Table TVPSC_TM_TST_CLC_04_N = $TVPSC_TM_TST_CLC_04_N_Base
Set_Function_Table TVPSC_TM_TST_CLC_05_N = $TVPSC_TM_TST_CLC_05_N_Base
Set_Function_Table TVPSC_TM_TST_CLC_06_N = $TVPSC_TM_TST_CLC_06_N_Base
Set_Function_Table TVPSC_TM_TST_LNP_N = $TVPSC_TM_TST_LNP_N_Base
Set_Function_Table TVPSC_TM_TST_TCC_N = $TVPSC_TM_TST_TCC_N_Base
Set_Activate

'TRAM Current Override
Set TVPSC_IA_CMD_TST_CLC_01_S ($TVPSC_IA_CMD_TST_CLC_01_S_Base,0)
Set TVPSC_IA_CMD_TST_CLC_02_S ($TVPSC_IA_CMD_TST_CLC_02_S_Base,0)
Set TVPSC_IA_CMD_TST_CLC_03_S ($TVPSC_IA_CMD_TST_CLC_03_S_Base,0)
Set TVPSC_IA_CMD_TST_CLC_04_S ($TVPSC_IA_CMD_TST_CLC_04_S_Base,0)
Set TVPSC_IA_CMD_TST_CLC_05_S ($TVPSC_IA_CMD_TST_CLC_05_S_Base,0)
Set TVPSC_IA_CMD_TST_CLC_06_S ($TVPSC_IA_CMD_TST_CLC_06_S_Base,0)
Set TVPSC_IA_CMD_TST_LNP_S ($TVPSC_IA_CMD_TST_LNP_S_Base,0)
Set TVPSC_IA_CMD_TST_TCC_S ($TVPSC_IA_CMD_TST_TCC_S_Base,0)

'TRAM Current Profile
Set_Function_Table TVPSC_IA_TST_CLC_01_T = $TVPSC_IA_TST_CLC_01_T_Base
Set_Function_Table TVPSC_IA_TST_CLC_02_T = $TVPSC_IA_TST_CLC_02_T_Base
Set_Function_Table TVPSC_IA_TST_CLC_03_T = $TVPSC_IA_TST_CLC_03_T_Base
Set_Function_Table TVPSC_IA_TST_CLC_04_T = $TVPSC_IA_TST_CLC_04_T_Base
Set_Function_Table TVPSC_IA_TST_CLC_05_T = $TVPSC_IA_TST_CLC_05_T_Base
Set_Function_Table TVPSC_IA_TST_CLC_06_T = $TVPSC_IA_TST_CLC_06_T_Base
Set_Function_Table TVPSC_IA_TST_LNP_T = $TVPSC_IA_TST_LNP_T_Base
Set_Function_Table TVPSC_IA_TST_TCC_T = $TVPSC_IA_TST_TCC_T_Base
Set_Activate

'TRAM Pressure Override
Set TVPSC_P_CMD_TST_CLC_01_S ($TVPSC_P_CMD_TST_CLC_01_S_Base,0)
Set TVPSC_P_CMD_TST_CLC_02_S ($TVPSC_P_CMD_TST_CLC_02_S_Base,0)
Set TVPSC_P_CMD_TST_CLC_03_S ($TVPSC_P_CMD_TST_CLC_03_S_Base,0)
Set TVPSC_P_CMD_TST_CLC_04_S ($TVPSC_P_CMD_TST_CLC_04_S_Base,0)
Set TVPSC_P_CMD_TST_CLC_05_S ($TVPSC_P_CMD_TST_CLC_05_S_Base,0)
Set TVPSC_P_CMD_TST_CLC_06_S ($TVPSC_P_CMD_TST_CLC_06_S_Base,0)
Set TVPSC_P_CMD_TST_LNP_S ($TVPSC_P_CMD_TST_LNP_S_Base,0)
Set TVPSC_P_CMD_TST_TCC_S ($TVPSC_P_CMD_TST_TCC_S_Base,0)

'TRAM Pressure Profile
Set_Function_Table TVPSC_P_TST_CLC_01_T = $TVPSC_P_TST_CLC_01_T_Base
Set_Function_Table TVPSC_P_TST_CLC_02_T = $TVPSC_P_TST_CLC_02_T_Base
Set_Function_Table TVPSC_P_TST_CLC_03_T = $TVPSC_P_TST_CLC_03_T_Base
Set_Function_Table TVPSC_P_TST_CLC_04_T = $TVPSC_P_TST_CLC_04_T_Base
Set_Function_Table TVPSC_P_TST_CLC_05_T = $TVPSC_P_TST_CLC_05_T_Base
Set_Function_Table TVPSC_P_TST_CLC_06_T = $TVPSC_P_TST_CLC_06_T_Base
Set_Function_Table TVPSC_P_TST_LNP_T = $TVPSC_P_TST_LNP_T_Base
Set_Function_Table TVPSC_P_TST_TCC_T = $TVPSC_P_TST_TCC_T_Base
Set_Activate

'TRAM Transfer Functions
Set_Function_Table TVPSC_IA_TRGT_LNP_A_M = $TVPSC_IA_TRGT_LNP_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_01_ONC_A_M = $TVPSC_IA_TRGT_CLC_01_ONC_A_M_Base
Set_Function_Table TVPSC_IA_TRGT_CLC_02_ONC_A_M = $TVPSC_IA_TRGT_CLC_02_ONC_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_03_ONC_A_M = $TVPSC_IA_TRGT_CLC_03_ONC_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_04_ONC_LO_A_M = $TVPSC_IA_TRGT_CLC_04_ONC_LO_A_M_Base
Set_Function_Table TVPSC_IA_TRGT_CLC_04_ONC_HI_A_M = $TVPSC_IA_TRGT_CLC_04_ONC_HI_A_M_Base
Set_Function_Table TVPSC_IA_TRGT_CLC_05_ONC_LO_A_M = $TVPSC_IA_TRGT_CLC_05_ONC_LO_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_05_ONC_HI_A_M = $TVPSC_IA_TRGT_CLC_05_ONC_HI_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_06_ONC_A_M = $TVPSC_IA_TRGT_CLC_06_ONC_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_TCC_A_M = $TVPSC_IA_TRGT_TCC_A_M_Base
Set_Function_Table TVPSC_IA_TRGT_CLC_01_OFG_A_M = $TVPSC_IA_TRGT_CLC_01_OFG_A_M_Base
Set_Function_Table TVPSC_IA_TRGT_CLC_02_OFG_A_M = $TVPSC_IA_TRGT_CLC_02_OFG_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_03_OFG_A_M = $TVPSC_IA_TRGT_CLC_03_OFG_A_M_Base
Set_Function_Table TVPSC_IA_TRGT_CLC_04_OFG_LO_A_M = $TVPSC_IA_TRGT_CLC_04_OFG_LO_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_04_OFG_HI_A_M = $TVPSC_IA_TRGT_CLC_04_OFG_HI_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_05_OFG_LO_A_M = $TVPSC_IA_TRGT_CLC_05_OFG_LO_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_05_OFG_HI_A_M = $TVPSC_IA_TRGT_CLC_05_OFG_HI_A_M_Base 
Set_Function_Table TVPSC_IA_TRGT_CLC_06_OFG_A_M = $TVPSC_IA_TRGT_CLC_06_OFG_A_M_Base
Set_Activate
Wait (1)

'TRAM Dither Frequencies and Amplitudes
Set_Function_Table TVPSC_IA_DTHR_LNP_A_M = $TVPSC_IA_DTHR_LNP_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_LNP_A_M = $TVPSC_FQ_DTHR_LNP_A_M_Base
Set_Function_Table TVPSC_IA_DTHR_CLC_01_A_M = $TVPSC_IA_DTHR_CLC_01_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_CLC_01_A_M = $TVPSC_FQ_DTHR_CLC_01_A_M_Base
Set_Function_Table TVPSC_IA_DTHR_CLC_02_A_M = $TVPSC_IA_DTHR_CLC_02_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_CLC_02_A_M = $TVPSC_FQ_DTHR_CLC_02_A_M_Base
Set_Function_Table TVPSC_IA_DTHR_CLC_03_A_M = $TVPSC_IA_DTHR_CLC_03_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_CLC_03_A_M = $TVPSC_FQ_DTHR_CLC_03_A_M_Base
Set_Function_Table TVPSC_IA_DTHR_CLC_04_LO_A_M = $TVPSC_IA_DTHR_CLC_04_LO_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_CLC_04_LO_A_M = $TVPSC_FQ_DTHR_CLC_04_LO_A_M_Base
Set_Function_Table TVPSC_IA_DTHR_CLC_05_LO_A_M = $TVPSC_IA_DTHR_CLC_05_LO_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_CLC_05_LO_A_M = $TVPSC_FQ_DTHR_CLC_05_LO_A_M_Base
Set_Function_Table TVPSC_IA_DTHR_CLC_04_HI_A_M = $TVPSC_IA_DTHR_CLC_04_HI_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_CLC_04_HI_A_M = $TVPSC_FQ_DTHR_CLC_04_HI_A_M_Base
Set_Function_Table TVPSC_IA_DTHR_CLC_05_HI_A_M = $TVPSC_IA_DTHR_CLC_05_HI_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_CLC_05_HI_A_M = $TVPSC_FQ_DTHR_CLC_05_HI_A_M_Base
Set_Function_Table TVPSC_IA_DTHR_CLC_06_A_M = $TVPSC_IA_DTHR_CLC_06_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_CLC_06_A_M = $TVPSC_FQ_DTHR_CLC_06_A_M_Base
Set_Function_Table TVPSC_IA_DTHR_TCC_A_M = $TVPSC_IA_DTHR_TCC_A_M_Base
Set_Function_Table TVPSC_FQ_DTHR_TCC_A_M = $TVPSC_FQ_DTHR_TCC_A_M_Base
Set_Activate

'TRAM Test Switch Timer Reset
Set TVPSC_B_TST_STRT_ALL_S ($TVPSC_B_TST_STRT_ALL_S_Base,0)
Set TVPSC_B_TST_RST_ALL_S ($TVPSC_B_TST_RST_ALL_S_Base,0)

'TRAM Line Pressure Gain Switch Point
Set SAPRC_P_LNP_GR_TYP_MIN_V ($SAPRC_P_LNP_GR_TYP_MIN_V_Base,0)

'TRAM Master Test Switch
Set TVPSC_B_TST_ENBL_S ($TVPSC_B_TST_ENBL_S_Base,0)

' Set TVPSC_MUL_TCC_GAIN_S ($TVPSC_MUL_TCC_GAIN_S_Base,0)
' Set TVPSC_P_TCC_OFS_S ($TVPSC_P_TCC_OFS_S_Base,0)

'Boost Pressure Tables
Set_Function_Table SAPRC_P_BST_TFT_NE_ELEA_M = $SAPRC_P_BST_TFT_NE_ELEA_M_Base
Set_Function_Table SAPRC_P_BST_TFT_NE_ELEB_M = $SAPRC_P_BST_TFT_NE_ELEB_M_Base
Set_Function_Table SAPRC_P_BST_TFT_NE_ELEC_M = $SAPRC_P_BST_TFT_NE_ELEC_M_Base
Set_Function_Table SAPRC_P_BST_TFT_NE_ELED_M = $SAPRC_P_BST_TFT_NE_ELED_M_Base
'Set_Function_Table SAPRC_P_BST_TFT_NE_ELED_HGAIN_M = $SAPRC_P_BST_TFT_NE_ELED_HGAIN_M_Base
Set_Function_Table SAPRC_P_BST_TFT_NE_ELEE_M = $SAPRC_P_BST_TFT_NE_ELEE_M_Base
'Set_Function_Table SAPRC_P_BST_TFT_NE_ELEE_HGAIN_M = $SAPRC_P_BST_TFT_NE_ELEE_HGAIN_M_Base
Set_Function_Table SAPRC_P_BST_TFT_NE_ELEA_M = $SAPRC_P_BST_TFT_NE_ELEF_M_Base
Set_Activate
Wait (1)

'Boost Time Tables
Set_Function_Table SACOR_TM_BST_BASE_LO_ELEA = $SACOR_TM_BST_BASE_LO_ELEA_Base
Set_Function_Table SACOR_TM_BST_BASE_LO_ELEB = $SACOR_TM_BST_BASE_LO_ELEB_Base
Set_Function_Table SACOR_TM_BST_BASE_LO_ELEC = $SACOR_TM_BST_BASE_LO_ELEC_Base
Set_Function_Table SACOR_TM_BST_BASE_LO_ELED = $SACOR_TM_BST_BASE_LO_ELED_Base
Set_Function_Table SACOR_TM_BST_BASE_LO_ELEE = $SACOR_TM_BST_BASE_LO_ELEE_Base
Set_Function_Table SACOR_TM_BST_BASE_HI_ELED = $SACOR_TM_BST_BASE_HI_ELED_Base
Set_Function_Table SACOR_TM_BST_BASE_HI_ELEE = $SACOR_TM_BST_BASE_HI_ELEE_Base
Set_Function_Table SACOR_TM_BST_BASE_LO_ELEF = $SACOR_TM_BST_BASE_LO_ELEF_Base 
' Set_Function_Table SACOR_TM_BST_BASE_HI_ELEA = $SACOR_TM_BST_BASE_HI_ELEA_Base
' Set_Function_Table SACOR_TM_BST_BASE_HI_ELEB = $SACOR_TM_BST_BASE_HI_ELEB_Base
' Set_Function_Table SACOR_TM_BST_BASE_HI_ELEC = $SACOR_TM_BST_BASE_HI_ELEC_Base 
' Set_Function_Table SACOR_TM_BST_BASE_HI_ELED = $SACOR_TM_BST_BASE_HI_ELED_Base
' Set_Function_Table SACOR_TM_BST_BASE_HI_ELEE = $SACOR_TM_BST_BASE_HI_ELEE_Base
' Set_Function_Table SACOR_TM_BST_BASE_HI_ELEF = $SACOR_TM_BST_BASE_HI_ELEF_Base
Set_Activate

'Short Boost Pressure Tables
Set_Function_Table SAPRC_P_SHORT_BST_ELEA_M = $SAPRC_P_SHORT_BST_ELEA_M_Base
Set_Function_Table SAPRC_P_SHORT_BST_ELEB_M = $SAPRC_P_SHORT_BST_ELEB_M_Base
Set_Function_Table SAPRC_P_SHORT_BST_ELEC_M = $SAPRC_P_SHORT_BST_ELEC_M_Base
Set_Function_Table SAPRC_P_SHORT_BST_ELED_M = $SAPRC_P_SHORT_BST_ELED_M_Base
Set_Function_Table SAPRC_P_SHORT_BST_ELEE_M = $SAPRC_P_SHORT_BST_ELEE_M_Base
Set_Function_Table SAPRC_P_SHORT_BST_ELEF_M = $SAPRC_P_SHORT_BST_ELEF_M_Base
Set_Activate

'Short Boost Time Tables
Set_Function_Table SACOR_TM_SHORT_BST_BASE_ELEA_M = $SACOR_TM_SHORT_BST_BASE_ELEA_M_Base
Set_Function_Table SACOR_TM_SHORT_BST_BASE_ELEA_M = $SACOR_TM_SHORT_BST_BASE_ELEA_M_Base
Set_Function_Table SACOR_TM_SHORT_BST_BASE_ELEA_M = $SACOR_TM_SHORT_BST_BASE_ELEA_M_Base
Set_Function_Table SACOR_TM_SHORT_BST_BASE_ELEA_M = $SACOR_TM_SHORT_BST_BASE_ELEA_M_Base
Set_Function_Table SACOR_TM_SHORT_BST_BASE_ELEA_M = $SACOR_TM_SHORT_BST_BASE_ELEA_M_Base
Set_Function_Table SACOR_TM_SHORT_BST_BASE_ELEA_M = $SACOR_TM_SHORT_BST_BASE_ELEA_M_Base
Set_Activate

'Sport Mode Switches
'Set cVcDi_D_PtDrvMdeReq_sw ($cVcDi_D_PtDrvMdeReq_sw_Base,0)
'Set cVcDi_D_PtDrvMdeReq_db ($cVcDi_D_PtDrvMdeReq_db_Base,0)

'Torque Converter lock schedule
Set RMCSH_NE_MIN_LCK_S ($RMCSH_NE_MIN_LCK_S_Base,0)

Log_Message (PCM TRAM Parameters have been reset to saved base values.)

'Reset TRAM_Set flag
Let $TRAM_Set = 0
Log_Message (TRAM_Set set to 0)

TRAM_Reset_10R_Complete:
End_Sub

'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Monitor Control_Monitors
'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

'Update heartbeat

'Establish heartbeat update time
Let $PC_Autotest_Heartbeat_Update_Period = 10

'If enabled, update heartbeat when timer exceeds limit
If $PC_Eng_And_Cell_Shutdown_Enable = 1
	'Update timer
	Let $Elapsed_Autotest_Heartbeat_Update_Time = Timer - $Last_Autotest_Heartbeat_Update_Time
	'Update heartbeat when timer exceeds time limit
	If $Elapsed_Autotest_Heartbeat_Update_Time > $PC_Autotest_Heartbeat_Update_Period
		Gosub Update_Autotest_Heartbeat
	End
End

'Check Caltool Test Running
If $Desktop_Mode = 0
	'Capture Caltool Priority value
	Let $Stored_Caltool_Priority = Caltool_Priority
	'An Adacs alarm will set caltool priority to a value other than 3
	If $Stored_Caltool_Priority ~= 3
		Pause_Off
		Log_Message (!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!)
		Log_Message (THIS TEST WAS TERMINATED!!!)
		Log_Message (The Caltool Test In ADACS IS Not Running!)
		Log_Message (If Appropriate, Please Review ADACS Log Messages and AutoTest Flight Recorder For Cause Of Shutdown.)
		Log_Message (Please Ensure That The Caltool Test On ADACS Is Running Before Clicking "Start Test" In AutoTEST.)
		Log_Message (!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!)
		'Send text message
		Let !Text_Message = Caltool is not running. Terminating Test.
		Gosub Send_Text_Message
		'Terminate test
		Gosub Terminate_Test
	End
End

End_Monitor

'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Monitor dSPACE_Run_Request
'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

If $Desktop_Mode = 0
	'Capture Autotest run request feedback
	Let $ATfbk_runreq = ATfbk_runreq
	'If run request feedback is not 1, terminate test
	If $ATfbk_runreq ~= 1
		Log_Message (Unconfirmed loss of communication with dSPACE. ATfbk_runreq is %%$ATfbk_runreq%%.)
		Wait (5)
		Let $ATfbk_runreq_Confirm = ATfbk_runreq
		If $ATfbk_runreq_Confirm ~= 1
			Pause_Off
			Log_Message (Lost Communication with dSPACE. ATfbk_runreq is %%$ATfbk_runreq%%. ATfbk_runreq_Confirm is %%$ATfbk_runreq_Confirm%%.)
			Log_Message (******************************************************)
			Log_Message (Terminating test.)
			Log_Message (******************************************************)		
			Log_Message (If Appropriate, Please Review ADACS Log Messages and AutoTest Flight Recorder For Cause Of Shutdown.)
			'Send text message
			Let !Text_Message = Lost Communication with dSPACE. Terminating Test. ATfbk_runreq is %%$ATfbk_runreq%%. ATfbk_runreq_Confirm is %%$ATfbk_runreq_Confirm%%. 
			Gosub Send_Text_Message
			'Terminate test
			Gosub Terminate_Test
		End	
	End
End

End_Monitor

'********************************************************************************************
Sub Run_Request
'********************************************************************************************
Log_Message (Running Run_Request subroutine)

'Initialize Safe Values
Set DynoBrake_Set (100,0)
Log_Message (DynoBrake_Set to 100)
Set RoadGrade_Set (0,0)
Set Pedal_Position_Cmd (0,0)
Set PRNDL_cmd (0,0)
Set ATcmd.runreq (1,0)

'Initialize timer
Let $Elapsed_Run_Request_Time = 0
Let $Run_Request_Start_Time = Timer
Let $Run_Request_Time_Limit = 20

'Start run request control loop
Do
	'Update timer
	Let $Elapsed_Run_Request_Time = Timer - $Run_Request_Start_Time
	'If timer exceeds time limit, terminate test
	If $Elapsed_Run_Request_Time > $Run_Request_Time_Limit
		Log_Message (Run Request Feedback not received. ATfbk_runreq is %%$ATfbk_runreq%%.)
		Log_Message (******************************************************)
		Log_Message (Terminating test.)
		Log_Message (******************************************************)
		Screen_Message (Yellow,Run Request Feedback not received.)
		Let !Text_Message = Run Request Feedback not received. ATfbk_runreq is %%$ATfbk_runreq%%. Terminating Test.
		Gosub Send_Text_Message
		Gosub Terminate_Test
	End
	'Capture run request feedback
	Let $ATfbk_runreq = ATfbk_runreq
	'If feedback is ON, exit loop
	If $ATfbk_runreq = 1 Then Goto Run_Request_Complete:
	
Loop 

Run_Request_Complete:

End_Sub
'********************************************************************************************
Sub Activate_PLC
'********************************************************************************************
Log_Message (Beginning Activate_PLC subroutine)

'For HIL dynos, skip activating PLC
If $HIL_Flag = 1 Then Goto End_Activate_PLC:

'If test has terminated, skip activating PLC
If $Terminate_Test_Flag = 1 Then Goto End_Activate_PLC:

'Turn on Read Only Screen

'Capture Read-Only feedback
Let $plc_screen_ena_fbk = plc_screen_ena_fbk
'If read-only is activated, skip turning on read-only screen
If $plc_screen_ena_fbk = 1 Then	Goto PLC_ReadOnly_Set:

Screen_Message (Green, Setting PLC to read only screen...)

'Set Read-Only screen on
Set PLC_READONLY_SCREEN (1,0)

'Initialize timer
Let $Elapsed_Read_Only_Time = 0
Let $Read_Only_Start_Time = Timer
Let $Read_Only_Time_Limit = 15

Log_Message (Setting PLC Auto Start Sequence to ON.)

'Start Read-Only screen control loop
Do
	Screen_Message (Green, Enabling Fuel, Exhaust Fan, and PLC control)
	'Update timer
	Let $Elapsed_Read_Only_Time = Timer - $Read_Only_Start_Time
	'If timer exceeds time limit, terminate test
	If $Elapsed_Read_Only_Time > $Read_Only_Time_Limit
		Log_Message (Unable to set PLC screen to read-only.)
		Log_Message (******************************************************)
		Log_Message (Terminating test.)
		Log_Message (******************************************************)	
		'Send text message
		Let !Text_Message = Unable to set PLC screen to read-only. Terminating Test.
		Gosub Send_Text_Message
		'Terminate test
		Gosub Terminate_Test
 	End	
	'Capture read-only screen feedback
	Let $plc_screen_ena_fbk = plc_screen_ena_fbk
	'If read-only is on, exit loop
	If $plc_screen_ena_fbk = 1
		Log_Message (PLC Read-Only Screen activated. plc_screen_ena_fbk is %%$plc_screen_ena_fbk,0D%%. Elapsed_Read_Only_Time is %%$Elapsed_Read_Only_Time,1D%% seconds.)
		Goto PLC_ReadOnly_Set:
	End
Loop
PLC_ReadOnly_Set:

'Turn on Exhaust Fan

'Capture exhaust fan feedback
Let $plc_exhaust_fan_on_fbk = plc_exhaust_fan_on_fbk

'If exhaust fan is already on, skip turning on exhaust fan
If $plc_exhaust_fan_on_fbk = 1 Then Goto Exhaust_Fan_On:

Screen_Message (Yellow, Turning on exhaust fan...)

'Turn on Exhaust Fan
Set PLC_EXHAUST_FAN_ON (1,0)

'Initialize timer
Let $Elapsed_Exhaust_Fan_On_Time = 0
Let $Exhaust_Fan_On_Start_Time = Timer
Let $Exhaust_Fan_Time_Limit = 30

'Start exhaust fan control loop
Do
	'Update timer
	Let $Elapsed_Exhaust_Fan_On_Time = Timer - $Exhaust_Fan_On_Start_Time
	'If timer exceeds time limit, terminate test
	If $Elapsed_Exhaust_Fan_On_Time > 30
		Log_Message (Unable to turn exhaust fan on.)
		Log_Message (******************************************************)
		Log_Message (Terminating test.)
		Log_Message (******************************************************)
		Let !Text_Message = Unable to turn exhaust fan on. Terminating Test.
		Gosub Send_Text_Message
		Gosub Terminate_Test
	End	
	'Capture exhaust fan feedback
	Let $plc_exhaust_fan_on_fbk = plc_exhaust_fan_on_fbk
	'If exhaust fan is on, exit loop
	If $plc_exhaust_fan_on_fbk = 1
		Log_Message (Exhaust fan on. plc_exhaust_fan_on_fbk is %%$plc_exhaust_fan_on_fbk,0D%%. Elapsed_Exhaust_Fan_On_Time is %%$Elapsed_Exhaust_Fan_On_Time,1D%% seconds.)
		Screen_Message (Green, Exhaust fan is on.)
		Goto Exhaust_Fan_On:
	Else
		Wait (2)
	End	
	Screen_Message (Turning on Exhaust Fan)
Loop
Exhaust_Fan_On:

'Turn on Fuel System

'Capture fuel-on feedback
Let $plc_fuel_on_fbk = plc_fuel_on_fbk

'If fuel is on, skip turning fuel on
If $plc_fuel_on_fbk = 1 Then Goto Fuel_On:
Screen_Message (Yellow, Turning on fuel...)

'Turn fuel on
Set PLC_FUEL_ON (1,0)

'Initialize timer
Let $Elapsed_Fuel_On_Time = 0
Let $Fuel_On_Start_Time = Timer
Let $Fuel_On_Time_Limit = 30

'Start Fuel On control loop
Do
	'Update timer
	Let $Elapsed_Fuel_On_Time = Timer - $Fuel_On_Start_Time
	'If timer exceeds time limit, terminate test
	If $Elapsed_Fuel_On_Time > 30
		Log_Message (Unable to turn fuel system on.)
		Log_Message (******************************************************)
		Log_Message (Terminating test.)
		Log_Message (******************************************************)
		Let !Text_Message = Unable to turn fuel system on. Terminating Test.
		Gosub Send_Text_Message
		Gosub Terminate_Test
	End	
	'Capture Fuel_On feedback
	Let $plc_fuel_on_fbk = plc_fuel_on_fbk
	'If fuel is on, exit loop
	If $plc_fuel_on_fbk = 1 
		Log_Message (PLC Fuel on. plc_fuel_on_fbk is %%$plc_fuel_on_fbk,0D%%. Elapsed_Fuel_On_Time is %%$Elapsed_Fuel_On_Time,1D%% seconds.)
		Screen_Message (Green, Fuel is on.)
		Goto Fuel_On:
	End	
	Screen_Message (Turning on Fuel)
Loop
Fuel_On:

'Turn on Oil Pump for Dearborn Dyno Cell 6G
Goto Oil_Pump_On:

'Capture Oil Pump feedback
Let $plc_oil_pump_fbk = plc_oil_pump_fbk

'If oil pump is on, skip turning oil pump on 
If $plc_oil_pump_fbk = 1 Then Goto Oil_Pump_On:
Screen_Message (Yellow, Turning on oil pump...)

'Turn on Oil Pump
Set PLC_OIL_PUMP (1,0)

'Comment this line when running in 6G:
'_________________________
Goto Oil_Pump_On:
'_________________________

'Initialize timer
Let $Elapsed_Oil_Pump_On_Time = 0
Let $Oil_Pump_On_Start_Time = Timer
Let $Oil_Pump_Time_Limit = 30

'Start Oil Pump control loop
Do
	'Update timer
	Let $Elapsed_Oil_Pump_On_Time = Timer - $Oil_Pump_On_Start_Time
	'If timer exceeds time limit, terminate test
	If $Elapsed_Oil_Pump_On_Time > $Oil_Pump_Time_Limit
		Log_Message (Unable to turn oil pump on.)
		Log_Message (******************************************************)
		Log_Message (Terminating test.)
		Log_Message (******************************************************)
		'For cells other than 6G, skip to oil pump on
		Let !Text_Message = Unable to turn oil pump on. Terminating Test.
		Gosub Send_Text_Message
		Goto Oil_Pump_On:
	End	
	'Capture oil pump feedback
	Let $plc_oil_pump_fbk = plc_oil_pump_fbk
	'If oil pump is on, exit loop
	If $plc_oil_pump_fbk = 1
		Log_Message (PLC Fuel on. plc_fuel_on_fbk is %%$plc_fuel_on_fbk,0D%%.)
		Screen_Message (Green, Oil Pump is on.)
		Goto Oil_Pump_On:
	End	

Loop
Oil_Pump_On:

'Skip Manual Mode if only checking TFT during a soak
If $Stop_And_Soak_TFT_Check_Flag = 1 Then Goto End_Activate_PLC:

'Turn on Manual Mode

'Capture Emcon State
Let $EMCON_SYSSTATE = EMCON_SYSSTATE

'If Emcon state is in manual mode, skip turning manual mode
If $EMCON_SYSSTATE = 7
	Goto Manual_Mode_Set:
Else
	Screen_Message (Yellow, Setting EMCON to Manual...)	
End

'Initialize counter
Let $Manual_Mode_Set_Counter = 0

Set_Manual_Mode:

'Toggle emcon state command off
Set EMCON_STATE_CMD (0,0)
Wait (2)

'Initialize timer
Let $Elapsed_Manual_Mode_Time = 0
Let $Manual_Mode_Start_Time = Timer
Let $Manual_Mode_Time_Limit = 30

'Turn Emcon state to manual mode
Set EMCON_STATE_CMD (1,0)

'Start Manual Mode control loop
Do
	'Update timer
	Let $Elapsed_Manual_Mode_Time = Timer - $Manual_Mode_Start_Time
	'If timer exceeds time limit, increment counter and terminate test after 3 attempts
	If $Elapsed_Manual_Mode_Time > $Manual_Mode_Time_Limit
		'Increment counter
		Let $Manual_Mode_Set_Counter = $Manual_Mode_Set_Counter + 1
		'Terminate test after 3 attempts
		If $Manual_Mode_Set_Counter > 3
			'Capture fuel-on feedback
			Let $plc_fuel_on_fbk = plc_fuel_on_fbk
			Log_Message (Unable to set Emcon to Manual Mode. EMCON_SYSSTATE is %%$EMCON_SYSSTATE,0D%%. plc_fuel_on_fbk is %%$plc_fuel_on_fbk,0D%%.)
			Log_Message (******************************************************)
			Log_Message (Terminating test.)
			Log_Message (******************************************************)
			'Send text message
			Let !Text_Message = Unable to set Emcon to Manual Mode. EMCON_SYSSTATE is %%$EMCON_SYSSTATE,0D%%. Terminating Test.
			Gosub Send_Text_Message
			'Terminate test
			Gosub Terminate_Test
		Else
			'Re-attempt setting manual mode
			Goto Set_Manual_Mode:
		End	
	End	
	'Capture emcon state
	Let $EMCON_SYSSTATE = EMCON_SYSSTATE
	'If emcon state is in manual mode, exit loop
	If $EMCON_SYSSTATE = 7
		Log_Message (Emcon is in Manual Mode. EMCON_SYSSTATE is %%$EMCON_SYSSTATE,0D%%. Manual_Mode_Set_Counter is %%$Manual_Mode_Set_Counter%%. Elapsed_Manual_Mode_Time is %%$Elapsed_Manual_Mode_Time,1D%% seconds.)
		Screen_Message (Green, EMCON is in Manual.)
		Wait (2)
		Goto Manual_Mode_Set:
	End
	Screen_Message (Setting Emcon to Manual Mode)
	Wait (1)
Loop
Manual_Mode_Set:

Screen_Message (Green,)
End_Activate_PLC:
End_Sub

'********************************************************************************************
Sub Autoshutdown_Enable
'********************************************************************************************
Log_Message (Running Autoshutdown_Enable subroutine)

'Initialize Terminate Test flag
Let $Terminate_Test_Flag = 0

'If Autoshutdown is Enabled, setup ADACS Alarm

'Initialize timer
Let $Last_Autotest_Heartbeat_Update_Time = Timer

'If autoshutdown is enabled:
If $PC_Eng_And_Cell_Shutdown_Enable = 1
	Screen_Message (Green, Enabling test cell autoshutdown...)
	Log_Message (Enabling Autoshutdown....)
	Wait (2)
	
	'Turn on Auto start sequence for standard dyno cell
	If $Standard_Cell = 1
		'Send Auto Start Cmd This allows ADACS To shut down systems if needed
		Set Plc_Auto_Start_Seq_Cmd (1,0)
		Wait (1)
	End
	
	'Reset heartbeat
	Set Autotest_Heartbeat_Setpoint (2,0)
	Wait (1)
	Set Autotest_Heartbeat_Setpoint (1,0)
	Wait (1)
	
	'Initialize Autotest Cell Shutdown trigger
	Set Testcell_Shutdown_Trig (0,0)
	Wait (1)
	
	'Initialize Drive Route
	Set DriveRoute_set (0,0)
	
	'Initialize Cell Check Ready Flag 
'	Set Cell_Check_Ready (0,0)

	'Enable ADACS based Autotest monitoring Alarms
	Set Autotest_Alarm_Enable (1,0)
	Log_Message (AutoTEST alarms enabled)
	Let $Last_Autotest_Alarm_Enable_Time = Timer
End

End_Sub

'********************************************************************************************
Sub Disable_Autoshutdown
'********************************************************************************************
Log_Message (Running Disable_Autoshutdown subroutine)

'If keeping engine running at end of test, skip engine shutdown
If $Engine_Shutdown = 0 Then Goto Skip_Disable_Autoshutdown:
Log_Message (Autoshutdown disabled)

'Turn off ignition
Set IGNITION_CMD (0,0)
Log_Message (Ignition turned off. AutoshutdownDisable)

'Turn off injectors in standard dyno cells
If $Standard_Cell = 1
	Set EMCON_INJECTOR_CMD (0,0)
	Log_Message (Injectors turned off. AutoshutdownDisable)
Else	
	Goto Disable_Autoshutdown_HIL_Skip_Point:
End

'Capture emcon state
Let $EMCON_SYSSTATE = EMCON_SYSSTATE
'If emcon is in monitor mode, skip setting emcon monitor mode
If $EMCON_SYSSTATE = 2
	Goto Monitor_Mode_Set:
End

'Initialize counter
Let $Set_Monitor_Mode_Counter = 0

Set_Monitor_Mode:

'Initialize timer
Let $Elapsed_Monitor_Mode_Time = 0
Let $Monitor_Mode_Start_Time = Timer
Let $Monitor_Mode_Time_Limit = 10


'Turn emcon state to monitor mode
Set EMCON_STATE_CMD (0,0)

'Start monitor mode control loop
Do
	'Update timer
	Let $Elapsed_Monitor_Mode_Time = Timer - $Monitor_Mode_Start_Time
	'If timer exceeds time limit, increment timer and terminate test after 3 attempts
	If $Elapsed_Monitor_Mode_Time > 10
		'Increment counter
		Let $Set_Monitor_Mode_Counter = $Set_Monitor_Mode_Counter + 1
		'Terminate test after 3 attempts
		If $Set_Monitor_Mode_Counter > 3
			'Save Debug Files
			Save_Debug_Files
			Log_Message (Debug File Saved)
			'Save Flight Recorder
			Save_Flight_Recorder
			Log_Message (Unable to set EMCON to monitor mode. EMCON_SYSSTATE is %%$EMCON_SYSSTATE,0D%%.)
			Log_Message (******************************************************)
			Log_Message (Terminating test.)
			Log_Message (******************************************************)
			'Send text message
			Let !Text_Message = Unable to set EMCON to monitor mode. EMCON_SYSSTATE is %%$EMCON_SYSSTATE,0D%%. Terminating Test.
			Gosub Send_Text_Message
			'Exit loop
			Goto Monitor_Mode_Set:
		Else
			'Toggle emcon state to auto mode
			Set EMCON_STATE_CMD (1,0)
			Wait (10)
			'Re-attempt setting monitor mode
			Goto Set_Monitor_Mode:
		End
	End		
	'Capture emcon state
	Let $EMCON_SYSSTATE = EMCON_SYSSTATE
	'If emcon state is in monitor mode, exit loop
	If $EMCON_SYSSTATE = 2
		Screen_Message (EMCON set to Monitor Mode)
		Log_Message (EMCON set to Monitor_Mode. Set_Monitor_Mode_Counter is %%$Set_Monitor_Mode_Counter%%. Elapsed_Monitor_Mode_Time is %%$Elapsed_Monitor_Mode_Time,1D%% seconds.)
		Goto Monitor_Mode_Set:
	End
	Screen_Message (Setting Emcon to monitor Mode)
	Wait (1)
Loop

Monitor_Mode_Set:

Screen_Message (Green,)

'Shut off fuel
Set PLC_FUEL_ON (0,0)
'Shut off exhaust fan
Set PLC_EXHAUST_FAN_ON (0,0)
'Shut off read-only screen
Set PLC_READONLY_SCREEN (0,0)
'Shut off transmission fluid temperature control
Set PLC_TRANSOIL_ENA (0,0)

Skip_Disable_Autoshutdown:
'Turn auto sequence off for standard dyno cell
If $Standard_Cell = 1
	Set Plc_Auto_Start_Seq_Cmd (0,0)
End

Disable_Autoshutdown_HIL_Skip_Point:
'Shut off heartbeat
Set Autotest_Heartbeat_Setpoint (0,0)

'Disable autotest alarms
Set Autotest_Alarm_Enable (0,0)
Log_Message (AutoTEST alarms disabled)

'Reset shutdown enable flag
Let $PC_Eng_And_Cell_Shutdown_Enable = 0

End_Sub
'********************************************************************************************
Sub Reset_Autoshutdown_Enable
'********************************************************************************************
Log_Message (Running Reset_Autoshutdown_Enable subroutine)

Screen_Message (Green, Enabling Autoshutdown)

'Skip enabling alarms if Autoshutdown is disabled
If $PC_Eng_And_Cell_Shutdown_Enable = 0 Then Goto Exit_Reset_Autoshutdown_Enable:

'Establish Autoshutdown Enable time limit
Let $Autotest_Alarm_Enable_Time_Limit = 3600

'Update timer
Let $Time_Since_Last_Autotest_Alarm_Enable = Timer - $Last_Autotest_Alarm_Enable_Time
'When timer exceeds time limit, reset Autotest alarm enable
If $Time_Since_Last_Autotest_Alarm_Enable > $Autotest_Alarm_Enable_Time_Limit
	Screen_Message (Green, Resetting Test Cell Autoshutdown To Enable......... 5 Seconds)
	Log_Message (It Has Been Over An Hour, Resetting Test Cell Autoshutdown To Enable...)
	'Set AutoTest alarm enable
	Set Autotest_Alarm_Enable (1,0)
	Log_Message (AutoTEST alarms reset)
	'Reset timer
	Let $Last_Autotest_Alarm_Enable_Time = Timer
End

Exit_Reset_Autoshutdown_Enable:
End_Sub

'********************************************************************************************
Sub Update_Autotest_Heartbeat
'********************************************************************************************

'Increment heartbeat setpoint
Let $Last_Autotest_Heartbeat = Autotest_Heartbeat_Feedback
Let $Autotest_Heartbeat_Setpoint = $Autotest_Heartbeat_Setpoint + 1

'Reset Autotest heartbeat when counter reaches 2000
If $Autotest_Heartbeat_Setpoint > 2000
	Log_Message (AutoTEST heartbeat reset to 1)
	Let $Autotest_Heartbeat_Setpoint = 1
End
'Set Autotest heartbeat setpoint
Set Autotest_Heartbeat_Setpoint ($Autotest_Heartbeat_Setpoint,0)
Log_Message (Heartbeat set to %%$Autotest_Heartbeat_Setpoint,0D%%. Previous heartbeat was %%$Last_Autotest_Heartbeat,0D%%.)
'Update heartbeat timer
Let $Last_Autotest_Heartbeat_Update_Time = Timer

End_Sub
'********************************************************************************************
Sub RunSummary
'********************************************************************************************
Log_Message (Running RunSummary Subroutine)

'Set Row Index according to testpoint
Let $Summary_Row_Index = $Current_Testpoint + 1
'Calculate number of testmatrix columns
Let $TestMatrix_Columns = Variable_Columns $TestMatrix
'Establish starting column for test summary
Let $Summary_Column_Index = $TestMatrix_Columns + 2

'Set Point Status string
If Point_Status ($Current_Testpoint) = Ignore
   Let !Status = ignore
End
If Point_Status ($Current_Testpoint) = Done
   Let !Status = done
End
If Point_Status ($Current_Testpoint) = Failed
   Let !Status = Failed
End
'Set date
Let !Date = Date

'Open Excel Test Setup sheet
Excel (Workbook = Test_Setup)
Excel (Worksheet = Matrix)
Excel (Visible = False)	

'Initialize index
Let $Run_Summary_Index = 0
Let $Run_Summary_Column_Count = 10

'Start Run Summary control loop
Do
	'Increment Run Summary index
	Let $Run_Summary_Index = $Run_Summary_Index + 1
	'Increment Summary Column index
	Let $Summary_Column_Index = $Summary_Column_Index + 1
	'Exit loop when all columns have been copied to the Run Summary
	If $Run_Summary_Index > $Run_Summary_Column_Count Then Goto Done_Run_Summary:
	Select_Case $Run_Summary_Index
		Case = 1
			Excel (Cells ($Summary_Row_Index , $Summary_Column_Index) = !Testpoint_Start_Time)	
		Case = 2
			Excel (Cells ($Summary_Row_Index , $Summary_Column_Index) = $Starting_TFT)
		Case = 3
			Excel (Cells ($Summary_Row_Index , $Summary_Column_Index) = !Temp_Action)
		Case = 4
			Excel (Cells ($Summary_Row_Index , $Summary_Column_Index) = $Elapsed_TempAction_Time)
		Case = 5
			Excel (Cells ($Summary_Row_Index , $Summary_Column_Index) = $Measured_TFT)
		Case = 6
			Excel (Cells ($Summary_Row_Index , $Summary_Column_Index) = !Date)			
		Case = 7
			Excel (Cells ($Summary_Row_Index , $Summary_Column_Index) = !End_Time)		
		Case = 8
			Excel (Cells ($Summary_Row_Index , $Summary_Column_Index) = $Elapsed_Testpoint_Time)			
		Case = 9
			Excel (Cells ($Summary_Row_Index , $Summary_Column_Index) = !TestVer)	
		Case = 10
			Excel (Cells ($Summary_Row_Index , $Summary_Column_Index) = !Status)	
	End_Select
Loop
	
Done_Run_Summary:

'Save and Quit Excel
Excel (Save)
Excel (Quit)

End_Sub

'********************************************************************************************
Sub TFT_Data
'********************************************************************************************
Log_Message (Running TFT_Data Subroutine)

'Capture Trans Fluid and Ambient Temperatures in integer format
Let $Measured_TFT = TCTFT_TFT
Let $Measured_TFT = Int ($Measured_TFT)
Let $RunTemp_TFT = TCTFT_TFT
Let $RunTemp_TFT = Int ($RunTemp_TFT)
Let $Ambient_Tmp = Ambient_Tmp
Let $Ambient_Tmp = Int ($Ambient_Tmp)
Let $Commanded_TFT = $CurrentRunTemp

'Capture Dyno Facility Temperatures in integer format
If $Vehicle_Flag ~= 1
	Let $Measured_Sump_Temp = TransSump_Tmp
	Let $Measured_TransCase_Out_Tmp = TransCase_Out_Tmp
	Let $Measured_TransCase_In_Tmp = TransCase_In_Tmp
	Let $TransOil_Vlv_Pos = TransOil_Vlv_Pos
	Let $Measured_Sump_Temp = Int ($Measured_Sump_Temp)	
	Let $Measured_TransCase_Out_Tmp = Int ($Measured_TransCase_Out_Tmp)	
	Let $Measured_TransCase_In_Tmp = Int ($Measured_TransCase_In_Tmp)	
	Let $TransOil_Vlv_Pos = Int ($TransOil_Vlv_Pos)	
End

'Increment TFT summary index
Let $TFT_Data_Index = $TFT_Data_Index + 1

'Open Excel Test Setup sheet
Excel (Workbook = Test_Setup)
Excel (Worksheet = TFT_Data)
Excel (Visible = False)

'Capture current date and time
Let !Date = %%Date%%
Let !Time = %%Time%%

'Summarize measured and commanded temperatures
Excel (Cells ($TFT_Data_Index , 1) = !Date)
Excel (Cells ($TFT_Data_Index , 2) = !Time)
Excel (Cells ($TFT_Data_Index , 3) = $Commanded_TFT)
Excel (Cells ($TFT_Data_Index , 4) = $Measured_TFT)
Excel (Cells ($TFT_Data_Index , 5) = $Ambient_Tmp)
Excel (Cells ($TFT_Data_Index , 6) = $Measured_Sump_Temp)
Excel (Cells ($TFT_Data_Index , 7) = $Measured_TransCase_Out_Tmp)
Excel (Cells ($TFT_Data_Index , 8) = $Measured_TransCase_In_Tmp)
Excel (Cells ($TFT_Data_Index , 9) = $TransOil_Vlv_Pos)

'Summarize temperature action based on RunCode
Excel (Cells ($TFT_Data_Index , 10) = !Temp_Action)
Excel (Cells ($TFT_Data_Index , 11) = $Current_Testpoint)

'Save and Quit Excel
Excel (Save)
Excel (Quit)

End_Sub

'********************************************************************************************
Sub Send_Text_Message
'********************************************************************************************
Log_Message (Running Send_Text_Message Subroutine)

'Increment summary index 
Let $Error_Summary_Index = $Error_Summary_Index + 1

'Open Excel test setup error state summary
Excel (Workbook = Test_Setup)
Excel (Worksheet = ErrorStates)
Excel (Visible = False)

'Capture current date and time
Let !Date = %%Date%%
Let !Time = %%Time%%

'Summarize date, time, and error message in Excel Test Setup
Excel (Cells ($Error_Summary_Index , 1) = !Date)
Excel (Cells ($Error_Summary_Index , 2) = !Time)
Excel (Cells ($Error_Summary_Index , 3) = !Text_Message)

'Save and Quit Excel
Excel (Save)
Excel (Quit)

'If Text Messaging is enabled, run text page macro
If $Text_On = 1
	'Open Excel Test Setup sheet
    Excel (Workbook = Test_Setup)
    Excel (Worksheet = Master)
	'Populate Text Message Range with current text message
	Excel (Range (Text_Message) = !Text_Message)
	'Run Text Message Macro
	Excel (Macro = Send_Text_Message)
    Wait (1)
End

'Save and Quit Excel
Excel (Save)
Excel (Quit)

End_Sub

'--------------------------------------------------------------------------------------------
' End of lights-out testing monitors and subroutines
'--------------------------------------------------------------------------------------------

'End of Procedure